//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/wbreza/azure-sdk-for-go/sdk/resourcemanager/machinelearning/armmachinelearning/v3"
	"net/http"
	"net/url"
	"regexp"
	"strconv"
)

// InferencePoolsServer is a fake server for instances of the armmachinelearning.InferencePoolsClient type.
type InferencePoolsServer struct{
	// BeginCreateOrUpdate is the fake for method InferencePoolsClient.BeginCreateOrUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusCreated
	BeginCreateOrUpdate func(ctx context.Context, resourceGroupName string, workspaceName string, inferencePoolName string, body armmachinelearning.InferencePool, options *armmachinelearning.InferencePoolsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armmachinelearning.InferencePoolsClientCreateOrUpdateResponse], errResp azfake.ErrorResponder)

	// BeginDelete is the fake for method InferencePoolsClient.BeginDelete
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted, http.StatusNoContent
	BeginDelete func(ctx context.Context, resourceGroupName string, workspaceName string, inferencePoolName string, options *armmachinelearning.InferencePoolsClientBeginDeleteOptions) (resp azfake.PollerResponder[armmachinelearning.InferencePoolsClientDeleteResponse], errResp azfake.ErrorResponder)

	// Get is the fake for method InferencePoolsClient.Get
	// HTTP status codes to indicate success: http.StatusOK
	Get func(ctx context.Context, resourceGroupName string, workspaceName string, inferencePoolName string, options *armmachinelearning.InferencePoolsClientGetOptions) (resp azfake.Responder[armmachinelearning.InferencePoolsClientGetResponse], errResp azfake.ErrorResponder)

	// GetStatus is the fake for method InferencePoolsClient.GetStatus
	// HTTP status codes to indicate success: http.StatusOK
	GetStatus func(ctx context.Context, resourceGroupName string, workspaceName string, inferencePoolName string, options *armmachinelearning.InferencePoolsClientGetStatusOptions) (resp azfake.Responder[armmachinelearning.InferencePoolsClientGetStatusResponse], errResp azfake.ErrorResponder)

	// NewListPager is the fake for method InferencePoolsClient.NewListPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListPager func(resourceGroupName string, workspaceName string, options *armmachinelearning.InferencePoolsClientListOptions) (resp azfake.PagerResponder[armmachinelearning.InferencePoolsClientListResponse])

	// NewListSKUsPager is the fake for method InferencePoolsClient.NewListSKUsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListSKUsPager func(resourceGroupName string, workspaceName string, inferencePoolName string, options *armmachinelearning.InferencePoolsClientListSKUsOptions) (resp azfake.PagerResponder[armmachinelearning.InferencePoolsClientListSKUsResponse])

	// BeginUpdate is the fake for method InferencePoolsClient.BeginUpdate
	// HTTP status codes to indicate success: http.StatusOK, http.StatusAccepted
	BeginUpdate func(ctx context.Context, resourceGroupName string, workspaceName string, inferencePoolName string, body armmachinelearning.PartialMinimalTrackedResourceWithSKUAndIdentity, options *armmachinelearning.InferencePoolsClientBeginUpdateOptions) (resp azfake.PollerResponder[armmachinelearning.InferencePoolsClientUpdateResponse], errResp azfake.ErrorResponder)

}

// NewInferencePoolsServerTransport creates a new instance of InferencePoolsServerTransport with the provided implementation.
// The returned InferencePoolsServerTransport instance is connected to an instance of armmachinelearning.InferencePoolsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewInferencePoolsServerTransport(srv *InferencePoolsServer) *InferencePoolsServerTransport {
	return &InferencePoolsServerTransport{
		srv: srv,
		beginCreateOrUpdate: newTracker[azfake.PollerResponder[armmachinelearning.InferencePoolsClientCreateOrUpdateResponse]](),
		beginDelete: newTracker[azfake.PollerResponder[armmachinelearning.InferencePoolsClientDeleteResponse]](),
		newListPager: newTracker[azfake.PagerResponder[armmachinelearning.InferencePoolsClientListResponse]](),
		newListSKUsPager: newTracker[azfake.PagerResponder[armmachinelearning.InferencePoolsClientListSKUsResponse]](),
		beginUpdate: newTracker[azfake.PollerResponder[armmachinelearning.InferencePoolsClientUpdateResponse]](),
	}
}

// InferencePoolsServerTransport connects instances of armmachinelearning.InferencePoolsClient to instances of InferencePoolsServer.
// Don't use this type directly, use NewInferencePoolsServerTransport instead.
type InferencePoolsServerTransport struct {
	srv *InferencePoolsServer
	beginCreateOrUpdate *tracker[azfake.PollerResponder[armmachinelearning.InferencePoolsClientCreateOrUpdateResponse]]
	beginDelete *tracker[azfake.PollerResponder[armmachinelearning.InferencePoolsClientDeleteResponse]]
	newListPager *tracker[azfake.PagerResponder[armmachinelearning.InferencePoolsClientListResponse]]
	newListSKUsPager *tracker[azfake.PagerResponder[armmachinelearning.InferencePoolsClientListSKUsResponse]]
	beginUpdate *tracker[azfake.PollerResponder[armmachinelearning.InferencePoolsClientUpdateResponse]]
}

// Do implements the policy.Transporter interface for InferencePoolsServerTransport.
func (i *InferencePoolsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "InferencePoolsClient.BeginCreateOrUpdate":
		resp, err = i.dispatchBeginCreateOrUpdate(req)
	case "InferencePoolsClient.BeginDelete":
		resp, err = i.dispatchBeginDelete(req)
	case "InferencePoolsClient.Get":
		resp, err = i.dispatchGet(req)
	case "InferencePoolsClient.GetStatus":
		resp, err = i.dispatchGetStatus(req)
	case "InferencePoolsClient.NewListPager":
		resp, err = i.dispatchNewListPager(req)
	case "InferencePoolsClient.NewListSKUsPager":
		resp, err = i.dispatchNewListSKUsPager(req)
	case "InferencePoolsClient.BeginUpdate":
		resp, err = i.dispatchBeginUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (i *InferencePoolsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if i.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginCreateOrUpdate not implemented")}
	}
	beginCreateOrUpdate := i.beginCreateOrUpdate.get(req)
	if beginCreateOrUpdate == nil {
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/inferencePools/(?P<inferencePoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmachinelearning.InferencePool](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	inferencePoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("inferencePoolName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.BeginCreateOrUpdate(req.Context(), resourceGroupNameParam, workspaceNameParam, inferencePoolNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
		beginCreateOrUpdate = &respr
		i.beginCreateOrUpdate.add(req, beginCreateOrUpdate)
	}

	resp, err := server.PollerResponderNext(beginCreateOrUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusCreated}, resp.StatusCode) {
		i.beginCreateOrUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusCreated", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginCreateOrUpdate) {
		i.beginCreateOrUpdate.remove(req)
	}

	return resp, nil
}

func (i *InferencePoolsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if i.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginDelete not implemented")}
	}
	beginDelete := i.beginDelete.get(req)
	if beginDelete == nil {
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/inferencePools/(?P<inferencePoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	inferencePoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("inferencePoolName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.BeginDelete(req.Context(), resourceGroupNameParam, workspaceNameParam, inferencePoolNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
		beginDelete = &respr
		i.beginDelete.add(req, beginDelete)
	}

	resp, err := server.PollerResponderNext(beginDelete, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted, http.StatusNoContent}, resp.StatusCode) {
		i.beginDelete.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted, http.StatusNoContent", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginDelete) {
		i.beginDelete.remove(req)
	}

	return resp, nil
}

func (i *InferencePoolsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if i.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("fake for method Get not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/inferencePools/(?P<inferencePoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	inferencePoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("inferencePoolName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.Get(req.Context(), resourceGroupNameParam, workspaceNameParam, inferencePoolNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).InferencePool, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *InferencePoolsServerTransport) dispatchGetStatus(req *http.Request) (*http.Response, error) {
	if i.srv.GetStatus == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetStatus not implemented")}
	}
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/inferencePools/(?P<inferencePoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/getStatus`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	inferencePoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("inferencePoolName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.GetStatus(req.Context(), resourceGroupNameParam, workspaceNameParam, inferencePoolNameParam, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).PoolStatus, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (i *InferencePoolsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListPager not implemented")}
	}
	newListPager := i.newListPager.get(req)
	if newListPager == nil {
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/inferencePools`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	countUnescaped, err := url.QueryUnescape(qp.Get("count"))
	if err != nil {
		return nil, err
	}
	countParam, err := parseOptional(countUnescaped, func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	skipUnescaped, err := url.QueryUnescape(qp.Get("$skip"))
	if err != nil {
		return nil, err
	}
	skipParam := getOptional(skipUnescaped)
	tagsUnescaped, err := url.QueryUnescape(qp.Get("tags"))
	if err != nil {
		return nil, err
	}
	tagsParam := getOptional(tagsUnescaped)
	propertiesUnescaped, err := url.QueryUnescape(qp.Get("properties"))
	if err != nil {
		return nil, err
	}
	propertiesParam := getOptional(propertiesUnescaped)
	orderByUnescaped, err := url.QueryUnescape(qp.Get("orderBy"))
	if err != nil {
		return nil, err
	}
	orderByParam := getOptional(armmachinelearning.OrderString(orderByUnescaped))
	var options *armmachinelearning.InferencePoolsClientListOptions
	if countParam != nil || skipParam != nil || tagsParam != nil || propertiesParam != nil || orderByParam != nil {
		options = &armmachinelearning.InferencePoolsClientListOptions{
			Count: countParam,
			Skip: skipParam,
			Tags: tagsParam,
			Properties: propertiesParam,
			OrderBy: orderByParam,
		}
	}
resp := i.srv.NewListPager(resourceGroupNameParam, workspaceNameParam, options)
		newListPager = &resp
		i.newListPager.add(req, newListPager)
		server.PagerResponderInjectNextLinks(newListPager, req, func(page *armmachinelearning.InferencePoolsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListPager) {
		i.newListPager.remove(req)
	}
	return resp, nil
}

func (i *InferencePoolsServerTransport) dispatchNewListSKUsPager(req *http.Request) (*http.Response, error) {
	if i.srv.NewListSKUsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListSKUsPager not implemented")}
	}
	newListSKUsPager := i.newListSKUsPager.get(req)
	if newListSKUsPager == nil {
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/inferencePools/(?P<inferencePoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/skus`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	inferencePoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("inferencePoolName")])
	if err != nil {
		return nil, err
	}
	countUnescaped, err := url.QueryUnescape(qp.Get("count"))
	if err != nil {
		return nil, err
	}
	countParam, err := parseOptional(countUnescaped, func(v string) (int32, error) {
		p, parseErr := strconv.ParseInt(v, 10, 32)
		if parseErr != nil {
			return 0, parseErr
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	skipUnescaped, err := url.QueryUnescape(qp.Get("$skip"))
	if err != nil {
		return nil, err
	}
	skipParam := getOptional(skipUnescaped)
	var options *armmachinelearning.InferencePoolsClientListSKUsOptions
	if countParam != nil || skipParam != nil {
		options = &armmachinelearning.InferencePoolsClientListSKUsOptions{
			Count: countParam,
			Skip: skipParam,
		}
	}
resp := i.srv.NewListSKUsPager(resourceGroupNameParam, workspaceNameParam, inferencePoolNameParam, options)
		newListSKUsPager = &resp
		i.newListSKUsPager.add(req, newListSKUsPager)
		server.PagerResponderInjectNextLinks(newListSKUsPager, req, func(page *armmachinelearning.InferencePoolsClientListSKUsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListSKUsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		i.newListSKUsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListSKUsPager) {
		i.newListSKUsPager.remove(req)
	}
	return resp, nil
}

func (i *InferencePoolsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if i.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("fake for method BeginUpdate not implemented")}
	}
	beginUpdate := i.beginUpdate.get(req)
	if beginUpdate == nil {
	const regexStr = `/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/resourceGroups/(?P<resourceGroupName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/providers/Microsoft\.MachineLearningServices/workspaces/(?P<workspaceName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/inferencePools/(?P<inferencePoolName>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[armmachinelearning.PartialMinimalTrackedResourceWithSKUAndIdentity](req)
	if err != nil {
		return nil, err
	}
	resourceGroupNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("resourceGroupName")])
	if err != nil {
		return nil, err
	}
	workspaceNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("workspaceName")])
	if err != nil {
		return nil, err
	}
	inferencePoolNameParam, err := url.PathUnescape(matches[regex.SubexpIndex("inferencePoolName")])
	if err != nil {
		return nil, err
	}
	respr, errRespr := i.srv.BeginUpdate(req.Context(), resourceGroupNameParam, workspaceNameParam, inferencePoolNameParam, body, nil)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
		beginUpdate = &respr
		i.beginUpdate.add(req, beginUpdate)
	}

	resp, err := server.PollerResponderNext(beginUpdate, req)
	if err != nil {
		return nil, err
	}

	if !contains([]int{http.StatusOK, http.StatusAccepted}, resp.StatusCode) {
		i.beginUpdate.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK, http.StatusAccepted", resp.StatusCode)}
	}
	if !server.PollerResponderMore(beginUpdate) {
		i.beginUpdate.remove(req)
	}

	return resp, nil
}

