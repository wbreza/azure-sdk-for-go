// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azsearch

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// IndexesClient contains the methods for the Indexes group.
// Don't use this type directly, use a constructor function instead.
type IndexesClient struct {
	internal *azcore.Client
	endpoint string
}

// Analyze - Shows how an analyzer breaks text into tokens.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - indexName - The name of the index for which to test an analyzer.
//   - request - The text and analyzer or analysis components to test.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - IndexesClientAnalyzeOptions contains the optional parameters for the IndexesClient.Analyze method.
func (client *IndexesClient) Analyze(ctx context.Context, indexName string, request AnalyzeRequest, requestOptions *RequestOptions, options *IndexesClientAnalyzeOptions) (IndexesClientAnalyzeResponse, error) {
	var err error
	req, err := client.analyzeCreateRequest(ctx, indexName, request, requestOptions, options)
	if err != nil {
		return IndexesClientAnalyzeResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexesClientAnalyzeResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IndexesClientAnalyzeResponse{}, err
	}
	resp, err := client.analyzeHandleResponse(httpResp)
	return resp, err
}

// analyzeCreateRequest creates the Analyze request.
func (client *IndexesClient) analyzeCreateRequest(ctx context.Context, indexName string, request AnalyzeRequest, requestOptions *RequestOptions, _ *IndexesClientAnalyzeOptions) (*policy.Request, error) {
	urlPath := "/indexes('{indexName}')/search.analyze"
	if indexName == "" {
		return nil, errors.New("parameter indexName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexName}", url.PathEscape(indexName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	if err := runtime.MarshalAsJSON(req, request); err != nil {
	return nil, err
}
	return req, nil
}

// analyzeHandleResponse handles the Analyze response.
func (client *IndexesClient) analyzeHandleResponse(resp *http.Response) (IndexesClientAnalyzeResponse, error) {
	result := IndexesClientAnalyzeResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AnalyzeResult); err != nil {
		return IndexesClientAnalyzeResponse{}, err
	}
	return result, nil
}

// Create - Creates a new search index.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - indexParam - The definition of the index to create.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - IndexesClientCreateOptions contains the optional parameters for the IndexesClient.Create method.
func (client *IndexesClient) Create(ctx context.Context, indexParam Index, requestOptions *RequestOptions, options *IndexesClientCreateOptions) (IndexesClientCreateResponse, error) {
	var err error
	req, err := client.createCreateRequest(ctx, indexParam, requestOptions, options)
	if err != nil {
		return IndexesClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexesClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return IndexesClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *IndexesClient) createCreateRequest(ctx context.Context, indexParam Index, requestOptions *RequestOptions, _ *IndexesClientCreateOptions) (*policy.Request, error) {
	urlPath := "/indexes"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	if err := runtime.MarshalAsJSON(req, indexParam); err != nil {
	return nil, err
}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *IndexesClient) createHandleResponse(resp *http.Response) (IndexesClientCreateResponse, error) {
	result := IndexesClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Index); err != nil {
		return IndexesClientCreateResponse{}, err
	}
	return result, nil
}

// CreateOrUpdate - Creates a new search index or updates an index if it already exists.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - indexName - The definition of the index to create or update.
//   - prefer - For HTTP PUT requests, instructs the service to return the created/updated resource on success.
//   - indexParam - The definition of the index to create or update.
//   - options - IndexesClientCreateOrUpdateOptions contains the optional parameters for the IndexesClient.CreateOrUpdate method.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
func (client *IndexesClient) CreateOrUpdate(ctx context.Context, indexName string, prefer Enum0, indexParam Index, options *IndexesClientCreateOrUpdateOptions, requestOptions *RequestOptions) (IndexesClientCreateOrUpdateResponse, error) {
	var err error
	req, err := client.createOrUpdateCreateRequest(ctx, indexName, prefer, indexParam, options, requestOptions)
	if err != nil {
		return IndexesClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return IndexesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *IndexesClient) createOrUpdateCreateRequest(ctx context.Context, indexName string, prefer Enum0, indexParam Index, options *IndexesClientCreateOrUpdateOptions, requestOptions *RequestOptions) (*policy.Request, error) {
	urlPath := "/indexes('{indexName}')"
	if indexName == "" {
		return nil, errors.New("parameter indexName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexName}", url.PathEscape(indexName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.AllowIndexDowntime != nil {
		reqQP.Set("allowIndexDowntime", strconv.FormatBool(*options.AllowIndexDowntime))
	}
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	if options != nil && options.IfNoneMatch != nil {
		req.Raw().Header["If-None-Match"] = []string{*options.IfNoneMatch}
	}
	req.Raw().Header["Prefer"] = []string{string(prefer)}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	if err := runtime.MarshalAsJSON(req, indexParam); err != nil {
	return nil, err
}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *IndexesClient) createOrUpdateHandleResponse(resp *http.Response) (IndexesClientCreateOrUpdateResponse, error) {
	result := IndexesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Index); err != nil {
		return IndexesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes a search index and all the documents it contains. This operation is permanent, with no recovery option.
// Make sure you have a master copy of your index definition, data ingestion code, and a
// backup of the primary data source in case you need to re-build the index.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - indexName - The name of the index to delete.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - IndexesClientDeleteOptions contains the optional parameters for the IndexesClient.Delete method.
func (client *IndexesClient) Delete(ctx context.Context, indexName string, requestOptions *RequestOptions, options *IndexesClientDeleteOptions) (IndexesClientDeleteResponse, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, indexName, requestOptions, options)
	if err != nil {
		return IndexesClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent, http.StatusNotFound) {
		err = runtime.NewResponseError(httpResp)
		return IndexesClientDeleteResponse{}, err
	}
	return IndexesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *IndexesClient) deleteCreateRequest(ctx context.Context, indexName string, requestOptions *RequestOptions, options *IndexesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/indexes('{indexName}')"
	if indexName == "" {
		return nil, errors.New("parameter indexName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexName}", url.PathEscape(indexName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	if options != nil && options.IfNoneMatch != nil {
		req.Raw().Header["If-None-Match"] = []string{*options.IfNoneMatch}
	}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// Get - Retrieves an index definition.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - indexName - The name of the index to retrieve.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - IndexesClientGetOptions contains the optional parameters for the IndexesClient.Get method.
func (client *IndexesClient) Get(ctx context.Context, indexName string, requestOptions *RequestOptions, options *IndexesClientGetOptions) (IndexesClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, indexName, requestOptions, options)
	if err != nil {
		return IndexesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IndexesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *IndexesClient) getCreateRequest(ctx context.Context, indexName string, requestOptions *RequestOptions, _ *IndexesClientGetOptions) (*policy.Request, error) {
	urlPath := "/indexes('{indexName}')"
	if indexName == "" {
		return nil, errors.New("parameter indexName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexName}", url.PathEscape(indexName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *IndexesClient) getHandleResponse(resp *http.Response) (IndexesClientGetResponse, error) {
	result := IndexesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Index); err != nil {
		return IndexesClientGetResponse{}, err
	}
	return result, nil
}

// GetStatistics - Returns statistics for the given index, including a document count and storage usage.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - indexName - The name of the index for which to retrieve statistics.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - IndexesClientGetStatisticsOptions contains the optional parameters for the IndexesClient.GetStatistics method.
func (client *IndexesClient) GetStatistics(ctx context.Context, indexName string, requestOptions *RequestOptions, options *IndexesClientGetStatisticsOptions) (IndexesClientGetStatisticsResponse, error) {
	var err error
	req, err := client.getStatisticsCreateRequest(ctx, indexName, requestOptions, options)
	if err != nil {
		return IndexesClientGetStatisticsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexesClientGetStatisticsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IndexesClientGetStatisticsResponse{}, err
	}
	resp, err := client.getStatisticsHandleResponse(httpResp)
	return resp, err
}

// getStatisticsCreateRequest creates the GetStatistics request.
func (client *IndexesClient) getStatisticsCreateRequest(ctx context.Context, indexName string, requestOptions *RequestOptions, _ *IndexesClientGetStatisticsOptions) (*policy.Request, error) {
	urlPath := "/indexes('{indexName}')/search.stats"
	if indexName == "" {
		return nil, errors.New("parameter indexName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexName}", url.PathEscape(indexName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// getStatisticsHandleResponse handles the GetStatistics response.
func (client *IndexesClient) getStatisticsHandleResponse(resp *http.Response) (IndexesClientGetStatisticsResponse, error) {
	result := IndexesClientGetStatisticsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.GetIndexStatisticsResult); err != nil {
		return IndexesClientGetStatisticsResponse{}, err
	}
	return result, nil
}

// NewListPager - Lists all indexes available for a search service.
//
// Generated from API version 2024-07-01
//   - options - IndexesClientListOptions contains the optional parameters for the IndexesClient.NewListPager method.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
func (client *IndexesClient) NewListPager(options *IndexesClientListOptions, requestOptions *RequestOptions) (*runtime.Pager[IndexesClientListResponse]) {
	return runtime.NewPager(runtime.PagingHandler[IndexesClientListResponse]{
		More: func(page IndexesClientListResponse) bool {
			return false
		},
		Fetcher: func(ctx context.Context, page *IndexesClientListResponse) (IndexesClientListResponse, error) {
			req, err := client.listCreateRequest(ctx, options, requestOptions)
			if err != nil {
				return IndexesClientListResponse{}, err
			}
			resp, err := client.internal.Pipeline().Do(req)
			if err != nil {
				return IndexesClientListResponse{}, err
			}
			if !runtime.HasStatusCode(resp, http.StatusOK) {
				return IndexesClientListResponse{}, runtime.NewResponseError(resp)
			}
			return client.listHandleResponse(resp)
		},
	})
}

// listCreateRequest creates the List request.
func (client *IndexesClient) listCreateRequest(ctx context.Context, options *IndexesClientListOptions, requestOptions *RequestOptions) (*policy.Request, error) {
	urlPath := "/indexes"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Select != nil {
		reqQP.Set("$select", *options.Select)
	}
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *IndexesClient) listHandleResponse(resp *http.Response) (IndexesClientListResponse, error) {
	result := IndexesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ListIndexesResult); err != nil {
		return IndexesClientListResponse{}, err
	}
	return result, nil
}

