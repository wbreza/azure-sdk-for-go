// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azsearch

// AzureOpenAIModelName - The Azure Open AI model name that will be called.
type AzureOpenAIModelName string

const (
	AzureOpenAIModelNameTextEmbedding3Large AzureOpenAIModelName = "text-embedding-3-large"
	AzureOpenAIModelNameTextEmbedding3Small AzureOpenAIModelName = "text-embedding-3-small"
	AzureOpenAIModelNameTextEmbeddingAda002 AzureOpenAIModelName = "text-embedding-ada-002"
)

// PossibleAzureOpenAIModelNameValues returns the possible values for the AzureOpenAIModelName const type.
func PossibleAzureOpenAIModelNameValues() []AzureOpenAIModelName {
	return []AzureOpenAIModelName{	
		AzureOpenAIModelNameTextEmbedding3Large,
		AzureOpenAIModelNameTextEmbedding3Small,
		AzureOpenAIModelNameTextEmbeddingAda002,
	}
}

// BlobIndexerDataToExtract - Specifies the data to extract from Azure blob storage and tells the indexer which data to extract
// from image content when "imageAction" is set to a value other than "none". This applies to embedded
// image content in a .PDF or other application, or image files such as .jpg and .png, in Azure blobs.
type BlobIndexerDataToExtract string

const (
	// BlobIndexerDataToExtractAllMetadata - Extracts metadata provided by the Azure blob storage subsystem and the content-type
// specific metadata (for example, metadata unique to just .png files are indexed).
	BlobIndexerDataToExtractAllMetadata BlobIndexerDataToExtract = "allMetadata"
	// BlobIndexerDataToExtractContentAndMetadata - Extracts all metadata and textual content from each blob.
	BlobIndexerDataToExtractContentAndMetadata BlobIndexerDataToExtract = "contentAndMetadata"
	// BlobIndexerDataToExtractStorageMetadata - Indexes just the standard blob properties and user-specified metadata.
	BlobIndexerDataToExtractStorageMetadata BlobIndexerDataToExtract = "storageMetadata"
)

// PossibleBlobIndexerDataToExtractValues returns the possible values for the BlobIndexerDataToExtract const type.
func PossibleBlobIndexerDataToExtractValues() []BlobIndexerDataToExtract {
	return []BlobIndexerDataToExtract{	
		BlobIndexerDataToExtractAllMetadata,
		BlobIndexerDataToExtractContentAndMetadata,
		BlobIndexerDataToExtractStorageMetadata,
	}
}

// BlobIndexerImageAction - Determines how to process embedded images and image files in Azure blob storage. Setting the "imageAction"
// configuration to any value other than "none" requires that a skillset also be attached to
// that indexer.
type BlobIndexerImageAction string

const (
	// BlobIndexerImageActionGenerateNormalizedImagePerPage - Extracts text from images (for example, the word "STOP" from a traffic
// stop sign), and embeds it into the content field, but treats PDF files differently in that each page will be rendered as
// an image and normalized accordingly, instead of extracting embedded images. Non-PDF file types will be treated the same
// as if "generateNormalizedImages" was set.
	BlobIndexerImageActionGenerateNormalizedImagePerPage BlobIndexerImageAction = "generateNormalizedImagePerPage"
	// BlobIndexerImageActionGenerateNormalizedImages - Extracts text from images (for example, the word "STOP" from a traffic
// stop sign), and embeds it into the content field. This action requires that "dataToExtract" is set to "contentAndMetadata".
// A normalized image refers to additional processing resulting in uniform image output, sized and rotated to promote consistent
// rendering when you include images in visual search results. This information is generated for each image when you use this
// option.
	BlobIndexerImageActionGenerateNormalizedImages BlobIndexerImageAction = "generateNormalizedImages"
	// BlobIndexerImageActionNone - Ignores embedded images or image files in the data set. This is the default.
	BlobIndexerImageActionNone BlobIndexerImageAction = "none"
)

// PossibleBlobIndexerImageActionValues returns the possible values for the BlobIndexerImageAction const type.
func PossibleBlobIndexerImageActionValues() []BlobIndexerImageAction {
	return []BlobIndexerImageAction{	
		BlobIndexerImageActionGenerateNormalizedImagePerPage,
		BlobIndexerImageActionGenerateNormalizedImages,
		BlobIndexerImageActionNone,
	}
}

// BlobIndexerPDFTextRotationAlgorithm - Determines algorithm for text extraction from PDF files in Azure blob storage.
type BlobIndexerPDFTextRotationAlgorithm string

const (
	// BlobIndexerPDFTextRotationAlgorithmDetectAngles - May produce better and more readable text extraction from PDF files that
// have rotated text within them. Note that there may be a small performance speed impact when this parameter is used. This
// parameter only applies to PDF files, and only to PDFs with embedded text. If the rotated text appears within an embedded
// image in the PDF, this parameter does not apply.
	BlobIndexerPDFTextRotationAlgorithmDetectAngles BlobIndexerPDFTextRotationAlgorithm = "detectAngles"
	// BlobIndexerPDFTextRotationAlgorithmNone - Leverages normal text extraction. This is the default.
	BlobIndexerPDFTextRotationAlgorithmNone BlobIndexerPDFTextRotationAlgorithm = "none"
)

// PossibleBlobIndexerPDFTextRotationAlgorithmValues returns the possible values for the BlobIndexerPDFTextRotationAlgorithm const type.
func PossibleBlobIndexerPDFTextRotationAlgorithmValues() []BlobIndexerPDFTextRotationAlgorithm {
	return []BlobIndexerPDFTextRotationAlgorithm{	
		BlobIndexerPDFTextRotationAlgorithmDetectAngles,
		BlobIndexerPDFTextRotationAlgorithmNone,
	}
}

// BlobIndexerParsingMode - Represents the parsing mode for indexing from an Azure blob data source.
type BlobIndexerParsingMode string

const (
	// BlobIndexerParsingModeDefault - Set to default for normal file processing.
	BlobIndexerParsingModeDefault BlobIndexerParsingMode = "default"
	// BlobIndexerParsingModeDelimitedText - Set to delimitedText when blobs are plain CSV files.
	BlobIndexerParsingModeDelimitedText BlobIndexerParsingMode = "delimitedText"
	// BlobIndexerParsingModeJSON - Set to json to extract structured content from JSON files.
	BlobIndexerParsingModeJSON BlobIndexerParsingMode = "json"
	// BlobIndexerParsingModeJSONArray - Set to jsonArray to extract individual elements of a JSON array as separate documents.
	BlobIndexerParsingModeJSONArray BlobIndexerParsingMode = "jsonArray"
	// BlobIndexerParsingModeJSONLines - Set to jsonLines to extract individual JSON entities, separated by a new line, as separate
// documents.
	BlobIndexerParsingModeJSONLines BlobIndexerParsingMode = "jsonLines"
	// BlobIndexerParsingModeText - Set to text to improve indexing performance on plain text files in blob storage.
	BlobIndexerParsingModeText BlobIndexerParsingMode = "text"
)

// PossibleBlobIndexerParsingModeValues returns the possible values for the BlobIndexerParsingMode const type.
func PossibleBlobIndexerParsingModeValues() []BlobIndexerParsingMode {
	return []BlobIndexerParsingMode{	
		BlobIndexerParsingModeDefault,
		BlobIndexerParsingModeDelimitedText,
		BlobIndexerParsingModeJSON,
		BlobIndexerParsingModeJSONArray,
		BlobIndexerParsingModeJSONLines,
		BlobIndexerParsingModeText,
	}
}

// CharFilterName - Defines the names of all character filters supported by the search engine.
type CharFilterName string

const (
	// CharFilterNameHTMLStrip - A character filter that attempts to strip out HTML constructs. See https://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.html
	CharFilterNameHTMLStrip CharFilterName = "html_strip"
)

// PossibleCharFilterNameValues returns the possible values for the CharFilterName const type.
func PossibleCharFilterNameValues() []CharFilterName {
	return []CharFilterName{	
		CharFilterNameHTMLStrip,
	}
}

// CjkBigramTokenFilterScripts - Scripts that can be ignored by CjkBigramTokenFilter.
type CjkBigramTokenFilterScripts string

const (
	// CjkBigramTokenFilterScriptsHan - Ignore Han script when forming bigrams of CJK terms.
	CjkBigramTokenFilterScriptsHan CjkBigramTokenFilterScripts = "han"
	// CjkBigramTokenFilterScriptsHangul - Ignore Hangul script when forming bigrams of CJK terms.
	CjkBigramTokenFilterScriptsHangul CjkBigramTokenFilterScripts = "hangul"
	// CjkBigramTokenFilterScriptsHiragana - Ignore Hiragana script when forming bigrams of CJK terms.
	CjkBigramTokenFilterScriptsHiragana CjkBigramTokenFilterScripts = "hiragana"
	// CjkBigramTokenFilterScriptsKatakana - Ignore Katakana script when forming bigrams of CJK terms.
	CjkBigramTokenFilterScriptsKatakana CjkBigramTokenFilterScripts = "katakana"
)

// PossibleCjkBigramTokenFilterScriptsValues returns the possible values for the CjkBigramTokenFilterScripts const type.
func PossibleCjkBigramTokenFilterScriptsValues() []CjkBigramTokenFilterScripts {
	return []CjkBigramTokenFilterScripts{	
		CjkBigramTokenFilterScriptsHan,
		CjkBigramTokenFilterScriptsHangul,
		CjkBigramTokenFilterScriptsHiragana,
		CjkBigramTokenFilterScriptsKatakana,
	}
}

// CustomEntityLookupSkillLanguage - The language codes supported for input text by CustomEntityLookupSkill.
type CustomEntityLookupSkillLanguage string

const (
	// CustomEntityLookupSkillLanguageDa - Danish
	CustomEntityLookupSkillLanguageDa CustomEntityLookupSkillLanguage = "da"
	// CustomEntityLookupSkillLanguageDe - German
	CustomEntityLookupSkillLanguageDe CustomEntityLookupSkillLanguage = "de"
	// CustomEntityLookupSkillLanguageEn - English
	CustomEntityLookupSkillLanguageEn CustomEntityLookupSkillLanguage = "en"
	// CustomEntityLookupSkillLanguageEs - Spanish
	CustomEntityLookupSkillLanguageEs CustomEntityLookupSkillLanguage = "es"
	// CustomEntityLookupSkillLanguageFi - Finnish
	CustomEntityLookupSkillLanguageFi CustomEntityLookupSkillLanguage = "fi"
	// CustomEntityLookupSkillLanguageFr - French
	CustomEntityLookupSkillLanguageFr CustomEntityLookupSkillLanguage = "fr"
	// CustomEntityLookupSkillLanguageIt - Italian
	CustomEntityLookupSkillLanguageIt CustomEntityLookupSkillLanguage = "it"
	// CustomEntityLookupSkillLanguageKo - Korean
	CustomEntityLookupSkillLanguageKo CustomEntityLookupSkillLanguage = "ko"
	// CustomEntityLookupSkillLanguagePt - Portuguese
	CustomEntityLookupSkillLanguagePt CustomEntityLookupSkillLanguage = "pt"
)

// PossibleCustomEntityLookupSkillLanguageValues returns the possible values for the CustomEntityLookupSkillLanguage const type.
func PossibleCustomEntityLookupSkillLanguageValues() []CustomEntityLookupSkillLanguage {
	return []CustomEntityLookupSkillLanguage{	
		CustomEntityLookupSkillLanguageDa,
		CustomEntityLookupSkillLanguageDe,
		CustomEntityLookupSkillLanguageEn,
		CustomEntityLookupSkillLanguageEs,
		CustomEntityLookupSkillLanguageFi,
		CustomEntityLookupSkillLanguageFr,
		CustomEntityLookupSkillLanguageIt,
		CustomEntityLookupSkillLanguageKo,
		CustomEntityLookupSkillLanguagePt,
	}
}

// EdgeNGramTokenFilterSide - Specifies which side of the input an n-gram should be generated from.
type EdgeNGramTokenFilterSide string

const (
	// EdgeNGramTokenFilterSideBack - Specifies that the n-gram should be generated from the back of the input.
	EdgeNGramTokenFilterSideBack EdgeNGramTokenFilterSide = "back"
	// EdgeNGramTokenFilterSideFront - Specifies that the n-gram should be generated from the front of the input.
	EdgeNGramTokenFilterSideFront EdgeNGramTokenFilterSide = "front"
)

// PossibleEdgeNGramTokenFilterSideValues returns the possible values for the EdgeNGramTokenFilterSide const type.
func PossibleEdgeNGramTokenFilterSideValues() []EdgeNGramTokenFilterSide {
	return []EdgeNGramTokenFilterSide{	
		EdgeNGramTokenFilterSideBack,
		EdgeNGramTokenFilterSideFront,
	}
}

// EntityCategory - A string indicating what entity categories to return.
type EntityCategory string

const (
	// EntityCategoryDatetime - Entities describing a date and time.
	EntityCategoryDatetime EntityCategory = "datetime"
	// EntityCategoryEmail - Entities describing an email address.
	EntityCategoryEmail EntityCategory = "email"
	// EntityCategoryLocation - Entities describing a physical location.
	EntityCategoryLocation EntityCategory = "location"
	// EntityCategoryOrganization - Entities describing an organization.
	EntityCategoryOrganization EntityCategory = "organization"
	// EntityCategoryPerson - Entities describing a person.
	EntityCategoryPerson EntityCategory = "person"
	// EntityCategoryQuantity - Entities describing a quantity.
	EntityCategoryQuantity EntityCategory = "quantity"
	// EntityCategoryURL - Entities describing a URL.
	EntityCategoryURL EntityCategory = "url"
)

// PossibleEntityCategoryValues returns the possible values for the EntityCategory const type.
func PossibleEntityCategoryValues() []EntityCategory {
	return []EntityCategory{	
		EntityCategoryDatetime,
		EntityCategoryEmail,
		EntityCategoryLocation,
		EntityCategoryOrganization,
		EntityCategoryPerson,
		EntityCategoryQuantity,
		EntityCategoryURL,
	}
}

// EntityRecognitionSkillLanguage - Deprecated. The language codes supported for input text by EntityRecognitionSkill.
type EntityRecognitionSkillLanguage string

const (
	// EntityRecognitionSkillLanguageAr - Arabic
	EntityRecognitionSkillLanguageAr EntityRecognitionSkillLanguage = "ar"
	// EntityRecognitionSkillLanguageCs - Czech
	EntityRecognitionSkillLanguageCs EntityRecognitionSkillLanguage = "cs"
	// EntityRecognitionSkillLanguageDa - Danish
	EntityRecognitionSkillLanguageDa EntityRecognitionSkillLanguage = "da"
	// EntityRecognitionSkillLanguageDe - German
	EntityRecognitionSkillLanguageDe EntityRecognitionSkillLanguage = "de"
	// EntityRecognitionSkillLanguageEl - Greek
	EntityRecognitionSkillLanguageEl EntityRecognitionSkillLanguage = "el"
	// EntityRecognitionSkillLanguageEn - English
	EntityRecognitionSkillLanguageEn EntityRecognitionSkillLanguage = "en"
	// EntityRecognitionSkillLanguageEs - Spanish
	EntityRecognitionSkillLanguageEs EntityRecognitionSkillLanguage = "es"
	// EntityRecognitionSkillLanguageFi - Finnish
	EntityRecognitionSkillLanguageFi EntityRecognitionSkillLanguage = "fi"
	// EntityRecognitionSkillLanguageFr - French
	EntityRecognitionSkillLanguageFr EntityRecognitionSkillLanguage = "fr"
	// EntityRecognitionSkillLanguageHu - Hungarian
	EntityRecognitionSkillLanguageHu EntityRecognitionSkillLanguage = "hu"
	// EntityRecognitionSkillLanguageIt - Italian
	EntityRecognitionSkillLanguageIt EntityRecognitionSkillLanguage = "it"
	// EntityRecognitionSkillLanguageJa - Japanese
	EntityRecognitionSkillLanguageJa EntityRecognitionSkillLanguage = "ja"
	// EntityRecognitionSkillLanguageKo - Korean
	EntityRecognitionSkillLanguageKo EntityRecognitionSkillLanguage = "ko"
	// EntityRecognitionSkillLanguageNl - Dutch
	EntityRecognitionSkillLanguageNl EntityRecognitionSkillLanguage = "nl"
	// EntityRecognitionSkillLanguageNo - Norwegian (Bokmaal)
	EntityRecognitionSkillLanguageNo EntityRecognitionSkillLanguage = "no"
	// EntityRecognitionSkillLanguagePl - Polish
	EntityRecognitionSkillLanguagePl EntityRecognitionSkillLanguage = "pl"
	// EntityRecognitionSkillLanguagePtBR - Portuguese (Brazil)
	EntityRecognitionSkillLanguagePtBR EntityRecognitionSkillLanguage = "pt-BR"
	// EntityRecognitionSkillLanguagePtPT - Portuguese (Portugal)
	EntityRecognitionSkillLanguagePtPT EntityRecognitionSkillLanguage = "pt-PT"
	// EntityRecognitionSkillLanguageRu - Russian
	EntityRecognitionSkillLanguageRu EntityRecognitionSkillLanguage = "ru"
	// EntityRecognitionSkillLanguageSv - Swedish
	EntityRecognitionSkillLanguageSv EntityRecognitionSkillLanguage = "sv"
	// EntityRecognitionSkillLanguageTr - Turkish
	EntityRecognitionSkillLanguageTr EntityRecognitionSkillLanguage = "tr"
	// EntityRecognitionSkillLanguageZhHans - Chinese-Simplified
	EntityRecognitionSkillLanguageZhHans EntityRecognitionSkillLanguage = "zh-Hans"
	// EntityRecognitionSkillLanguageZhHant - Chinese-Traditional
	EntityRecognitionSkillLanguageZhHant EntityRecognitionSkillLanguage = "zh-Hant"
)

// PossibleEntityRecognitionSkillLanguageValues returns the possible values for the EntityRecognitionSkillLanguage const type.
func PossibleEntityRecognitionSkillLanguageValues() []EntityRecognitionSkillLanguage {
	return []EntityRecognitionSkillLanguage{	
		EntityRecognitionSkillLanguageAr,
		EntityRecognitionSkillLanguageCs,
		EntityRecognitionSkillLanguageDa,
		EntityRecognitionSkillLanguageDe,
		EntityRecognitionSkillLanguageEl,
		EntityRecognitionSkillLanguageEn,
		EntityRecognitionSkillLanguageEs,
		EntityRecognitionSkillLanguageFi,
		EntityRecognitionSkillLanguageFr,
		EntityRecognitionSkillLanguageHu,
		EntityRecognitionSkillLanguageIt,
		EntityRecognitionSkillLanguageJa,
		EntityRecognitionSkillLanguageKo,
		EntityRecognitionSkillLanguageNl,
		EntityRecognitionSkillLanguageNo,
		EntityRecognitionSkillLanguagePl,
		EntityRecognitionSkillLanguagePtBR,
		EntityRecognitionSkillLanguagePtPT,
		EntityRecognitionSkillLanguageRu,
		EntityRecognitionSkillLanguageSv,
		EntityRecognitionSkillLanguageTr,
		EntityRecognitionSkillLanguageZhHans,
		EntityRecognitionSkillLanguageZhHant,
	}
}

type Enum0 string

const (
	Enum0ReturnRepresentation Enum0 = "return=representation"
)

// PossibleEnum0Values returns the possible values for the Enum0 const type.
func PossibleEnum0Values() []Enum0 {
	return []Enum0{	
		Enum0ReturnRepresentation,
	}
}

// ImageAnalysisSkillLanguage - The language codes supported for input by ImageAnalysisSkill.
type ImageAnalysisSkillLanguage string

const (
	// ImageAnalysisSkillLanguageAr - Arabic
	ImageAnalysisSkillLanguageAr ImageAnalysisSkillLanguage = "ar"
	// ImageAnalysisSkillLanguageAz - Azerbaijani
	ImageAnalysisSkillLanguageAz ImageAnalysisSkillLanguage = "az"
	// ImageAnalysisSkillLanguageBg - Bulgarian
	ImageAnalysisSkillLanguageBg ImageAnalysisSkillLanguage = "bg"
	// ImageAnalysisSkillLanguageBs - Bosnian Latin
	ImageAnalysisSkillLanguageBs ImageAnalysisSkillLanguage = "bs"
	// ImageAnalysisSkillLanguageCa - Catalan
	ImageAnalysisSkillLanguageCa ImageAnalysisSkillLanguage = "ca"
	// ImageAnalysisSkillLanguageCs - Czech
	ImageAnalysisSkillLanguageCs ImageAnalysisSkillLanguage = "cs"
	// ImageAnalysisSkillLanguageCy - Welsh
	ImageAnalysisSkillLanguageCy ImageAnalysisSkillLanguage = "cy"
	// ImageAnalysisSkillLanguageDa - Danish
	ImageAnalysisSkillLanguageDa ImageAnalysisSkillLanguage = "da"
	// ImageAnalysisSkillLanguageDe - German
	ImageAnalysisSkillLanguageDe ImageAnalysisSkillLanguage = "de"
	// ImageAnalysisSkillLanguageEl - Greek
	ImageAnalysisSkillLanguageEl ImageAnalysisSkillLanguage = "el"
	// ImageAnalysisSkillLanguageEn - English
	ImageAnalysisSkillLanguageEn ImageAnalysisSkillLanguage = "en"
	// ImageAnalysisSkillLanguageEs - Spanish
	ImageAnalysisSkillLanguageEs ImageAnalysisSkillLanguage = "es"
	// ImageAnalysisSkillLanguageEt - Estonian
	ImageAnalysisSkillLanguageEt ImageAnalysisSkillLanguage = "et"
	// ImageAnalysisSkillLanguageEu - Basque
	ImageAnalysisSkillLanguageEu ImageAnalysisSkillLanguage = "eu"
	// ImageAnalysisSkillLanguageFi - Finnish
	ImageAnalysisSkillLanguageFi ImageAnalysisSkillLanguage = "fi"
	// ImageAnalysisSkillLanguageFr - French
	ImageAnalysisSkillLanguageFr ImageAnalysisSkillLanguage = "fr"
	// ImageAnalysisSkillLanguageGa - Irish
	ImageAnalysisSkillLanguageGa ImageAnalysisSkillLanguage = "ga"
	// ImageAnalysisSkillLanguageGl - Galician
	ImageAnalysisSkillLanguageGl ImageAnalysisSkillLanguage = "gl"
	// ImageAnalysisSkillLanguageHe - Hebrew
	ImageAnalysisSkillLanguageHe ImageAnalysisSkillLanguage = "he"
	// ImageAnalysisSkillLanguageHi - Hindi
	ImageAnalysisSkillLanguageHi ImageAnalysisSkillLanguage = "hi"
	// ImageAnalysisSkillLanguageHr - Croatian
	ImageAnalysisSkillLanguageHr ImageAnalysisSkillLanguage = "hr"
	// ImageAnalysisSkillLanguageHu - Hungarian
	ImageAnalysisSkillLanguageHu ImageAnalysisSkillLanguage = "hu"
	// ImageAnalysisSkillLanguageID - Indonesian
	ImageAnalysisSkillLanguageID ImageAnalysisSkillLanguage = "id"
	// ImageAnalysisSkillLanguageIt - Italian
	ImageAnalysisSkillLanguageIt ImageAnalysisSkillLanguage = "it"
	// ImageAnalysisSkillLanguageJa - Japanese
	ImageAnalysisSkillLanguageJa ImageAnalysisSkillLanguage = "ja"
	// ImageAnalysisSkillLanguageKk - Kazakh
	ImageAnalysisSkillLanguageKk ImageAnalysisSkillLanguage = "kk"
	// ImageAnalysisSkillLanguageKo - Korean
	ImageAnalysisSkillLanguageKo ImageAnalysisSkillLanguage = "ko"
	// ImageAnalysisSkillLanguageLt - Lithuanian
	ImageAnalysisSkillLanguageLt ImageAnalysisSkillLanguage = "lt"
	// ImageAnalysisSkillLanguageLv - Latvian
	ImageAnalysisSkillLanguageLv ImageAnalysisSkillLanguage = "lv"
	// ImageAnalysisSkillLanguageMk - Macedonian
	ImageAnalysisSkillLanguageMk ImageAnalysisSkillLanguage = "mk"
	// ImageAnalysisSkillLanguageMs - Malay Malaysia
	ImageAnalysisSkillLanguageMs ImageAnalysisSkillLanguage = "ms"
	// ImageAnalysisSkillLanguageNb - Norwegian (Bokmal)
	ImageAnalysisSkillLanguageNb ImageAnalysisSkillLanguage = "nb"
	// ImageAnalysisSkillLanguageNl - Dutch
	ImageAnalysisSkillLanguageNl ImageAnalysisSkillLanguage = "nl"
	// ImageAnalysisSkillLanguagePl - Polish
	ImageAnalysisSkillLanguagePl ImageAnalysisSkillLanguage = "pl"
	// ImageAnalysisSkillLanguagePrs - Dari
	ImageAnalysisSkillLanguagePrs ImageAnalysisSkillLanguage = "prs"
	// ImageAnalysisSkillLanguagePt - Portuguese-Portugal
	ImageAnalysisSkillLanguagePt ImageAnalysisSkillLanguage = "pt"
	// ImageAnalysisSkillLanguagePtBR - Portuguese-Brazil
	ImageAnalysisSkillLanguagePtBR ImageAnalysisSkillLanguage = "pt-BR"
	// ImageAnalysisSkillLanguagePtPT - Portuguese-Portugal
	ImageAnalysisSkillLanguagePtPT ImageAnalysisSkillLanguage = "pt-PT"
	// ImageAnalysisSkillLanguageRo - Romanian
	ImageAnalysisSkillLanguageRo ImageAnalysisSkillLanguage = "ro"
	// ImageAnalysisSkillLanguageRu - Russian
	ImageAnalysisSkillLanguageRu ImageAnalysisSkillLanguage = "ru"
	// ImageAnalysisSkillLanguageSk - Slovak
	ImageAnalysisSkillLanguageSk ImageAnalysisSkillLanguage = "sk"
	// ImageAnalysisSkillLanguageSl - Slovenian
	ImageAnalysisSkillLanguageSl ImageAnalysisSkillLanguage = "sl"
	// ImageAnalysisSkillLanguageSrCyrl - Serbian - Cyrillic RS
	ImageAnalysisSkillLanguageSrCyrl ImageAnalysisSkillLanguage = "sr-Cyrl"
	// ImageAnalysisSkillLanguageSrLatn - Serbian - Latin RS
	ImageAnalysisSkillLanguageSrLatn ImageAnalysisSkillLanguage = "sr-Latn"
	// ImageAnalysisSkillLanguageSv - Swedish
	ImageAnalysisSkillLanguageSv ImageAnalysisSkillLanguage = "sv"
	// ImageAnalysisSkillLanguageTh - Thai
	ImageAnalysisSkillLanguageTh ImageAnalysisSkillLanguage = "th"
	// ImageAnalysisSkillLanguageTr - Turkish
	ImageAnalysisSkillLanguageTr ImageAnalysisSkillLanguage = "tr"
	// ImageAnalysisSkillLanguageUk - Ukrainian
	ImageAnalysisSkillLanguageUk ImageAnalysisSkillLanguage = "uk"
	// ImageAnalysisSkillLanguageVi - Vietnamese
	ImageAnalysisSkillLanguageVi ImageAnalysisSkillLanguage = "vi"
	// ImageAnalysisSkillLanguageZh - Chinese Simplified
	ImageAnalysisSkillLanguageZh ImageAnalysisSkillLanguage = "zh"
	// ImageAnalysisSkillLanguageZhHans - Chinese Simplified
	ImageAnalysisSkillLanguageZhHans ImageAnalysisSkillLanguage = "zh-Hans"
	// ImageAnalysisSkillLanguageZhHant - Chinese Traditional
	ImageAnalysisSkillLanguageZhHant ImageAnalysisSkillLanguage = "zh-Hant"
)

// PossibleImageAnalysisSkillLanguageValues returns the possible values for the ImageAnalysisSkillLanguage const type.
func PossibleImageAnalysisSkillLanguageValues() []ImageAnalysisSkillLanguage {
	return []ImageAnalysisSkillLanguage{	
		ImageAnalysisSkillLanguageAr,
		ImageAnalysisSkillLanguageAz,
		ImageAnalysisSkillLanguageBg,
		ImageAnalysisSkillLanguageBs,
		ImageAnalysisSkillLanguageCa,
		ImageAnalysisSkillLanguageCs,
		ImageAnalysisSkillLanguageCy,
		ImageAnalysisSkillLanguageDa,
		ImageAnalysisSkillLanguageDe,
		ImageAnalysisSkillLanguageEl,
		ImageAnalysisSkillLanguageEn,
		ImageAnalysisSkillLanguageEs,
		ImageAnalysisSkillLanguageEt,
		ImageAnalysisSkillLanguageEu,
		ImageAnalysisSkillLanguageFi,
		ImageAnalysisSkillLanguageFr,
		ImageAnalysisSkillLanguageGa,
		ImageAnalysisSkillLanguageGl,
		ImageAnalysisSkillLanguageHe,
		ImageAnalysisSkillLanguageHi,
		ImageAnalysisSkillLanguageHr,
		ImageAnalysisSkillLanguageHu,
		ImageAnalysisSkillLanguageID,
		ImageAnalysisSkillLanguageIt,
		ImageAnalysisSkillLanguageJa,
		ImageAnalysisSkillLanguageKk,
		ImageAnalysisSkillLanguageKo,
		ImageAnalysisSkillLanguageLt,
		ImageAnalysisSkillLanguageLv,
		ImageAnalysisSkillLanguageMk,
		ImageAnalysisSkillLanguageMs,
		ImageAnalysisSkillLanguageNb,
		ImageAnalysisSkillLanguageNl,
		ImageAnalysisSkillLanguagePl,
		ImageAnalysisSkillLanguagePrs,
		ImageAnalysisSkillLanguagePt,
		ImageAnalysisSkillLanguagePtBR,
		ImageAnalysisSkillLanguagePtPT,
		ImageAnalysisSkillLanguageRo,
		ImageAnalysisSkillLanguageRu,
		ImageAnalysisSkillLanguageSk,
		ImageAnalysisSkillLanguageSl,
		ImageAnalysisSkillLanguageSrCyrl,
		ImageAnalysisSkillLanguageSrLatn,
		ImageAnalysisSkillLanguageSv,
		ImageAnalysisSkillLanguageTh,
		ImageAnalysisSkillLanguageTr,
		ImageAnalysisSkillLanguageUk,
		ImageAnalysisSkillLanguageVi,
		ImageAnalysisSkillLanguageZh,
		ImageAnalysisSkillLanguageZhHans,
		ImageAnalysisSkillLanguageZhHant,
	}
}

// ImageDetail - A string indicating which domain-specific details to return.
type ImageDetail string

const (
	// ImageDetailCelebrities - Details recognized as celebrities.
	ImageDetailCelebrities ImageDetail = "celebrities"
	// ImageDetailLandmarks - Details recognized as landmarks.
	ImageDetailLandmarks ImageDetail = "landmarks"
)

// PossibleImageDetailValues returns the possible values for the ImageDetail const type.
func PossibleImageDetailValues() []ImageDetail {
	return []ImageDetail{	
		ImageDetailCelebrities,
		ImageDetailLandmarks,
	}
}

// IndexProjectionMode - Defines behavior of the index projections in relation to the rest of the indexer.
type IndexProjectionMode string

const (
	// IndexProjectionModeIncludeIndexingParentDocuments - The source document will be written into the indexer's target index.
// This is the default pattern.
	IndexProjectionModeIncludeIndexingParentDocuments IndexProjectionMode = "includeIndexingParentDocuments"
	// IndexProjectionModeSkipIndexingParentDocuments - The source document will be skipped from writing into the indexer's target
// index.
	IndexProjectionModeSkipIndexingParentDocuments IndexProjectionMode = "skipIndexingParentDocuments"
)

// PossibleIndexProjectionModeValues returns the possible values for the IndexProjectionMode const type.
func PossibleIndexProjectionModeValues() []IndexProjectionMode {
	return []IndexProjectionMode{	
		IndexProjectionModeIncludeIndexingParentDocuments,
		IndexProjectionModeSkipIndexingParentDocuments,
	}
}

// IndexerExecutionEnvironment - Specifies the environment in which the indexer should execute.
type IndexerExecutionEnvironment string

const (
	// IndexerExecutionEnvironmentPrivate - Indicates that the indexer should run with the environment provisioned specifically
// for the search service. This should only be specified as the execution environment if the indexer needs to access resources
// securely over shared private link resources.
	IndexerExecutionEnvironmentPrivate IndexerExecutionEnvironment = "private"
	// IndexerExecutionEnvironmentStandard - Indicates that the search service can determine where the indexer should execute.
// This is the default environment when nothing is specified and is the recommended value.
	IndexerExecutionEnvironmentStandard IndexerExecutionEnvironment = "standard"
)

// PossibleIndexerExecutionEnvironmentValues returns the possible values for the IndexerExecutionEnvironment const type.
func PossibleIndexerExecutionEnvironmentValues() []IndexerExecutionEnvironment {
	return []IndexerExecutionEnvironment{	
		IndexerExecutionEnvironmentPrivate,
		IndexerExecutionEnvironmentStandard,
	}
}

// IndexerExecutionStatus - Represents the status of an individual indexer execution.
type IndexerExecutionStatus string

const (
	// IndexerExecutionStatusInProgress - Indexer execution is in progress.
	IndexerExecutionStatusInProgress IndexerExecutionStatus = "inProgress"
	// IndexerExecutionStatusReset - Indexer has been reset.
	IndexerExecutionStatusReset IndexerExecutionStatus = "reset"
	// IndexerExecutionStatusSuccess - Indexer execution completed successfully.
	IndexerExecutionStatusSuccess IndexerExecutionStatus = "success"
	// IndexerExecutionStatusTransientFailure - An indexer invocation has failed, but the failure may be transient. Indexer invocations
// will continue per schedule.
	IndexerExecutionStatusTransientFailure IndexerExecutionStatus = "transientFailure"
)

// PossibleIndexerExecutionStatusValues returns the possible values for the IndexerExecutionStatus const type.
func PossibleIndexerExecutionStatusValues() []IndexerExecutionStatus {
	return []IndexerExecutionStatus{	
		IndexerExecutionStatusInProgress,
		IndexerExecutionStatusReset,
		IndexerExecutionStatusSuccess,
		IndexerExecutionStatusTransientFailure,
	}
}

// IndexerStatus - Represents the overall indexer status.
type IndexerStatus string

const (
	// IndexerStatusError - Indicates that the indexer experienced an error that cannot be corrected without human intervention.
	IndexerStatusError IndexerStatus = "error"
	// IndexerStatusRunning - Indicates that the indexer is running normally.
	IndexerStatusRunning IndexerStatus = "running"
	// IndexerStatusUnknown - Indicates that the indexer is in an unknown state.
	IndexerStatusUnknown IndexerStatus = "unknown"
)

// PossibleIndexerStatusValues returns the possible values for the IndexerStatus const type.
func PossibleIndexerStatusValues() []IndexerStatus {
	return []IndexerStatus{	
		IndexerStatusError,
		IndexerStatusRunning,
		IndexerStatusUnknown,
	}
}

// KeyPhraseExtractionSkillLanguage - The language codes supported for input text by KeyPhraseExtractionSkill.
type KeyPhraseExtractionSkillLanguage string

const (
	// KeyPhraseExtractionSkillLanguageDa - Danish
	KeyPhraseExtractionSkillLanguageDa KeyPhraseExtractionSkillLanguage = "da"
	// KeyPhraseExtractionSkillLanguageDe - German
	KeyPhraseExtractionSkillLanguageDe KeyPhraseExtractionSkillLanguage = "de"
	// KeyPhraseExtractionSkillLanguageEn - English
	KeyPhraseExtractionSkillLanguageEn KeyPhraseExtractionSkillLanguage = "en"
	// KeyPhraseExtractionSkillLanguageEs - Spanish
	KeyPhraseExtractionSkillLanguageEs KeyPhraseExtractionSkillLanguage = "es"
	// KeyPhraseExtractionSkillLanguageFi - Finnish
	KeyPhraseExtractionSkillLanguageFi KeyPhraseExtractionSkillLanguage = "fi"
	// KeyPhraseExtractionSkillLanguageFr - French
	KeyPhraseExtractionSkillLanguageFr KeyPhraseExtractionSkillLanguage = "fr"
	// KeyPhraseExtractionSkillLanguageIt - Italian
	KeyPhraseExtractionSkillLanguageIt KeyPhraseExtractionSkillLanguage = "it"
	// KeyPhraseExtractionSkillLanguageJa - Japanese
	KeyPhraseExtractionSkillLanguageJa KeyPhraseExtractionSkillLanguage = "ja"
	// KeyPhraseExtractionSkillLanguageKo - Korean
	KeyPhraseExtractionSkillLanguageKo KeyPhraseExtractionSkillLanguage = "ko"
	// KeyPhraseExtractionSkillLanguageNl - Dutch
	KeyPhraseExtractionSkillLanguageNl KeyPhraseExtractionSkillLanguage = "nl"
	// KeyPhraseExtractionSkillLanguageNo - Norwegian (Bokmaal)
	KeyPhraseExtractionSkillLanguageNo KeyPhraseExtractionSkillLanguage = "no"
	// KeyPhraseExtractionSkillLanguagePl - Polish
	KeyPhraseExtractionSkillLanguagePl KeyPhraseExtractionSkillLanguage = "pl"
	// KeyPhraseExtractionSkillLanguagePtBR - Portuguese (Brazil)
	KeyPhraseExtractionSkillLanguagePtBR KeyPhraseExtractionSkillLanguage = "pt-BR"
	// KeyPhraseExtractionSkillLanguagePtPT - Portuguese (Portugal)
	KeyPhraseExtractionSkillLanguagePtPT KeyPhraseExtractionSkillLanguage = "pt-PT"
	// KeyPhraseExtractionSkillLanguageRu - Russian
	KeyPhraseExtractionSkillLanguageRu KeyPhraseExtractionSkillLanguage = "ru"
	// KeyPhraseExtractionSkillLanguageSv - Swedish
	KeyPhraseExtractionSkillLanguageSv KeyPhraseExtractionSkillLanguage = "sv"
)

// PossibleKeyPhraseExtractionSkillLanguageValues returns the possible values for the KeyPhraseExtractionSkillLanguage const type.
func PossibleKeyPhraseExtractionSkillLanguageValues() []KeyPhraseExtractionSkillLanguage {
	return []KeyPhraseExtractionSkillLanguage{	
		KeyPhraseExtractionSkillLanguageDa,
		KeyPhraseExtractionSkillLanguageDe,
		KeyPhraseExtractionSkillLanguageEn,
		KeyPhraseExtractionSkillLanguageEs,
		KeyPhraseExtractionSkillLanguageFi,
		KeyPhraseExtractionSkillLanguageFr,
		KeyPhraseExtractionSkillLanguageIt,
		KeyPhraseExtractionSkillLanguageJa,
		KeyPhraseExtractionSkillLanguageKo,
		KeyPhraseExtractionSkillLanguageNl,
		KeyPhraseExtractionSkillLanguageNo,
		KeyPhraseExtractionSkillLanguagePl,
		KeyPhraseExtractionSkillLanguagePtBR,
		KeyPhraseExtractionSkillLanguagePtPT,
		KeyPhraseExtractionSkillLanguageRu,
		KeyPhraseExtractionSkillLanguageSv,
	}
}

// LexicalAnalyzerName - Defines the names of all text analyzers supported by the search engine.
type LexicalAnalyzerName string

const (
	// LexicalAnalyzerNameArLucene - Lucene analyzer for Arabic.
	LexicalAnalyzerNameArLucene LexicalAnalyzerName = "ar.lucene"
	// LexicalAnalyzerNameArMicrosoft - Microsoft analyzer for Arabic.
	LexicalAnalyzerNameArMicrosoft LexicalAnalyzerName = "ar.microsoft"
	// LexicalAnalyzerNameBgLucene - Lucene analyzer for Bulgarian.
	LexicalAnalyzerNameBgLucene LexicalAnalyzerName = "bg.lucene"
	// LexicalAnalyzerNameBgMicrosoft - Microsoft analyzer for Bulgarian.
	LexicalAnalyzerNameBgMicrosoft LexicalAnalyzerName = "bg.microsoft"
	// LexicalAnalyzerNameBnMicrosoft - Microsoft analyzer for Bangla.
	LexicalAnalyzerNameBnMicrosoft LexicalAnalyzerName = "bn.microsoft"
	// LexicalAnalyzerNameCaLucene - Lucene analyzer for Catalan.
	LexicalAnalyzerNameCaLucene LexicalAnalyzerName = "ca.lucene"
	// LexicalAnalyzerNameCaMicrosoft - Microsoft analyzer for Catalan.
	LexicalAnalyzerNameCaMicrosoft LexicalAnalyzerName = "ca.microsoft"
	// LexicalAnalyzerNameCsLucene - Lucene analyzer for Czech.
	LexicalAnalyzerNameCsLucene LexicalAnalyzerName = "cs.lucene"
	// LexicalAnalyzerNameCsMicrosoft - Microsoft analyzer for Czech.
	LexicalAnalyzerNameCsMicrosoft LexicalAnalyzerName = "cs.microsoft"
	// LexicalAnalyzerNameDaLucene - Lucene analyzer for Danish.
	LexicalAnalyzerNameDaLucene LexicalAnalyzerName = "da.lucene"
	// LexicalAnalyzerNameDaMicrosoft - Microsoft analyzer for Danish.
	LexicalAnalyzerNameDaMicrosoft LexicalAnalyzerName = "da.microsoft"
	// LexicalAnalyzerNameDeLucene - Lucene analyzer for German.
	LexicalAnalyzerNameDeLucene LexicalAnalyzerName = "de.lucene"
	// LexicalAnalyzerNameDeMicrosoft - Microsoft analyzer for German.
	LexicalAnalyzerNameDeMicrosoft LexicalAnalyzerName = "de.microsoft"
	// LexicalAnalyzerNameElLucene - Lucene analyzer for Greek.
	LexicalAnalyzerNameElLucene LexicalAnalyzerName = "el.lucene"
	// LexicalAnalyzerNameElMicrosoft - Microsoft analyzer for Greek.
	LexicalAnalyzerNameElMicrosoft LexicalAnalyzerName = "el.microsoft"
	// LexicalAnalyzerNameEnLucene - Lucene analyzer for English.
	LexicalAnalyzerNameEnLucene LexicalAnalyzerName = "en.lucene"
	// LexicalAnalyzerNameEnMicrosoft - Microsoft analyzer for English.
	LexicalAnalyzerNameEnMicrosoft LexicalAnalyzerName = "en.microsoft"
	// LexicalAnalyzerNameEsLucene - Lucene analyzer for Spanish.
	LexicalAnalyzerNameEsLucene LexicalAnalyzerName = "es.lucene"
	// LexicalAnalyzerNameEsMicrosoft - Microsoft analyzer for Spanish.
	LexicalAnalyzerNameEsMicrosoft LexicalAnalyzerName = "es.microsoft"
	// LexicalAnalyzerNameEtMicrosoft - Microsoft analyzer for Estonian.
	LexicalAnalyzerNameEtMicrosoft LexicalAnalyzerName = "et.microsoft"
	// LexicalAnalyzerNameEuLucene - Lucene analyzer for Basque.
	LexicalAnalyzerNameEuLucene LexicalAnalyzerName = "eu.lucene"
	// LexicalAnalyzerNameFaLucene - Lucene analyzer for Persian.
	LexicalAnalyzerNameFaLucene LexicalAnalyzerName = "fa.lucene"
	// LexicalAnalyzerNameFiLucene - Lucene analyzer for Finnish.
	LexicalAnalyzerNameFiLucene LexicalAnalyzerName = "fi.lucene"
	// LexicalAnalyzerNameFiMicrosoft - Microsoft analyzer for Finnish.
	LexicalAnalyzerNameFiMicrosoft LexicalAnalyzerName = "fi.microsoft"
	// LexicalAnalyzerNameFrLucene - Lucene analyzer for French.
	LexicalAnalyzerNameFrLucene LexicalAnalyzerName = "fr.lucene"
	// LexicalAnalyzerNameFrMicrosoft - Microsoft analyzer for French.
	LexicalAnalyzerNameFrMicrosoft LexicalAnalyzerName = "fr.microsoft"
	// LexicalAnalyzerNameGaLucene - Lucene analyzer for Irish.
	LexicalAnalyzerNameGaLucene LexicalAnalyzerName = "ga.lucene"
	// LexicalAnalyzerNameGlLucene - Lucene analyzer for Galician.
	LexicalAnalyzerNameGlLucene LexicalAnalyzerName = "gl.lucene"
	// LexicalAnalyzerNameGuMicrosoft - Microsoft analyzer for Gujarati.
	LexicalAnalyzerNameGuMicrosoft LexicalAnalyzerName = "gu.microsoft"
	// LexicalAnalyzerNameHeMicrosoft - Microsoft analyzer for Hebrew.
	LexicalAnalyzerNameHeMicrosoft LexicalAnalyzerName = "he.microsoft"
	// LexicalAnalyzerNameHiLucene - Lucene analyzer for Hindi.
	LexicalAnalyzerNameHiLucene LexicalAnalyzerName = "hi.lucene"
	// LexicalAnalyzerNameHiMicrosoft - Microsoft analyzer for Hindi.
	LexicalAnalyzerNameHiMicrosoft LexicalAnalyzerName = "hi.microsoft"
	// LexicalAnalyzerNameHrMicrosoft - Microsoft analyzer for Croatian.
	LexicalAnalyzerNameHrMicrosoft LexicalAnalyzerName = "hr.microsoft"
	// LexicalAnalyzerNameHuLucene - Lucene analyzer for Hungarian.
	LexicalAnalyzerNameHuLucene LexicalAnalyzerName = "hu.lucene"
	// LexicalAnalyzerNameHuMicrosoft - Microsoft analyzer for Hungarian.
	LexicalAnalyzerNameHuMicrosoft LexicalAnalyzerName = "hu.microsoft"
	// LexicalAnalyzerNameHyLucene - Lucene analyzer for Armenian.
	LexicalAnalyzerNameHyLucene LexicalAnalyzerName = "hy.lucene"
	// LexicalAnalyzerNameIDLucene - Lucene analyzer for Indonesian.
	LexicalAnalyzerNameIDLucene LexicalAnalyzerName = "id.lucene"
	// LexicalAnalyzerNameIDMicrosoft - Microsoft analyzer for Indonesian (Bahasa).
	LexicalAnalyzerNameIDMicrosoft LexicalAnalyzerName = "id.microsoft"
	// LexicalAnalyzerNameIsMicrosoft - Microsoft analyzer for Icelandic.
	LexicalAnalyzerNameIsMicrosoft LexicalAnalyzerName = "is.microsoft"
	// LexicalAnalyzerNameItLucene - Lucene analyzer for Italian.
	LexicalAnalyzerNameItLucene LexicalAnalyzerName = "it.lucene"
	// LexicalAnalyzerNameItMicrosoft - Microsoft analyzer for Italian.
	LexicalAnalyzerNameItMicrosoft LexicalAnalyzerName = "it.microsoft"
	// LexicalAnalyzerNameJaLucene - Lucene analyzer for Japanese.
	LexicalAnalyzerNameJaLucene LexicalAnalyzerName = "ja.lucene"
	// LexicalAnalyzerNameJaMicrosoft - Microsoft analyzer for Japanese.
	LexicalAnalyzerNameJaMicrosoft LexicalAnalyzerName = "ja.microsoft"
	// LexicalAnalyzerNameKeyword - Treats the entire content of a field as a single token. This is useful for data like zip codes,
// ids, and some product names. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/KeywordAnalyzer.html
	LexicalAnalyzerNameKeyword LexicalAnalyzerName = "keyword"
	// LexicalAnalyzerNameKnMicrosoft - Microsoft analyzer for Kannada.
	LexicalAnalyzerNameKnMicrosoft LexicalAnalyzerName = "kn.microsoft"
	// LexicalAnalyzerNameKoLucene - Lucene analyzer for Korean.
	LexicalAnalyzerNameKoLucene LexicalAnalyzerName = "ko.lucene"
	// LexicalAnalyzerNameKoMicrosoft - Microsoft analyzer for Korean.
	LexicalAnalyzerNameKoMicrosoft LexicalAnalyzerName = "ko.microsoft"
	// LexicalAnalyzerNameLtMicrosoft - Microsoft analyzer for Lithuanian.
	LexicalAnalyzerNameLtMicrosoft LexicalAnalyzerName = "lt.microsoft"
	// LexicalAnalyzerNameLvLucene - Lucene analyzer for Latvian.
	LexicalAnalyzerNameLvLucene LexicalAnalyzerName = "lv.lucene"
	// LexicalAnalyzerNameLvMicrosoft - Microsoft analyzer for Latvian.
	LexicalAnalyzerNameLvMicrosoft LexicalAnalyzerName = "lv.microsoft"
	// LexicalAnalyzerNameMlMicrosoft - Microsoft analyzer for Malayalam.
	LexicalAnalyzerNameMlMicrosoft LexicalAnalyzerName = "ml.microsoft"
	// LexicalAnalyzerNameMrMicrosoft - Microsoft analyzer for Marathi.
	LexicalAnalyzerNameMrMicrosoft LexicalAnalyzerName = "mr.microsoft"
	// LexicalAnalyzerNameMsMicrosoft - Microsoft analyzer for Malay (Latin).
	LexicalAnalyzerNameMsMicrosoft LexicalAnalyzerName = "ms.microsoft"
	// LexicalAnalyzerNameNbMicrosoft - Microsoft analyzer for Norwegian (Bokmål).
	LexicalAnalyzerNameNbMicrosoft LexicalAnalyzerName = "nb.microsoft"
	// LexicalAnalyzerNameNlLucene - Lucene analyzer for Dutch.
	LexicalAnalyzerNameNlLucene LexicalAnalyzerName = "nl.lucene"
	// LexicalAnalyzerNameNlMicrosoft - Microsoft analyzer for Dutch.
	LexicalAnalyzerNameNlMicrosoft LexicalAnalyzerName = "nl.microsoft"
	// LexicalAnalyzerNameNoLucene - Lucene analyzer for Norwegian.
	LexicalAnalyzerNameNoLucene LexicalAnalyzerName = "no.lucene"
	// LexicalAnalyzerNamePaMicrosoft - Microsoft analyzer for Punjabi.
	LexicalAnalyzerNamePaMicrosoft LexicalAnalyzerName = "pa.microsoft"
	// LexicalAnalyzerNamePattern - Flexibly separates text into terms via a regular expression pattern. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.html
	LexicalAnalyzerNamePattern LexicalAnalyzerName = "pattern"
	// LexicalAnalyzerNamePlLucene - Lucene analyzer for Polish.
	LexicalAnalyzerNamePlLucene LexicalAnalyzerName = "pl.lucene"
	// LexicalAnalyzerNamePlMicrosoft - Microsoft analyzer for Polish.
	LexicalAnalyzerNamePlMicrosoft LexicalAnalyzerName = "pl.microsoft"
	// LexicalAnalyzerNamePtBrLucene - Lucene analyzer for Portuguese (Brazil).
	LexicalAnalyzerNamePtBrLucene LexicalAnalyzerName = "pt-BR.lucene"
	// LexicalAnalyzerNamePtBrMicrosoft - Microsoft analyzer for Portuguese (Brazil).
	LexicalAnalyzerNamePtBrMicrosoft LexicalAnalyzerName = "pt-BR.microsoft"
	// LexicalAnalyzerNamePtPtLucene - Lucene analyzer for Portuguese (Portugal).
	LexicalAnalyzerNamePtPtLucene LexicalAnalyzerName = "pt-PT.lucene"
	// LexicalAnalyzerNamePtPtMicrosoft - Microsoft analyzer for Portuguese (Portugal).
	LexicalAnalyzerNamePtPtMicrosoft LexicalAnalyzerName = "pt-PT.microsoft"
	// LexicalAnalyzerNameRoLucene - Lucene analyzer for Romanian.
	LexicalAnalyzerNameRoLucene LexicalAnalyzerName = "ro.lucene"
	// LexicalAnalyzerNameRoMicrosoft - Microsoft analyzer for Romanian.
	LexicalAnalyzerNameRoMicrosoft LexicalAnalyzerName = "ro.microsoft"
	// LexicalAnalyzerNameRuLucene - Lucene analyzer for Russian.
	LexicalAnalyzerNameRuLucene LexicalAnalyzerName = "ru.lucene"
	// LexicalAnalyzerNameRuMicrosoft - Microsoft analyzer for Russian.
	LexicalAnalyzerNameRuMicrosoft LexicalAnalyzerName = "ru.microsoft"
	// LexicalAnalyzerNameSimple - Divides text at non-letters and converts them to lower case. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/SimpleAnalyzer.html
	LexicalAnalyzerNameSimple LexicalAnalyzerName = "simple"
	// LexicalAnalyzerNameSkMicrosoft - Microsoft analyzer for Slovak.
	LexicalAnalyzerNameSkMicrosoft LexicalAnalyzerName = "sk.microsoft"
	// LexicalAnalyzerNameSlMicrosoft - Microsoft analyzer for Slovenian.
	LexicalAnalyzerNameSlMicrosoft LexicalAnalyzerName = "sl.microsoft"
	// LexicalAnalyzerNameSrCyrillicMicrosoft - Microsoft analyzer for Serbian (Cyrillic).
	LexicalAnalyzerNameSrCyrillicMicrosoft LexicalAnalyzerName = "sr-cyrillic.microsoft"
	// LexicalAnalyzerNameSrLatinMicrosoft - Microsoft analyzer for Serbian (Latin).
	LexicalAnalyzerNameSrLatinMicrosoft LexicalAnalyzerName = "sr-latin.microsoft"
	// LexicalAnalyzerNameStandardASCIIFoldingLucene - Standard ASCII Folding Lucene analyzer. See https://learn.microsoft.com/rest/api/searchservice/Custom-analyzers-in-Azure-Search#Analyzers
	LexicalAnalyzerNameStandardASCIIFoldingLucene LexicalAnalyzerName = "standardasciifolding.lucene"
	// LexicalAnalyzerNameStandardLucene - Standard Lucene analyzer.
	LexicalAnalyzerNameStandardLucene LexicalAnalyzerName = "standard.lucene"
	// LexicalAnalyzerNameStop - Divides text at non-letters; Applies the lowercase and stopword token filters. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/StopAnalyzer.html
	LexicalAnalyzerNameStop LexicalAnalyzerName = "stop"
	// LexicalAnalyzerNameSvLucene - Lucene analyzer for Swedish.
	LexicalAnalyzerNameSvLucene LexicalAnalyzerName = "sv.lucene"
	// LexicalAnalyzerNameSvMicrosoft - Microsoft analyzer for Swedish.
	LexicalAnalyzerNameSvMicrosoft LexicalAnalyzerName = "sv.microsoft"
	// LexicalAnalyzerNameTaMicrosoft - Microsoft analyzer for Tamil.
	LexicalAnalyzerNameTaMicrosoft LexicalAnalyzerName = "ta.microsoft"
	// LexicalAnalyzerNameTeMicrosoft - Microsoft analyzer for Telugu.
	LexicalAnalyzerNameTeMicrosoft LexicalAnalyzerName = "te.microsoft"
	// LexicalAnalyzerNameThLucene - Lucene analyzer for Thai.
	LexicalAnalyzerNameThLucene LexicalAnalyzerName = "th.lucene"
	// LexicalAnalyzerNameThMicrosoft - Microsoft analyzer for Thai.
	LexicalAnalyzerNameThMicrosoft LexicalAnalyzerName = "th.microsoft"
	// LexicalAnalyzerNameTrLucene - Lucene analyzer for Turkish.
	LexicalAnalyzerNameTrLucene LexicalAnalyzerName = "tr.lucene"
	// LexicalAnalyzerNameTrMicrosoft - Microsoft analyzer for Turkish.
	LexicalAnalyzerNameTrMicrosoft LexicalAnalyzerName = "tr.microsoft"
	// LexicalAnalyzerNameUkMicrosoft - Microsoft analyzer for Ukrainian.
	LexicalAnalyzerNameUkMicrosoft LexicalAnalyzerName = "uk.microsoft"
	// LexicalAnalyzerNameUrMicrosoft - Microsoft analyzer for Urdu.
	LexicalAnalyzerNameUrMicrosoft LexicalAnalyzerName = "ur.microsoft"
	// LexicalAnalyzerNameViMicrosoft - Microsoft analyzer for Vietnamese.
	LexicalAnalyzerNameViMicrosoft LexicalAnalyzerName = "vi.microsoft"
	// LexicalAnalyzerNameWhitespace - An analyzer that uses the whitespace tokenizer. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/WhitespaceAnalyzer.html
	LexicalAnalyzerNameWhitespace LexicalAnalyzerName = "whitespace"
	// LexicalAnalyzerNameZhHansLucene - Lucene analyzer for Chinese (Simplified).
	LexicalAnalyzerNameZhHansLucene LexicalAnalyzerName = "zh-Hans.lucene"
	// LexicalAnalyzerNameZhHansMicrosoft - Microsoft analyzer for Chinese (Simplified).
	LexicalAnalyzerNameZhHansMicrosoft LexicalAnalyzerName = "zh-Hans.microsoft"
	// LexicalAnalyzerNameZhHantLucene - Lucene analyzer for Chinese (Traditional).
	LexicalAnalyzerNameZhHantLucene LexicalAnalyzerName = "zh-Hant.lucene"
	// LexicalAnalyzerNameZhHantMicrosoft - Microsoft analyzer for Chinese (Traditional).
	LexicalAnalyzerNameZhHantMicrosoft LexicalAnalyzerName = "zh-Hant.microsoft"
)

// PossibleLexicalAnalyzerNameValues returns the possible values for the LexicalAnalyzerName const type.
func PossibleLexicalAnalyzerNameValues() []LexicalAnalyzerName {
	return []LexicalAnalyzerName{	
		LexicalAnalyzerNameArLucene,
		LexicalAnalyzerNameArMicrosoft,
		LexicalAnalyzerNameBgLucene,
		LexicalAnalyzerNameBgMicrosoft,
		LexicalAnalyzerNameBnMicrosoft,
		LexicalAnalyzerNameCaLucene,
		LexicalAnalyzerNameCaMicrosoft,
		LexicalAnalyzerNameCsLucene,
		LexicalAnalyzerNameCsMicrosoft,
		LexicalAnalyzerNameDaLucene,
		LexicalAnalyzerNameDaMicrosoft,
		LexicalAnalyzerNameDeLucene,
		LexicalAnalyzerNameDeMicrosoft,
		LexicalAnalyzerNameElLucene,
		LexicalAnalyzerNameElMicrosoft,
		LexicalAnalyzerNameEnLucene,
		LexicalAnalyzerNameEnMicrosoft,
		LexicalAnalyzerNameEsLucene,
		LexicalAnalyzerNameEsMicrosoft,
		LexicalAnalyzerNameEtMicrosoft,
		LexicalAnalyzerNameEuLucene,
		LexicalAnalyzerNameFaLucene,
		LexicalAnalyzerNameFiLucene,
		LexicalAnalyzerNameFiMicrosoft,
		LexicalAnalyzerNameFrLucene,
		LexicalAnalyzerNameFrMicrosoft,
		LexicalAnalyzerNameGaLucene,
		LexicalAnalyzerNameGlLucene,
		LexicalAnalyzerNameGuMicrosoft,
		LexicalAnalyzerNameHeMicrosoft,
		LexicalAnalyzerNameHiLucene,
		LexicalAnalyzerNameHiMicrosoft,
		LexicalAnalyzerNameHrMicrosoft,
		LexicalAnalyzerNameHuLucene,
		LexicalAnalyzerNameHuMicrosoft,
		LexicalAnalyzerNameHyLucene,
		LexicalAnalyzerNameIDLucene,
		LexicalAnalyzerNameIDMicrosoft,
		LexicalAnalyzerNameIsMicrosoft,
		LexicalAnalyzerNameItLucene,
		LexicalAnalyzerNameItMicrosoft,
		LexicalAnalyzerNameJaLucene,
		LexicalAnalyzerNameJaMicrosoft,
		LexicalAnalyzerNameKeyword,
		LexicalAnalyzerNameKnMicrosoft,
		LexicalAnalyzerNameKoLucene,
		LexicalAnalyzerNameKoMicrosoft,
		LexicalAnalyzerNameLtMicrosoft,
		LexicalAnalyzerNameLvLucene,
		LexicalAnalyzerNameLvMicrosoft,
		LexicalAnalyzerNameMlMicrosoft,
		LexicalAnalyzerNameMrMicrosoft,
		LexicalAnalyzerNameMsMicrosoft,
		LexicalAnalyzerNameNbMicrosoft,
		LexicalAnalyzerNameNlLucene,
		LexicalAnalyzerNameNlMicrosoft,
		LexicalAnalyzerNameNoLucene,
		LexicalAnalyzerNamePaMicrosoft,
		LexicalAnalyzerNamePattern,
		LexicalAnalyzerNamePlLucene,
		LexicalAnalyzerNamePlMicrosoft,
		LexicalAnalyzerNamePtBrLucene,
		LexicalAnalyzerNamePtBrMicrosoft,
		LexicalAnalyzerNamePtPtLucene,
		LexicalAnalyzerNamePtPtMicrosoft,
		LexicalAnalyzerNameRoLucene,
		LexicalAnalyzerNameRoMicrosoft,
		LexicalAnalyzerNameRuLucene,
		LexicalAnalyzerNameRuMicrosoft,
		LexicalAnalyzerNameSimple,
		LexicalAnalyzerNameSkMicrosoft,
		LexicalAnalyzerNameSlMicrosoft,
		LexicalAnalyzerNameSrCyrillicMicrosoft,
		LexicalAnalyzerNameSrLatinMicrosoft,
		LexicalAnalyzerNameStandardASCIIFoldingLucene,
		LexicalAnalyzerNameStandardLucene,
		LexicalAnalyzerNameStop,
		LexicalAnalyzerNameSvLucene,
		LexicalAnalyzerNameSvMicrosoft,
		LexicalAnalyzerNameTaMicrosoft,
		LexicalAnalyzerNameTeMicrosoft,
		LexicalAnalyzerNameThLucene,
		LexicalAnalyzerNameThMicrosoft,
		LexicalAnalyzerNameTrLucene,
		LexicalAnalyzerNameTrMicrosoft,
		LexicalAnalyzerNameUkMicrosoft,
		LexicalAnalyzerNameUrMicrosoft,
		LexicalAnalyzerNameViMicrosoft,
		LexicalAnalyzerNameWhitespace,
		LexicalAnalyzerNameZhHansLucene,
		LexicalAnalyzerNameZhHansMicrosoft,
		LexicalAnalyzerNameZhHantLucene,
		LexicalAnalyzerNameZhHantMicrosoft,
	}
}

// LexicalTokenizerName - Defines the names of all tokenizers supported by the search engine.
type LexicalTokenizerName string

const (
	// LexicalTokenizerNameClassic - Grammar-based tokenizer that is suitable for processing most European-language documents.
// See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/ClassicTokenizer.html
	LexicalTokenizerNameClassic LexicalTokenizerName = "classic"
	// LexicalTokenizerNameEdgeNGram - Tokenizes the input from an edge into n-grams of the given size(s). See https://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.html
	LexicalTokenizerNameEdgeNGram LexicalTokenizerName = "edgeNGram"
	// LexicalTokenizerNameKeyword - Emits the entire input as a single token. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/KeywordTokenizer.html
	LexicalTokenizerNameKeyword LexicalTokenizerName = "keyword_v2"
	// LexicalTokenizerNameLetter - Divides text at non-letters. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/LetterTokenizer.html
	LexicalTokenizerNameLetter LexicalTokenizerName = "letter"
	// LexicalTokenizerNameLowercase - Divides text at non-letters and converts them to lower case. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/LowerCaseTokenizer.html
	LexicalTokenizerNameLowercase LexicalTokenizerName = "lowercase"
	// LexicalTokenizerNameMicrosoftLanguageStemmingTokenizer - Divides text using language-specific rules and reduces words to
// their base forms.
	LexicalTokenizerNameMicrosoftLanguageStemmingTokenizer LexicalTokenizerName = "microsoft_language_stemming_tokenizer"
	// LexicalTokenizerNameMicrosoftLanguageTokenizer - Divides text using language-specific rules.
	LexicalTokenizerNameMicrosoftLanguageTokenizer LexicalTokenizerName = "microsoft_language_tokenizer"
	// LexicalTokenizerNameNGram - Tokenizes the input into n-grams of the given size(s). See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/NGramTokenizer.html
	LexicalTokenizerNameNGram LexicalTokenizerName = "nGram"
	// LexicalTokenizerNamePathHierarchy - Tokenizer for path-like hierarchies. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/path/PathHierarchyTokenizer.html
	LexicalTokenizerNamePathHierarchy LexicalTokenizerName = "path_hierarchy_v2"
	// LexicalTokenizerNamePattern - Tokenizer that uses regex pattern matching to construct distinct tokens. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/pattern/PatternTokenizer.html
	LexicalTokenizerNamePattern LexicalTokenizerName = "pattern"
	// LexicalTokenizerNameStandard - Standard Lucene analyzer; Composed of the standard tokenizer, lowercase filter and stop
// filter. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/StandardTokenizer.html
	LexicalTokenizerNameStandard LexicalTokenizerName = "standard_v2"
	// LexicalTokenizerNameUaxURLEmail - Tokenizes urls and emails as one token. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.html
	LexicalTokenizerNameUaxURLEmail LexicalTokenizerName = "uax_url_email"
	// LexicalTokenizerNameWhitespace - Divides text at whitespace. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/WhitespaceTokenizer.html
	LexicalTokenizerNameWhitespace LexicalTokenizerName = "whitespace"
)

// PossibleLexicalTokenizerNameValues returns the possible values for the LexicalTokenizerName const type.
func PossibleLexicalTokenizerNameValues() []LexicalTokenizerName {
	return []LexicalTokenizerName{	
		LexicalTokenizerNameClassic,
		LexicalTokenizerNameEdgeNGram,
		LexicalTokenizerNameKeyword,
		LexicalTokenizerNameLetter,
		LexicalTokenizerNameLowercase,
		LexicalTokenizerNameMicrosoftLanguageStemmingTokenizer,
		LexicalTokenizerNameMicrosoftLanguageTokenizer,
		LexicalTokenizerNameNGram,
		LexicalTokenizerNamePathHierarchy,
		LexicalTokenizerNamePattern,
		LexicalTokenizerNameStandard,
		LexicalTokenizerNameUaxURLEmail,
		LexicalTokenizerNameWhitespace,
	}
}

// LineEnding - Defines the sequence of characters to use between the lines of text recognized by the OCR skill. The default
// value is "space".
type LineEnding string

const (
	// LineEndingCarriageReturn - Lines are separated by a carriage return ('\r') character.
	LineEndingCarriageReturn LineEnding = "carriageReturn"
	// LineEndingCarriageReturnLineFeed - Lines are separated by a carriage return and a line feed ('\r\n') character.
	LineEndingCarriageReturnLineFeed LineEnding = "carriageReturnLineFeed"
	// LineEndingLineFeed - Lines are separated by a single line feed ('\n') character.
	LineEndingLineFeed LineEnding = "lineFeed"
	// LineEndingSpace - Lines are separated by a single space character.
	LineEndingSpace LineEnding = "space"
)

// PossibleLineEndingValues returns the possible values for the LineEnding const type.
func PossibleLineEndingValues() []LineEnding {
	return []LineEnding{	
		LineEndingCarriageReturn,
		LineEndingCarriageReturnLineFeed,
		LineEndingLineFeed,
		LineEndingSpace,
	}
}

// MicrosoftStemmingTokenizerLanguage - Lists the languages supported by the Microsoft language stemming tokenizer.
type MicrosoftStemmingTokenizerLanguage string

const (
	// MicrosoftStemmingTokenizerLanguageArabic - Selects the Microsoft stemming tokenizer for Arabic.
	MicrosoftStemmingTokenizerLanguageArabic MicrosoftStemmingTokenizerLanguage = "arabic"
	// MicrosoftStemmingTokenizerLanguageBangla - Selects the Microsoft stemming tokenizer for Bangla.
	MicrosoftStemmingTokenizerLanguageBangla MicrosoftStemmingTokenizerLanguage = "bangla"
	// MicrosoftStemmingTokenizerLanguageBulgarian - Selects the Microsoft stemming tokenizer for Bulgarian.
	MicrosoftStemmingTokenizerLanguageBulgarian MicrosoftStemmingTokenizerLanguage = "bulgarian"
	// MicrosoftStemmingTokenizerLanguageCatalan - Selects the Microsoft stemming tokenizer for Catalan.
	MicrosoftStemmingTokenizerLanguageCatalan MicrosoftStemmingTokenizerLanguage = "catalan"
	// MicrosoftStemmingTokenizerLanguageCroatian - Selects the Microsoft stemming tokenizer for Croatian.
	MicrosoftStemmingTokenizerLanguageCroatian MicrosoftStemmingTokenizerLanguage = "croatian"
	// MicrosoftStemmingTokenizerLanguageCzech - Selects the Microsoft stemming tokenizer for Czech.
	MicrosoftStemmingTokenizerLanguageCzech MicrosoftStemmingTokenizerLanguage = "czech"
	// MicrosoftStemmingTokenizerLanguageDanish - Selects the Microsoft stemming tokenizer for Danish.
	MicrosoftStemmingTokenizerLanguageDanish MicrosoftStemmingTokenizerLanguage = "danish"
	// MicrosoftStemmingTokenizerLanguageDutch - Selects the Microsoft stemming tokenizer for Dutch.
	MicrosoftStemmingTokenizerLanguageDutch MicrosoftStemmingTokenizerLanguage = "dutch"
	// MicrosoftStemmingTokenizerLanguageEnglish - Selects the Microsoft stemming tokenizer for English.
	MicrosoftStemmingTokenizerLanguageEnglish MicrosoftStemmingTokenizerLanguage = "english"
	// MicrosoftStemmingTokenizerLanguageEstonian - Selects the Microsoft stemming tokenizer for Estonian.
	MicrosoftStemmingTokenizerLanguageEstonian MicrosoftStemmingTokenizerLanguage = "estonian"
	// MicrosoftStemmingTokenizerLanguageFinnish - Selects the Microsoft stemming tokenizer for Finnish.
	MicrosoftStemmingTokenizerLanguageFinnish MicrosoftStemmingTokenizerLanguage = "finnish"
	// MicrosoftStemmingTokenizerLanguageFrench - Selects the Microsoft stemming tokenizer for French.
	MicrosoftStemmingTokenizerLanguageFrench MicrosoftStemmingTokenizerLanguage = "french"
	// MicrosoftStemmingTokenizerLanguageGerman - Selects the Microsoft stemming tokenizer for German.
	MicrosoftStemmingTokenizerLanguageGerman MicrosoftStemmingTokenizerLanguage = "german"
	// MicrosoftStemmingTokenizerLanguageGreek - Selects the Microsoft stemming tokenizer for Greek.
	MicrosoftStemmingTokenizerLanguageGreek MicrosoftStemmingTokenizerLanguage = "greek"
	// MicrosoftStemmingTokenizerLanguageGujarati - Selects the Microsoft stemming tokenizer for Gujarati.
	MicrosoftStemmingTokenizerLanguageGujarati MicrosoftStemmingTokenizerLanguage = "gujarati"
	// MicrosoftStemmingTokenizerLanguageHebrew - Selects the Microsoft stemming tokenizer for Hebrew.
	MicrosoftStemmingTokenizerLanguageHebrew MicrosoftStemmingTokenizerLanguage = "hebrew"
	// MicrosoftStemmingTokenizerLanguageHindi - Selects the Microsoft stemming tokenizer for Hindi.
	MicrosoftStemmingTokenizerLanguageHindi MicrosoftStemmingTokenizerLanguage = "hindi"
	// MicrosoftStemmingTokenizerLanguageHungarian - Selects the Microsoft stemming tokenizer for Hungarian.
	MicrosoftStemmingTokenizerLanguageHungarian MicrosoftStemmingTokenizerLanguage = "hungarian"
	// MicrosoftStemmingTokenizerLanguageIcelandic - Selects the Microsoft stemming tokenizer for Icelandic.
	MicrosoftStemmingTokenizerLanguageIcelandic MicrosoftStemmingTokenizerLanguage = "icelandic"
	// MicrosoftStemmingTokenizerLanguageIndonesian - Selects the Microsoft stemming tokenizer for Indonesian.
	MicrosoftStemmingTokenizerLanguageIndonesian MicrosoftStemmingTokenizerLanguage = "indonesian"
	// MicrosoftStemmingTokenizerLanguageItalian - Selects the Microsoft stemming tokenizer for Italian.
	MicrosoftStemmingTokenizerLanguageItalian MicrosoftStemmingTokenizerLanguage = "italian"
	// MicrosoftStemmingTokenizerLanguageKannada - Selects the Microsoft stemming tokenizer for Kannada.
	MicrosoftStemmingTokenizerLanguageKannada MicrosoftStemmingTokenizerLanguage = "kannada"
	// MicrosoftStemmingTokenizerLanguageLatvian - Selects the Microsoft stemming tokenizer for Latvian.
	MicrosoftStemmingTokenizerLanguageLatvian MicrosoftStemmingTokenizerLanguage = "latvian"
	// MicrosoftStemmingTokenizerLanguageLithuanian - Selects the Microsoft stemming tokenizer for Lithuanian.
	MicrosoftStemmingTokenizerLanguageLithuanian MicrosoftStemmingTokenizerLanguage = "lithuanian"
	// MicrosoftStemmingTokenizerLanguageMalay - Selects the Microsoft stemming tokenizer for Malay.
	MicrosoftStemmingTokenizerLanguageMalay MicrosoftStemmingTokenizerLanguage = "malay"
	// MicrosoftStemmingTokenizerLanguageMalayalam - Selects the Microsoft stemming tokenizer for Malayalam.
	MicrosoftStemmingTokenizerLanguageMalayalam MicrosoftStemmingTokenizerLanguage = "malayalam"
	// MicrosoftStemmingTokenizerLanguageMarathi - Selects the Microsoft stemming tokenizer for Marathi.
	MicrosoftStemmingTokenizerLanguageMarathi MicrosoftStemmingTokenizerLanguage = "marathi"
	// MicrosoftStemmingTokenizerLanguageNorwegianBokmaal - Selects the Microsoft stemming tokenizer for Norwegian (Bokmål).
	MicrosoftStemmingTokenizerLanguageNorwegianBokmaal MicrosoftStemmingTokenizerLanguage = "norwegianBokmaal"
	// MicrosoftStemmingTokenizerLanguagePolish - Selects the Microsoft stemming tokenizer for Polish.
	MicrosoftStemmingTokenizerLanguagePolish MicrosoftStemmingTokenizerLanguage = "polish"
	// MicrosoftStemmingTokenizerLanguagePortuguese - Selects the Microsoft stemming tokenizer for Portuguese.
	MicrosoftStemmingTokenizerLanguagePortuguese MicrosoftStemmingTokenizerLanguage = "portuguese"
	// MicrosoftStemmingTokenizerLanguagePortugueseBrazilian - Selects the Microsoft stemming tokenizer for Portuguese (Brazil).
	MicrosoftStemmingTokenizerLanguagePortugueseBrazilian MicrosoftStemmingTokenizerLanguage = "portugueseBrazilian"
	// MicrosoftStemmingTokenizerLanguagePunjabi - Selects the Microsoft stemming tokenizer for Punjabi.
	MicrosoftStemmingTokenizerLanguagePunjabi MicrosoftStemmingTokenizerLanguage = "punjabi"
	// MicrosoftStemmingTokenizerLanguageRomanian - Selects the Microsoft stemming tokenizer for Romanian.
	MicrosoftStemmingTokenizerLanguageRomanian MicrosoftStemmingTokenizerLanguage = "romanian"
	// MicrosoftStemmingTokenizerLanguageRussian - Selects the Microsoft stemming tokenizer for Russian.
	MicrosoftStemmingTokenizerLanguageRussian MicrosoftStemmingTokenizerLanguage = "russian"
	// MicrosoftStemmingTokenizerLanguageSerbianCyrillic - Selects the Microsoft stemming tokenizer for Serbian (Cyrillic).
	MicrosoftStemmingTokenizerLanguageSerbianCyrillic MicrosoftStemmingTokenizerLanguage = "serbianCyrillic"
	// MicrosoftStemmingTokenizerLanguageSerbianLatin - Selects the Microsoft stemming tokenizer for Serbian (Latin).
	MicrosoftStemmingTokenizerLanguageSerbianLatin MicrosoftStemmingTokenizerLanguage = "serbianLatin"
	// MicrosoftStemmingTokenizerLanguageSlovak - Selects the Microsoft stemming tokenizer for Slovak.
	MicrosoftStemmingTokenizerLanguageSlovak MicrosoftStemmingTokenizerLanguage = "slovak"
	// MicrosoftStemmingTokenizerLanguageSlovenian - Selects the Microsoft stemming tokenizer for Slovenian.
	MicrosoftStemmingTokenizerLanguageSlovenian MicrosoftStemmingTokenizerLanguage = "slovenian"
	// MicrosoftStemmingTokenizerLanguageSpanish - Selects the Microsoft stemming tokenizer for Spanish.
	MicrosoftStemmingTokenizerLanguageSpanish MicrosoftStemmingTokenizerLanguage = "spanish"
	// MicrosoftStemmingTokenizerLanguageSwedish - Selects the Microsoft stemming tokenizer for Swedish.
	MicrosoftStemmingTokenizerLanguageSwedish MicrosoftStemmingTokenizerLanguage = "swedish"
	// MicrosoftStemmingTokenizerLanguageTamil - Selects the Microsoft stemming tokenizer for Tamil.
	MicrosoftStemmingTokenizerLanguageTamil MicrosoftStemmingTokenizerLanguage = "tamil"
	// MicrosoftStemmingTokenizerLanguageTelugu - Selects the Microsoft stemming tokenizer for Telugu.
	MicrosoftStemmingTokenizerLanguageTelugu MicrosoftStemmingTokenizerLanguage = "telugu"
	// MicrosoftStemmingTokenizerLanguageTurkish - Selects the Microsoft stemming tokenizer for Turkish.
	MicrosoftStemmingTokenizerLanguageTurkish MicrosoftStemmingTokenizerLanguage = "turkish"
	// MicrosoftStemmingTokenizerLanguageUkrainian - Selects the Microsoft stemming tokenizer for Ukrainian.
	MicrosoftStemmingTokenizerLanguageUkrainian MicrosoftStemmingTokenizerLanguage = "ukrainian"
	// MicrosoftStemmingTokenizerLanguageUrdu - Selects the Microsoft stemming tokenizer for Urdu.
	MicrosoftStemmingTokenizerLanguageUrdu MicrosoftStemmingTokenizerLanguage = "urdu"
)

// PossibleMicrosoftStemmingTokenizerLanguageValues returns the possible values for the MicrosoftStemmingTokenizerLanguage const type.
func PossibleMicrosoftStemmingTokenizerLanguageValues() []MicrosoftStemmingTokenizerLanguage {
	return []MicrosoftStemmingTokenizerLanguage{	
		MicrosoftStemmingTokenizerLanguageArabic,
		MicrosoftStemmingTokenizerLanguageBangla,
		MicrosoftStemmingTokenizerLanguageBulgarian,
		MicrosoftStemmingTokenizerLanguageCatalan,
		MicrosoftStemmingTokenizerLanguageCroatian,
		MicrosoftStemmingTokenizerLanguageCzech,
		MicrosoftStemmingTokenizerLanguageDanish,
		MicrosoftStemmingTokenizerLanguageDutch,
		MicrosoftStemmingTokenizerLanguageEnglish,
		MicrosoftStemmingTokenizerLanguageEstonian,
		MicrosoftStemmingTokenizerLanguageFinnish,
		MicrosoftStemmingTokenizerLanguageFrench,
		MicrosoftStemmingTokenizerLanguageGerman,
		MicrosoftStemmingTokenizerLanguageGreek,
		MicrosoftStemmingTokenizerLanguageGujarati,
		MicrosoftStemmingTokenizerLanguageHebrew,
		MicrosoftStemmingTokenizerLanguageHindi,
		MicrosoftStemmingTokenizerLanguageHungarian,
		MicrosoftStemmingTokenizerLanguageIcelandic,
		MicrosoftStemmingTokenizerLanguageIndonesian,
		MicrosoftStemmingTokenizerLanguageItalian,
		MicrosoftStemmingTokenizerLanguageKannada,
		MicrosoftStemmingTokenizerLanguageLatvian,
		MicrosoftStemmingTokenizerLanguageLithuanian,
		MicrosoftStemmingTokenizerLanguageMalay,
		MicrosoftStemmingTokenizerLanguageMalayalam,
		MicrosoftStemmingTokenizerLanguageMarathi,
		MicrosoftStemmingTokenizerLanguageNorwegianBokmaal,
		MicrosoftStemmingTokenizerLanguagePolish,
		MicrosoftStemmingTokenizerLanguagePortuguese,
		MicrosoftStemmingTokenizerLanguagePortugueseBrazilian,
		MicrosoftStemmingTokenizerLanguagePunjabi,
		MicrosoftStemmingTokenizerLanguageRomanian,
		MicrosoftStemmingTokenizerLanguageRussian,
		MicrosoftStemmingTokenizerLanguageSerbianCyrillic,
		MicrosoftStemmingTokenizerLanguageSerbianLatin,
		MicrosoftStemmingTokenizerLanguageSlovak,
		MicrosoftStemmingTokenizerLanguageSlovenian,
		MicrosoftStemmingTokenizerLanguageSpanish,
		MicrosoftStemmingTokenizerLanguageSwedish,
		MicrosoftStemmingTokenizerLanguageTamil,
		MicrosoftStemmingTokenizerLanguageTelugu,
		MicrosoftStemmingTokenizerLanguageTurkish,
		MicrosoftStemmingTokenizerLanguageUkrainian,
		MicrosoftStemmingTokenizerLanguageUrdu,
	}
}

// MicrosoftTokenizerLanguage - Lists the languages supported by the Microsoft language tokenizer.
type MicrosoftTokenizerLanguage string

const (
	// MicrosoftTokenizerLanguageBangla - Selects the Microsoft tokenizer for Bangla.
	MicrosoftTokenizerLanguageBangla MicrosoftTokenizerLanguage = "bangla"
	// MicrosoftTokenizerLanguageBulgarian - Selects the Microsoft tokenizer for Bulgarian.
	MicrosoftTokenizerLanguageBulgarian MicrosoftTokenizerLanguage = "bulgarian"
	// MicrosoftTokenizerLanguageCatalan - Selects the Microsoft tokenizer for Catalan.
	MicrosoftTokenizerLanguageCatalan MicrosoftTokenizerLanguage = "catalan"
	// MicrosoftTokenizerLanguageChineseSimplified - Selects the Microsoft tokenizer for Chinese (Simplified).
	MicrosoftTokenizerLanguageChineseSimplified MicrosoftTokenizerLanguage = "chineseSimplified"
	// MicrosoftTokenizerLanguageChineseTraditional - Selects the Microsoft tokenizer for Chinese (Traditional).
	MicrosoftTokenizerLanguageChineseTraditional MicrosoftTokenizerLanguage = "chineseTraditional"
	// MicrosoftTokenizerLanguageCroatian - Selects the Microsoft tokenizer for Croatian.
	MicrosoftTokenizerLanguageCroatian MicrosoftTokenizerLanguage = "croatian"
	// MicrosoftTokenizerLanguageCzech - Selects the Microsoft tokenizer for Czech.
	MicrosoftTokenizerLanguageCzech MicrosoftTokenizerLanguage = "czech"
	// MicrosoftTokenizerLanguageDanish - Selects the Microsoft tokenizer for Danish.
	MicrosoftTokenizerLanguageDanish MicrosoftTokenizerLanguage = "danish"
	// MicrosoftTokenizerLanguageDutch - Selects the Microsoft tokenizer for Dutch.
	MicrosoftTokenizerLanguageDutch MicrosoftTokenizerLanguage = "dutch"
	// MicrosoftTokenizerLanguageEnglish - Selects the Microsoft tokenizer for English.
	MicrosoftTokenizerLanguageEnglish MicrosoftTokenizerLanguage = "english"
	// MicrosoftTokenizerLanguageFrench - Selects the Microsoft tokenizer for French.
	MicrosoftTokenizerLanguageFrench MicrosoftTokenizerLanguage = "french"
	// MicrosoftTokenizerLanguageGerman - Selects the Microsoft tokenizer for German.
	MicrosoftTokenizerLanguageGerman MicrosoftTokenizerLanguage = "german"
	// MicrosoftTokenizerLanguageGreek - Selects the Microsoft tokenizer for Greek.
	MicrosoftTokenizerLanguageGreek MicrosoftTokenizerLanguage = "greek"
	// MicrosoftTokenizerLanguageGujarati - Selects the Microsoft tokenizer for Gujarati.
	MicrosoftTokenizerLanguageGujarati MicrosoftTokenizerLanguage = "gujarati"
	// MicrosoftTokenizerLanguageHindi - Selects the Microsoft tokenizer for Hindi.
	MicrosoftTokenizerLanguageHindi MicrosoftTokenizerLanguage = "hindi"
	// MicrosoftTokenizerLanguageIcelandic - Selects the Microsoft tokenizer for Icelandic.
	MicrosoftTokenizerLanguageIcelandic MicrosoftTokenizerLanguage = "icelandic"
	// MicrosoftTokenizerLanguageIndonesian - Selects the Microsoft tokenizer for Indonesian.
	MicrosoftTokenizerLanguageIndonesian MicrosoftTokenizerLanguage = "indonesian"
	// MicrosoftTokenizerLanguageItalian - Selects the Microsoft tokenizer for Italian.
	MicrosoftTokenizerLanguageItalian MicrosoftTokenizerLanguage = "italian"
	// MicrosoftTokenizerLanguageJapanese - Selects the Microsoft tokenizer for Japanese.
	MicrosoftTokenizerLanguageJapanese MicrosoftTokenizerLanguage = "japanese"
	// MicrosoftTokenizerLanguageKannada - Selects the Microsoft tokenizer for Kannada.
	MicrosoftTokenizerLanguageKannada MicrosoftTokenizerLanguage = "kannada"
	// MicrosoftTokenizerLanguageKorean - Selects the Microsoft tokenizer for Korean.
	MicrosoftTokenizerLanguageKorean MicrosoftTokenizerLanguage = "korean"
	// MicrosoftTokenizerLanguageMalay - Selects the Microsoft tokenizer for Malay.
	MicrosoftTokenizerLanguageMalay MicrosoftTokenizerLanguage = "malay"
	// MicrosoftTokenizerLanguageMalayalam - Selects the Microsoft tokenizer for Malayalam.
	MicrosoftTokenizerLanguageMalayalam MicrosoftTokenizerLanguage = "malayalam"
	// MicrosoftTokenizerLanguageMarathi - Selects the Microsoft tokenizer for Marathi.
	MicrosoftTokenizerLanguageMarathi MicrosoftTokenizerLanguage = "marathi"
	// MicrosoftTokenizerLanguageNorwegianBokmaal - Selects the Microsoft tokenizer for Norwegian (Bokmål).
	MicrosoftTokenizerLanguageNorwegianBokmaal MicrosoftTokenizerLanguage = "norwegianBokmaal"
	// MicrosoftTokenizerLanguagePolish - Selects the Microsoft tokenizer for Polish.
	MicrosoftTokenizerLanguagePolish MicrosoftTokenizerLanguage = "polish"
	// MicrosoftTokenizerLanguagePortuguese - Selects the Microsoft tokenizer for Portuguese.
	MicrosoftTokenizerLanguagePortuguese MicrosoftTokenizerLanguage = "portuguese"
	// MicrosoftTokenizerLanguagePortugueseBrazilian - Selects the Microsoft tokenizer for Portuguese (Brazil).
	MicrosoftTokenizerLanguagePortugueseBrazilian MicrosoftTokenizerLanguage = "portugueseBrazilian"
	// MicrosoftTokenizerLanguagePunjabi - Selects the Microsoft tokenizer for Punjabi.
	MicrosoftTokenizerLanguagePunjabi MicrosoftTokenizerLanguage = "punjabi"
	// MicrosoftTokenizerLanguageRomanian - Selects the Microsoft tokenizer for Romanian.
	MicrosoftTokenizerLanguageRomanian MicrosoftTokenizerLanguage = "romanian"
	// MicrosoftTokenizerLanguageRussian - Selects the Microsoft tokenizer for Russian.
	MicrosoftTokenizerLanguageRussian MicrosoftTokenizerLanguage = "russian"
	// MicrosoftTokenizerLanguageSerbianCyrillic - Selects the Microsoft tokenizer for Serbian (Cyrillic).
	MicrosoftTokenizerLanguageSerbianCyrillic MicrosoftTokenizerLanguage = "serbianCyrillic"
	// MicrosoftTokenizerLanguageSerbianLatin - Selects the Microsoft tokenizer for Serbian (Latin).
	MicrosoftTokenizerLanguageSerbianLatin MicrosoftTokenizerLanguage = "serbianLatin"
	// MicrosoftTokenizerLanguageSlovenian - Selects the Microsoft tokenizer for Slovenian.
	MicrosoftTokenizerLanguageSlovenian MicrosoftTokenizerLanguage = "slovenian"
	// MicrosoftTokenizerLanguageSpanish - Selects the Microsoft tokenizer for Spanish.
	MicrosoftTokenizerLanguageSpanish MicrosoftTokenizerLanguage = "spanish"
	// MicrosoftTokenizerLanguageSwedish - Selects the Microsoft tokenizer for Swedish.
	MicrosoftTokenizerLanguageSwedish MicrosoftTokenizerLanguage = "swedish"
	// MicrosoftTokenizerLanguageTamil - Selects the Microsoft tokenizer for Tamil.
	MicrosoftTokenizerLanguageTamil MicrosoftTokenizerLanguage = "tamil"
	// MicrosoftTokenizerLanguageTelugu - Selects the Microsoft tokenizer for Telugu.
	MicrosoftTokenizerLanguageTelugu MicrosoftTokenizerLanguage = "telugu"
	// MicrosoftTokenizerLanguageThai - Selects the Microsoft tokenizer for Thai.
	MicrosoftTokenizerLanguageThai MicrosoftTokenizerLanguage = "thai"
	// MicrosoftTokenizerLanguageUkrainian - Selects the Microsoft tokenizer for Ukrainian.
	MicrosoftTokenizerLanguageUkrainian MicrosoftTokenizerLanguage = "ukrainian"
	// MicrosoftTokenizerLanguageUrdu - Selects the Microsoft tokenizer for Urdu.
	MicrosoftTokenizerLanguageUrdu MicrosoftTokenizerLanguage = "urdu"
	// MicrosoftTokenizerLanguageVietnamese - Selects the Microsoft tokenizer for Vietnamese.
	MicrosoftTokenizerLanguageVietnamese MicrosoftTokenizerLanguage = "vietnamese"
)

// PossibleMicrosoftTokenizerLanguageValues returns the possible values for the MicrosoftTokenizerLanguage const type.
func PossibleMicrosoftTokenizerLanguageValues() []MicrosoftTokenizerLanguage {
	return []MicrosoftTokenizerLanguage{	
		MicrosoftTokenizerLanguageBangla,
		MicrosoftTokenizerLanguageBulgarian,
		MicrosoftTokenizerLanguageCatalan,
		MicrosoftTokenizerLanguageChineseSimplified,
		MicrosoftTokenizerLanguageChineseTraditional,
		MicrosoftTokenizerLanguageCroatian,
		MicrosoftTokenizerLanguageCzech,
		MicrosoftTokenizerLanguageDanish,
		MicrosoftTokenizerLanguageDutch,
		MicrosoftTokenizerLanguageEnglish,
		MicrosoftTokenizerLanguageFrench,
		MicrosoftTokenizerLanguageGerman,
		MicrosoftTokenizerLanguageGreek,
		MicrosoftTokenizerLanguageGujarati,
		MicrosoftTokenizerLanguageHindi,
		MicrosoftTokenizerLanguageIcelandic,
		MicrosoftTokenizerLanguageIndonesian,
		MicrosoftTokenizerLanguageItalian,
		MicrosoftTokenizerLanguageJapanese,
		MicrosoftTokenizerLanguageKannada,
		MicrosoftTokenizerLanguageKorean,
		MicrosoftTokenizerLanguageMalay,
		MicrosoftTokenizerLanguageMalayalam,
		MicrosoftTokenizerLanguageMarathi,
		MicrosoftTokenizerLanguageNorwegianBokmaal,
		MicrosoftTokenizerLanguagePolish,
		MicrosoftTokenizerLanguagePortuguese,
		MicrosoftTokenizerLanguagePortugueseBrazilian,
		MicrosoftTokenizerLanguagePunjabi,
		MicrosoftTokenizerLanguageRomanian,
		MicrosoftTokenizerLanguageRussian,
		MicrosoftTokenizerLanguageSerbianCyrillic,
		MicrosoftTokenizerLanguageSerbianLatin,
		MicrosoftTokenizerLanguageSlovenian,
		MicrosoftTokenizerLanguageSpanish,
		MicrosoftTokenizerLanguageSwedish,
		MicrosoftTokenizerLanguageTamil,
		MicrosoftTokenizerLanguageTelugu,
		MicrosoftTokenizerLanguageThai,
		MicrosoftTokenizerLanguageUkrainian,
		MicrosoftTokenizerLanguageUrdu,
		MicrosoftTokenizerLanguageVietnamese,
	}
}

// OcrSkillLanguage - The language codes supported for input by OcrSkill.
type OcrSkillLanguage string

const (
	// OcrSkillLanguageAf - Afrikaans
	OcrSkillLanguageAf OcrSkillLanguage = "af"
	// OcrSkillLanguageAnp - Angika (Devanagiri)
	OcrSkillLanguageAnp OcrSkillLanguage = "anp"
	// OcrSkillLanguageAr - Arabic
	OcrSkillLanguageAr OcrSkillLanguage = "ar"
	// OcrSkillLanguageAst - Asturian
	OcrSkillLanguageAst OcrSkillLanguage = "ast"
	// OcrSkillLanguageAwa - Awadhi-Hindi (Devanagiri)
	OcrSkillLanguageAwa OcrSkillLanguage = "awa"
	// OcrSkillLanguageAz - Azerbaijani (Latin)
	OcrSkillLanguageAz OcrSkillLanguage = "az"
	// OcrSkillLanguageBe - Belarusian (Cyrillic and Latin)
	OcrSkillLanguageBe OcrSkillLanguage = "be"
	// OcrSkillLanguageBeCyrl - Belarusian (Cyrillic)
	OcrSkillLanguageBeCyrl OcrSkillLanguage = "be-cyrl"
	// OcrSkillLanguageBeLatn - Belarusian (Latin)
	OcrSkillLanguageBeLatn OcrSkillLanguage = "be-latn"
	// OcrSkillLanguageBfy - Bagheli
	OcrSkillLanguageBfy OcrSkillLanguage = "bfy"
	// OcrSkillLanguageBfz - Mahasu Pahari (Devanagiri)
	OcrSkillLanguageBfz OcrSkillLanguage = "bfz"
	// OcrSkillLanguageBg - Bulgarian
	OcrSkillLanguageBg OcrSkillLanguage = "bg"
	// OcrSkillLanguageBgc - Haryanvi
	OcrSkillLanguageBgc OcrSkillLanguage = "bgc"
	// OcrSkillLanguageBho - Bhojpuri-Hindi (Devanagiri)
	OcrSkillLanguageBho OcrSkillLanguage = "bho"
	// OcrSkillLanguageBi - Bislama
	OcrSkillLanguageBi OcrSkillLanguage = "bi"
	// OcrSkillLanguageBns - Bundeli
	OcrSkillLanguageBns OcrSkillLanguage = "bns"
	// OcrSkillLanguageBr - Breton
	OcrSkillLanguageBr OcrSkillLanguage = "br"
	// OcrSkillLanguageBra - Brajbha
	OcrSkillLanguageBra OcrSkillLanguage = "bra"
	// OcrSkillLanguageBrx - Bodo (Devanagiri)
	OcrSkillLanguageBrx OcrSkillLanguage = "brx"
	// OcrSkillLanguageBs - Bosnian Latin
	OcrSkillLanguageBs OcrSkillLanguage = "bs"
	// OcrSkillLanguageBua - Buryat (Cyrillic)
	OcrSkillLanguageBua OcrSkillLanguage = "bua"
	// OcrSkillLanguageCa - Catalan
	OcrSkillLanguageCa OcrSkillLanguage = "ca"
	// OcrSkillLanguageCeb - Cebuano
	OcrSkillLanguageCeb OcrSkillLanguage = "ceb"
	// OcrSkillLanguageCh - Chamorro
	OcrSkillLanguageCh OcrSkillLanguage = "ch"
	// OcrSkillLanguageCnrCyrl - Montenegrin (Cyrillic)
	OcrSkillLanguageCnrCyrl OcrSkillLanguage = "cnr-cyrl"
	// OcrSkillLanguageCnrLatn - Montenegrin (Latin)
	OcrSkillLanguageCnrLatn OcrSkillLanguage = "cnr-latn"
	// OcrSkillLanguageCo - Corsican
	OcrSkillLanguageCo OcrSkillLanguage = "co"
	// OcrSkillLanguageCrh - Crimean Tatar (Latin)
	OcrSkillLanguageCrh OcrSkillLanguage = "crh"
	// OcrSkillLanguageCs - Czech
	OcrSkillLanguageCs OcrSkillLanguage = "cs"
	// OcrSkillLanguageCsb - Kashubian
	OcrSkillLanguageCsb OcrSkillLanguage = "csb"
	// OcrSkillLanguageCy - Welsh
	OcrSkillLanguageCy OcrSkillLanguage = "cy"
	// OcrSkillLanguageDa - Danish
	OcrSkillLanguageDa OcrSkillLanguage = "da"
	// OcrSkillLanguageDe - German
	OcrSkillLanguageDe OcrSkillLanguage = "de"
	// OcrSkillLanguageDhi - Dhimal (Devanagiri)
	OcrSkillLanguageDhi OcrSkillLanguage = "dhi"
	// OcrSkillLanguageDoi - Dogri (Devanagiri)
	OcrSkillLanguageDoi OcrSkillLanguage = "doi"
	// OcrSkillLanguageDsb - Lower Sorbian
	OcrSkillLanguageDsb OcrSkillLanguage = "dsb"
	// OcrSkillLanguageEl - Greek
	OcrSkillLanguageEl OcrSkillLanguage = "el"
	// OcrSkillLanguageEn - English
	OcrSkillLanguageEn OcrSkillLanguage = "en"
	// OcrSkillLanguageEs - Spanish
	OcrSkillLanguageEs OcrSkillLanguage = "es"
	// OcrSkillLanguageEt - Estonian
	OcrSkillLanguageEt OcrSkillLanguage = "et"
	// OcrSkillLanguageEu - Basque
	OcrSkillLanguageEu OcrSkillLanguage = "eu"
	// OcrSkillLanguageFa - Persian
	OcrSkillLanguageFa OcrSkillLanguage = "fa"
	// OcrSkillLanguageFi - Finnish
	OcrSkillLanguageFi OcrSkillLanguage = "fi"
	// OcrSkillLanguageFil - Filipino
	OcrSkillLanguageFil OcrSkillLanguage = "fil"
	// OcrSkillLanguageFj - Fijian
	OcrSkillLanguageFj OcrSkillLanguage = "fj"
	// OcrSkillLanguageFo - Faroese
	OcrSkillLanguageFo OcrSkillLanguage = "fo"
	// OcrSkillLanguageFr - French
	OcrSkillLanguageFr OcrSkillLanguage = "fr"
	// OcrSkillLanguageFur - Frulian
	OcrSkillLanguageFur OcrSkillLanguage = "fur"
	// OcrSkillLanguageFy - Western Frisian
	OcrSkillLanguageFy OcrSkillLanguage = "fy"
	// OcrSkillLanguageGa - Irish
	OcrSkillLanguageGa OcrSkillLanguage = "ga"
	// OcrSkillLanguageGag - Gagauz (Latin)
	OcrSkillLanguageGag OcrSkillLanguage = "gag"
	// OcrSkillLanguageGd - Scottish Gaelic
	OcrSkillLanguageGd OcrSkillLanguage = "gd"
	// OcrSkillLanguageGil - Gilbertese
	OcrSkillLanguageGil OcrSkillLanguage = "gil"
	// OcrSkillLanguageGl - Galician
	OcrSkillLanguageGl OcrSkillLanguage = "gl"
	// OcrSkillLanguageGon - Gondi (Devanagiri)
	OcrSkillLanguageGon OcrSkillLanguage = "gon"
	// OcrSkillLanguageGv - Manx
	OcrSkillLanguageGv OcrSkillLanguage = "gv"
	// OcrSkillLanguageGvr - Gurung (Devanagiri)
	OcrSkillLanguageGvr OcrSkillLanguage = "gvr"
	// OcrSkillLanguageHaw - Hawaiian
	OcrSkillLanguageHaw OcrSkillLanguage = "haw"
	// OcrSkillLanguageHi - Hindi
	OcrSkillLanguageHi OcrSkillLanguage = "hi"
	// OcrSkillLanguageHlb - Halbi (Devanagiri)
	OcrSkillLanguageHlb OcrSkillLanguage = "hlb"
	// OcrSkillLanguageHne - Chhattisgarhi (Devanagiri)
	OcrSkillLanguageHne OcrSkillLanguage = "hne"
	// OcrSkillLanguageHni - Hani
	OcrSkillLanguageHni OcrSkillLanguage = "hni"
	// OcrSkillLanguageHoc - Ho (Devanagiri)
	OcrSkillLanguageHoc OcrSkillLanguage = "hoc"
	// OcrSkillLanguageHr - Croatian
	OcrSkillLanguageHr OcrSkillLanguage = "hr"
	// OcrSkillLanguageHsb - Upper Sorbian
	OcrSkillLanguageHsb OcrSkillLanguage = "hsb"
	// OcrSkillLanguageHt - Haitian Creole
	OcrSkillLanguageHt OcrSkillLanguage = "ht"
	// OcrSkillLanguageHu - Hungarian
	OcrSkillLanguageHu OcrSkillLanguage = "hu"
	// OcrSkillLanguageID - Indonesian
	OcrSkillLanguageID OcrSkillLanguage = "id"
	// OcrSkillLanguageIa - Interlingua
	OcrSkillLanguageIa OcrSkillLanguage = "ia"
	// OcrSkillLanguageIs - Icelandic
	OcrSkillLanguageIs OcrSkillLanguage = "is"
	// OcrSkillLanguageIt - Italian
	OcrSkillLanguageIt OcrSkillLanguage = "it"
	// OcrSkillLanguageIu - Inuktitut (Latin)
	OcrSkillLanguageIu OcrSkillLanguage = "iu"
	// OcrSkillLanguageJa - Japanese
	OcrSkillLanguageJa OcrSkillLanguage = "ja"
	// OcrSkillLanguageJns - Jaunsari (Devanagiri)
	OcrSkillLanguageJns OcrSkillLanguage = "Jns"
	// OcrSkillLanguageJv - Javanese
	OcrSkillLanguageJv OcrSkillLanguage = "jv"
	// OcrSkillLanguageKaa - Kara-Kalpak (Latin)
	OcrSkillLanguageKaa OcrSkillLanguage = "kaa"
	// OcrSkillLanguageKaaCyrl - Kara-Kalpak (Cyrillic)
	OcrSkillLanguageKaaCyrl OcrSkillLanguage = "kaa-cyrl"
	// OcrSkillLanguageKac - Kachin (Latin)
	OcrSkillLanguageKac OcrSkillLanguage = "kac"
	// OcrSkillLanguageKea - Kabuverdianu
	OcrSkillLanguageKea OcrSkillLanguage = "kea"
	// OcrSkillLanguageKfq - Korku
	OcrSkillLanguageKfq OcrSkillLanguage = "kfq"
	// OcrSkillLanguageKha - Khasi
	OcrSkillLanguageKha OcrSkillLanguage = "kha"
	// OcrSkillLanguageKkCyrl - Kazakh (Cyrillic)
	OcrSkillLanguageKkCyrl OcrSkillLanguage = "kk-cyrl"
	// OcrSkillLanguageKkLatn - Kazakh (Latin)
	OcrSkillLanguageKkLatn OcrSkillLanguage = "kk-latn"
	// OcrSkillLanguageKl - Greenlandic
	OcrSkillLanguageKl OcrSkillLanguage = "kl"
	// OcrSkillLanguageKlr - Khaling
	OcrSkillLanguageKlr OcrSkillLanguage = "klr"
	// OcrSkillLanguageKmj - Malto (Devanagiri)
	OcrSkillLanguageKmj OcrSkillLanguage = "kmj"
	// OcrSkillLanguageKo - Korean
	OcrSkillLanguageKo OcrSkillLanguage = "ko"
	// OcrSkillLanguageKos - Kosraean
	OcrSkillLanguageKos OcrSkillLanguage = "kos"
	// OcrSkillLanguageKpy - Koryak
	OcrSkillLanguageKpy OcrSkillLanguage = "kpy"
	// OcrSkillLanguageKrc - Karachay-Balkar
	OcrSkillLanguageKrc OcrSkillLanguage = "krc"
	// OcrSkillLanguageKru - Kurukh (Devanagiri)
	OcrSkillLanguageKru OcrSkillLanguage = "kru"
	// OcrSkillLanguageKsh - Ripuarian
	OcrSkillLanguageKsh OcrSkillLanguage = "ksh"
	// OcrSkillLanguageKuArab - Kurdish (Arabic)
	OcrSkillLanguageKuArab OcrSkillLanguage = "ku-arab"
	// OcrSkillLanguageKuLatn - Kurdish (Latin)
	OcrSkillLanguageKuLatn OcrSkillLanguage = "ku-latn"
	// OcrSkillLanguageKum - Kumyk (Cyrillic)
	OcrSkillLanguageKum OcrSkillLanguage = "kum"
	// OcrSkillLanguageKw - Cornish
	OcrSkillLanguageKw OcrSkillLanguage = "kw"
	// OcrSkillLanguageKy - Kyrgyz (Cyrillic)
	OcrSkillLanguageKy OcrSkillLanguage = "ky"
	// OcrSkillLanguageLa - Latin
	OcrSkillLanguageLa OcrSkillLanguage = "la"
	// OcrSkillLanguageLb - Luxembourgish
	OcrSkillLanguageLb OcrSkillLanguage = "lb"
	// OcrSkillLanguageLkt - Lakota
	OcrSkillLanguageLkt OcrSkillLanguage = "lkt"
	// OcrSkillLanguageLt - Lithuanian
	OcrSkillLanguageLt OcrSkillLanguage = "lt"
	// OcrSkillLanguageMi - Maori
	OcrSkillLanguageMi OcrSkillLanguage = "mi"
	// OcrSkillLanguageMn - Mongolian (Cyrillic)
	OcrSkillLanguageMn OcrSkillLanguage = "mn"
	// OcrSkillLanguageMr - Marathi
	OcrSkillLanguageMr OcrSkillLanguage = "mr"
	// OcrSkillLanguageMs - Malay (Latin)
	OcrSkillLanguageMs OcrSkillLanguage = "ms"
	// OcrSkillLanguageMt - Maltese
	OcrSkillLanguageMt OcrSkillLanguage = "mt"
	// OcrSkillLanguageMww - Hmong Daw (Latin)
	OcrSkillLanguageMww OcrSkillLanguage = "mww"
	// OcrSkillLanguageMyv - Erzya (Cyrillic)
	OcrSkillLanguageMyv OcrSkillLanguage = "myv"
	// OcrSkillLanguageNap - Neapolitan
	OcrSkillLanguageNap OcrSkillLanguage = "nap"
	// OcrSkillLanguageNb - Norwegian
	OcrSkillLanguageNb OcrSkillLanguage = "nb"
	// OcrSkillLanguageNe - Nepali
	OcrSkillLanguageNe OcrSkillLanguage = "ne"
	// OcrSkillLanguageNiu - Niuean
	OcrSkillLanguageNiu OcrSkillLanguage = "niu"
	// OcrSkillLanguageNl - Dutch
	OcrSkillLanguageNl OcrSkillLanguage = "nl"
	// OcrSkillLanguageNo - Norwegian
	OcrSkillLanguageNo OcrSkillLanguage = "no"
	// OcrSkillLanguageNog - Nogay
	OcrSkillLanguageNog OcrSkillLanguage = "nog"
	// OcrSkillLanguageOc - Occitan
	OcrSkillLanguageOc OcrSkillLanguage = "oc"
	// OcrSkillLanguageOs - Ossetic
	OcrSkillLanguageOs OcrSkillLanguage = "os"
	// OcrSkillLanguagePa - Punjabi (Arabic)
	OcrSkillLanguagePa OcrSkillLanguage = "pa"
	// OcrSkillLanguagePl - Polish
	OcrSkillLanguagePl OcrSkillLanguage = "pl"
	// OcrSkillLanguagePrs - Dari
	OcrSkillLanguagePrs OcrSkillLanguage = "prs"
	// OcrSkillLanguagePs - Pashto
	OcrSkillLanguagePs OcrSkillLanguage = "ps"
	// OcrSkillLanguagePt - Portuguese
	OcrSkillLanguagePt OcrSkillLanguage = "pt"
	// OcrSkillLanguageQuc - K'iche'
	OcrSkillLanguageQuc OcrSkillLanguage = "quc"
	// OcrSkillLanguageRab - Chamling
	OcrSkillLanguageRab OcrSkillLanguage = "rab"
	// OcrSkillLanguageRm - Romansh
	OcrSkillLanguageRm OcrSkillLanguage = "rm"
	// OcrSkillLanguageRo - Romanian
	OcrSkillLanguageRo OcrSkillLanguage = "ro"
	// OcrSkillLanguageRu - Russian
	OcrSkillLanguageRu OcrSkillLanguage = "ru"
	// OcrSkillLanguageSa - Sanskrit (Devanagiri)
	OcrSkillLanguageSa OcrSkillLanguage = "sa"
	// OcrSkillLanguageSat - Santali (Devanagiri)
	OcrSkillLanguageSat OcrSkillLanguage = "sat"
	// OcrSkillLanguageSck - Sadri (Devanagiri)
	OcrSkillLanguageSck OcrSkillLanguage = "sck"
	// OcrSkillLanguageSco - Scots
	OcrSkillLanguageSco OcrSkillLanguage = "sco"
	// OcrSkillLanguageSk - Slovak
	OcrSkillLanguageSk OcrSkillLanguage = "sk"
	// OcrSkillLanguageSl - Slovenian
	OcrSkillLanguageSl OcrSkillLanguage = "sl"
	// OcrSkillLanguageSm - Samoan (Latin)
	OcrSkillLanguageSm OcrSkillLanguage = "sm"
	// OcrSkillLanguageSma - Southern Sami
	OcrSkillLanguageSma OcrSkillLanguage = "sma"
	// OcrSkillLanguageSme - Northern Sami (Latin)
	OcrSkillLanguageSme OcrSkillLanguage = "sme"
	// OcrSkillLanguageSmj - Lule Sami
	OcrSkillLanguageSmj OcrSkillLanguage = "smj"
	// OcrSkillLanguageSmn - Inari Sami
	OcrSkillLanguageSmn OcrSkillLanguage = "smn"
	// OcrSkillLanguageSms - Skolt Sami
	OcrSkillLanguageSms OcrSkillLanguage = "sms"
	// OcrSkillLanguageSo - Somali (Arabic)
	OcrSkillLanguageSo OcrSkillLanguage = "so"
	// OcrSkillLanguageSq - Albanian
	OcrSkillLanguageSq OcrSkillLanguage = "sq"
	// OcrSkillLanguageSr - Serbian (Latin)
	OcrSkillLanguageSr OcrSkillLanguage = "sr"
	// OcrSkillLanguageSrCyrl - Serbian (Cyrillic)
	OcrSkillLanguageSrCyrl OcrSkillLanguage = "sr-Cyrl"
	// OcrSkillLanguageSrLatn - Serbian (Latin)
	OcrSkillLanguageSrLatn OcrSkillLanguage = "sr-Latn"
	// OcrSkillLanguageSrx - Sirmauri (Devanagiri)
	OcrSkillLanguageSrx OcrSkillLanguage = "srx"
	// OcrSkillLanguageSv - Swedish
	OcrSkillLanguageSv OcrSkillLanguage = "sv"
	// OcrSkillLanguageSw - Swahili (Latin)
	OcrSkillLanguageSw OcrSkillLanguage = "sw"
	// OcrSkillLanguageTet - Tetum
	OcrSkillLanguageTet OcrSkillLanguage = "tet"
	// OcrSkillLanguageTg - Tajik (Cyrillic)
	OcrSkillLanguageTg OcrSkillLanguage = "tg"
	// OcrSkillLanguageThf - Thangmi
	OcrSkillLanguageThf OcrSkillLanguage = "thf"
	// OcrSkillLanguageTk - Turkmen (Latin)
	OcrSkillLanguageTk OcrSkillLanguage = "tk"
	// OcrSkillLanguageTo - Tongan
	OcrSkillLanguageTo OcrSkillLanguage = "to"
	// OcrSkillLanguageTr - Turkish
	OcrSkillLanguageTr OcrSkillLanguage = "tr"
	// OcrSkillLanguageTt - Tatar (Latin)
	OcrSkillLanguageTt OcrSkillLanguage = "tt"
	// OcrSkillLanguageTyv - Tuvan
	OcrSkillLanguageTyv OcrSkillLanguage = "tyv"
	// OcrSkillLanguageUg - Uyghur (Arabic)
	OcrSkillLanguageUg OcrSkillLanguage = "ug"
	// OcrSkillLanguageUnk - Unknown (All)
	OcrSkillLanguageUnk OcrSkillLanguage = "unk"
	// OcrSkillLanguageUr - Urdu
	OcrSkillLanguageUr OcrSkillLanguage = "ur"
	// OcrSkillLanguageUz - Uzbek (Latin)
	OcrSkillLanguageUz OcrSkillLanguage = "uz"
	// OcrSkillLanguageUzArab - Uzbek (Arabic)
	OcrSkillLanguageUzArab OcrSkillLanguage = "uz-arab"
	// OcrSkillLanguageUzCyrl - Uzbek (Cyrillic)
	OcrSkillLanguageUzCyrl OcrSkillLanguage = "uz-cyrl"
	// OcrSkillLanguageVo - Volapük
	OcrSkillLanguageVo OcrSkillLanguage = "vo"
	// OcrSkillLanguageWae - Walser
	OcrSkillLanguageWae OcrSkillLanguage = "wae"
	// OcrSkillLanguageXnr - Kangri (Devanagiri)
	OcrSkillLanguageXnr OcrSkillLanguage = "xnr"
	// OcrSkillLanguageXsr - Sherpa (Devanagiri)
	OcrSkillLanguageXsr OcrSkillLanguage = "xsr"
	// OcrSkillLanguageYua - Yucatec Maya
	OcrSkillLanguageYua OcrSkillLanguage = "yua"
	// OcrSkillLanguageZa - Zhuang
	OcrSkillLanguageZa OcrSkillLanguage = "za"
	// OcrSkillLanguageZhHans - Chinese Simplified
	OcrSkillLanguageZhHans OcrSkillLanguage = "zh-Hans"
	// OcrSkillLanguageZhHant - Chinese Traditional
	OcrSkillLanguageZhHant OcrSkillLanguage = "zh-Hant"
	// OcrSkillLanguageZu - Zulu
	OcrSkillLanguageZu OcrSkillLanguage = "zu"
)

// PossibleOcrSkillLanguageValues returns the possible values for the OcrSkillLanguage const type.
func PossibleOcrSkillLanguageValues() []OcrSkillLanguage {
	return []OcrSkillLanguage{	
		OcrSkillLanguageAf,
		OcrSkillLanguageAnp,
		OcrSkillLanguageAr,
		OcrSkillLanguageAst,
		OcrSkillLanguageAwa,
		OcrSkillLanguageAz,
		OcrSkillLanguageBe,
		OcrSkillLanguageBeCyrl,
		OcrSkillLanguageBeLatn,
		OcrSkillLanguageBfy,
		OcrSkillLanguageBfz,
		OcrSkillLanguageBg,
		OcrSkillLanguageBgc,
		OcrSkillLanguageBho,
		OcrSkillLanguageBi,
		OcrSkillLanguageBns,
		OcrSkillLanguageBr,
		OcrSkillLanguageBra,
		OcrSkillLanguageBrx,
		OcrSkillLanguageBs,
		OcrSkillLanguageBua,
		OcrSkillLanguageCa,
		OcrSkillLanguageCeb,
		OcrSkillLanguageCh,
		OcrSkillLanguageCnrCyrl,
		OcrSkillLanguageCnrLatn,
		OcrSkillLanguageCo,
		OcrSkillLanguageCrh,
		OcrSkillLanguageCs,
		OcrSkillLanguageCsb,
		OcrSkillLanguageCy,
		OcrSkillLanguageDa,
		OcrSkillLanguageDe,
		OcrSkillLanguageDhi,
		OcrSkillLanguageDoi,
		OcrSkillLanguageDsb,
		OcrSkillLanguageEl,
		OcrSkillLanguageEn,
		OcrSkillLanguageEs,
		OcrSkillLanguageEt,
		OcrSkillLanguageEu,
		OcrSkillLanguageFa,
		OcrSkillLanguageFi,
		OcrSkillLanguageFil,
		OcrSkillLanguageFj,
		OcrSkillLanguageFo,
		OcrSkillLanguageFr,
		OcrSkillLanguageFur,
		OcrSkillLanguageFy,
		OcrSkillLanguageGa,
		OcrSkillLanguageGag,
		OcrSkillLanguageGd,
		OcrSkillLanguageGil,
		OcrSkillLanguageGl,
		OcrSkillLanguageGon,
		OcrSkillLanguageGv,
		OcrSkillLanguageGvr,
		OcrSkillLanguageHaw,
		OcrSkillLanguageHi,
		OcrSkillLanguageHlb,
		OcrSkillLanguageHne,
		OcrSkillLanguageHni,
		OcrSkillLanguageHoc,
		OcrSkillLanguageHr,
		OcrSkillLanguageHsb,
		OcrSkillLanguageHt,
		OcrSkillLanguageHu,
		OcrSkillLanguageID,
		OcrSkillLanguageIa,
		OcrSkillLanguageIs,
		OcrSkillLanguageIt,
		OcrSkillLanguageIu,
		OcrSkillLanguageJa,
		OcrSkillLanguageJns,
		OcrSkillLanguageJv,
		OcrSkillLanguageKaa,
		OcrSkillLanguageKaaCyrl,
		OcrSkillLanguageKac,
		OcrSkillLanguageKea,
		OcrSkillLanguageKfq,
		OcrSkillLanguageKha,
		OcrSkillLanguageKkCyrl,
		OcrSkillLanguageKkLatn,
		OcrSkillLanguageKl,
		OcrSkillLanguageKlr,
		OcrSkillLanguageKmj,
		OcrSkillLanguageKo,
		OcrSkillLanguageKos,
		OcrSkillLanguageKpy,
		OcrSkillLanguageKrc,
		OcrSkillLanguageKru,
		OcrSkillLanguageKsh,
		OcrSkillLanguageKuArab,
		OcrSkillLanguageKuLatn,
		OcrSkillLanguageKum,
		OcrSkillLanguageKw,
		OcrSkillLanguageKy,
		OcrSkillLanguageLa,
		OcrSkillLanguageLb,
		OcrSkillLanguageLkt,
		OcrSkillLanguageLt,
		OcrSkillLanguageMi,
		OcrSkillLanguageMn,
		OcrSkillLanguageMr,
		OcrSkillLanguageMs,
		OcrSkillLanguageMt,
		OcrSkillLanguageMww,
		OcrSkillLanguageMyv,
		OcrSkillLanguageNap,
		OcrSkillLanguageNb,
		OcrSkillLanguageNe,
		OcrSkillLanguageNiu,
		OcrSkillLanguageNl,
		OcrSkillLanguageNo,
		OcrSkillLanguageNog,
		OcrSkillLanguageOc,
		OcrSkillLanguageOs,
		OcrSkillLanguagePa,
		OcrSkillLanguagePl,
		OcrSkillLanguagePrs,
		OcrSkillLanguagePs,
		OcrSkillLanguagePt,
		OcrSkillLanguageQuc,
		OcrSkillLanguageRab,
		OcrSkillLanguageRm,
		OcrSkillLanguageRo,
		OcrSkillLanguageRu,
		OcrSkillLanguageSa,
		OcrSkillLanguageSat,
		OcrSkillLanguageSck,
		OcrSkillLanguageSco,
		OcrSkillLanguageSk,
		OcrSkillLanguageSl,
		OcrSkillLanguageSm,
		OcrSkillLanguageSma,
		OcrSkillLanguageSme,
		OcrSkillLanguageSmj,
		OcrSkillLanguageSmn,
		OcrSkillLanguageSms,
		OcrSkillLanguageSo,
		OcrSkillLanguageSq,
		OcrSkillLanguageSr,
		OcrSkillLanguageSrCyrl,
		OcrSkillLanguageSrLatn,
		OcrSkillLanguageSrx,
		OcrSkillLanguageSv,
		OcrSkillLanguageSw,
		OcrSkillLanguageTet,
		OcrSkillLanguageTg,
		OcrSkillLanguageThf,
		OcrSkillLanguageTk,
		OcrSkillLanguageTo,
		OcrSkillLanguageTr,
		OcrSkillLanguageTt,
		OcrSkillLanguageTyv,
		OcrSkillLanguageUg,
		OcrSkillLanguageUnk,
		OcrSkillLanguageUr,
		OcrSkillLanguageUz,
		OcrSkillLanguageUzArab,
		OcrSkillLanguageUzCyrl,
		OcrSkillLanguageVo,
		OcrSkillLanguageWae,
		OcrSkillLanguageXnr,
		OcrSkillLanguageXsr,
		OcrSkillLanguageYua,
		OcrSkillLanguageZa,
		OcrSkillLanguageZhHans,
		OcrSkillLanguageZhHant,
		OcrSkillLanguageZu,
	}
}

// PIIDetectionSkillMaskingMode - A string indicating what maskingMode to use to mask the personal information detected in
// the input text.
type PIIDetectionSkillMaskingMode string

const (
	// PIIDetectionSkillMaskingModeNone - No masking occurs and the maskedText output will not be returned.
	PIIDetectionSkillMaskingModeNone PIIDetectionSkillMaskingMode = "none"
	// PIIDetectionSkillMaskingModeReplace - Replaces the detected entities with the character given in the maskingCharacter parameter.
// The character will be repeated to the length of the detected entity so that the offsets will correctly correspond to both
// the input text as well as the output maskedText.
	PIIDetectionSkillMaskingModeReplace PIIDetectionSkillMaskingMode = "replace"
)

// PossiblePIIDetectionSkillMaskingModeValues returns the possible values for the PIIDetectionSkillMaskingMode const type.
func PossiblePIIDetectionSkillMaskingModeValues() []PIIDetectionSkillMaskingMode {
	return []PIIDetectionSkillMaskingMode{	
		PIIDetectionSkillMaskingModeNone,
		PIIDetectionSkillMaskingModeReplace,
	}
}

// PhoneticEncoder - Identifies the type of phonetic encoder to use with a PhoneticTokenFilter.
type PhoneticEncoder string

const (
	// PhoneticEncoderBeiderMorse - Encodes a token into a Beider-Morse value.
	PhoneticEncoderBeiderMorse PhoneticEncoder = "beiderMorse"
	// PhoneticEncoderCaverphone1 - Encodes a token into a Caverphone 1.0 value.
	PhoneticEncoderCaverphone1 PhoneticEncoder = "caverphone1"
	// PhoneticEncoderCaverphone2 - Encodes a token into a Caverphone 2.0 value.
	PhoneticEncoderCaverphone2 PhoneticEncoder = "caverphone2"
	// PhoneticEncoderCologne - Encodes a token into a Cologne Phonetic value.
	PhoneticEncoderCologne PhoneticEncoder = "cologne"
	// PhoneticEncoderDoubleMetaphone - Encodes a token into a double metaphone value.
	PhoneticEncoderDoubleMetaphone PhoneticEncoder = "doubleMetaphone"
	// PhoneticEncoderHaasePhonetik - Encodes a token using the Haase refinement of the Kölner Phonetik algorithm.
	PhoneticEncoderHaasePhonetik PhoneticEncoder = "haasePhonetik"
	// PhoneticEncoderKoelnerPhonetik - Encodes a token using the Kölner Phonetik algorithm.
	PhoneticEncoderKoelnerPhonetik PhoneticEncoder = "koelnerPhonetik"
	// PhoneticEncoderMetaphone - Encodes a token into a Metaphone value.
	PhoneticEncoderMetaphone PhoneticEncoder = "metaphone"
	// PhoneticEncoderNysiis - Encodes a token into a NYSIIS value.
	PhoneticEncoderNysiis PhoneticEncoder = "nysiis"
	// PhoneticEncoderRefinedSoundex - Encodes a token into a Refined Soundex value.
	PhoneticEncoderRefinedSoundex PhoneticEncoder = "refinedSoundex"
	// PhoneticEncoderSoundex - Encodes a token into a Soundex value.
	PhoneticEncoderSoundex PhoneticEncoder = "soundex"
)

// PossiblePhoneticEncoderValues returns the possible values for the PhoneticEncoder const type.
func PossiblePhoneticEncoderValues() []PhoneticEncoder {
	return []PhoneticEncoder{	
		PhoneticEncoderBeiderMorse,
		PhoneticEncoderCaverphone1,
		PhoneticEncoderCaverphone2,
		PhoneticEncoderCologne,
		PhoneticEncoderDoubleMetaphone,
		PhoneticEncoderHaasePhonetik,
		PhoneticEncoderKoelnerPhonetik,
		PhoneticEncoderMetaphone,
		PhoneticEncoderNysiis,
		PhoneticEncoderRefinedSoundex,
		PhoneticEncoderSoundex,
	}
}

// RegexFlags - Defines flags that can be combined to control how regular expressions are used in the pattern analyzer and
// pattern tokenizer.
type RegexFlags string

const (
	// RegexFlagsCanonEq - Enables canonical equivalence.
	RegexFlagsCanonEq RegexFlags = "CANON_EQ"
	// RegexFlagsCaseInsensitive - Enables case-insensitive matching.
	RegexFlagsCaseInsensitive RegexFlags = "CASE_INSENSITIVE"
	// RegexFlagsComments - Permits whitespace and comments in the pattern.
	RegexFlagsComments RegexFlags = "COMMENTS"
	// RegexFlagsDotAll - Enables dotall mode.
	RegexFlagsDotAll RegexFlags = "DOTALL"
	// RegexFlagsLiteral - Enables literal parsing of the pattern.
	RegexFlagsLiteral RegexFlags = "LITERAL"
	// RegexFlagsMultiline - Enables multiline mode.
	RegexFlagsMultiline RegexFlags = "MULTILINE"
	// RegexFlagsUnicodeCase - Enables Unicode-aware case folding.
	RegexFlagsUnicodeCase RegexFlags = "UNICODE_CASE"
	// RegexFlagsUnixLines - Enables Unix lines mode.
	RegexFlagsUnixLines RegexFlags = "UNIX_LINES"
)

// PossibleRegexFlagsValues returns the possible values for the RegexFlags const type.
func PossibleRegexFlagsValues() []RegexFlags {
	return []RegexFlags{	
		RegexFlagsCanonEq,
		RegexFlagsCaseInsensitive,
		RegexFlagsComments,
		RegexFlagsDotAll,
		RegexFlagsLiteral,
		RegexFlagsMultiline,
		RegexFlagsUnicodeCase,
		RegexFlagsUnixLines,
	}
}

// ScoringFunctionAggregation - Defines the aggregation function used to combine the results of all the scoring functions
// in a scoring profile.
type ScoringFunctionAggregation string

const (
	// ScoringFunctionAggregationAverage - Boost scores by the average of all scoring function results.
	ScoringFunctionAggregationAverage ScoringFunctionAggregation = "average"
	// ScoringFunctionAggregationFirstMatching - Boost scores using the first applicable scoring function in the scoring profile.
	ScoringFunctionAggregationFirstMatching ScoringFunctionAggregation = "firstMatching"
	// ScoringFunctionAggregationMaximum - Boost scores by the maximum of all scoring function results.
	ScoringFunctionAggregationMaximum ScoringFunctionAggregation = "maximum"
	// ScoringFunctionAggregationMinimum - Boost scores by the minimum of all scoring function results.
	ScoringFunctionAggregationMinimum ScoringFunctionAggregation = "minimum"
	// ScoringFunctionAggregationSum - Boost scores by the sum of all scoring function results.
	ScoringFunctionAggregationSum ScoringFunctionAggregation = "sum"
)

// PossibleScoringFunctionAggregationValues returns the possible values for the ScoringFunctionAggregation const type.
func PossibleScoringFunctionAggregationValues() []ScoringFunctionAggregation {
	return []ScoringFunctionAggregation{	
		ScoringFunctionAggregationAverage,
		ScoringFunctionAggregationFirstMatching,
		ScoringFunctionAggregationMaximum,
		ScoringFunctionAggregationMinimum,
		ScoringFunctionAggregationSum,
	}
}

// ScoringFunctionInterpolation - Defines the function used to interpolate score boosting across a range of documents.
type ScoringFunctionInterpolation string

const (
	// ScoringFunctionInterpolationConstant - Boosts scores by a constant factor.
	ScoringFunctionInterpolationConstant ScoringFunctionInterpolation = "constant"
	// ScoringFunctionInterpolationLinear - Boosts scores by a linearly decreasing amount. This is the default interpolation for
// scoring functions.
	ScoringFunctionInterpolationLinear ScoringFunctionInterpolation = "linear"
	// ScoringFunctionInterpolationLogarithmic - Boosts scores by an amount that decreases logarithmically. Boosts decrease quickly
// for higher scores, and more slowly as the scores decrease. This interpolation option is not allowed in tag scoring functions.
	ScoringFunctionInterpolationLogarithmic ScoringFunctionInterpolation = "logarithmic"
	// ScoringFunctionInterpolationQuadratic - Boosts scores by an amount that decreases quadratically. Boosts decrease slowly
// for higher scores, and more quickly as the scores decrease. This interpolation option is not allowed in tag scoring functions.
	ScoringFunctionInterpolationQuadratic ScoringFunctionInterpolation = "quadratic"
)

// PossibleScoringFunctionInterpolationValues returns the possible values for the ScoringFunctionInterpolation const type.
func PossibleScoringFunctionInterpolationValues() []ScoringFunctionInterpolation {
	return []ScoringFunctionInterpolation{	
		ScoringFunctionInterpolationConstant,
		ScoringFunctionInterpolationLinear,
		ScoringFunctionInterpolationLogarithmic,
		ScoringFunctionInterpolationQuadratic,
	}
}

// SearchFieldDataType - Defines the data type of a field in a search index.
type SearchFieldDataType string

const (
	// SearchFieldDataTypeBoolean - Indicates that a field contains a Boolean value (true or false).
	SearchFieldDataTypeBoolean SearchFieldDataType = "Edm.Boolean"
	// SearchFieldDataTypeByte - Indicates that a field contains a 8-bit unsigned integer. This is only valid when used with Collection(Edm.Byte).
	SearchFieldDataTypeByte SearchFieldDataType = "Edm.Byte"
	// SearchFieldDataTypeComplex - Indicates that a field contains one or more complex objects that in turn have sub-fields of
// other types.
	SearchFieldDataTypeComplex SearchFieldDataType = "Edm.ComplexType"
	// SearchFieldDataTypeDateTimeOffset - Indicates that a field contains a date/time value, including timezone information.
	SearchFieldDataTypeDateTimeOffset SearchFieldDataType = "Edm.DateTimeOffset"
	// SearchFieldDataTypeDouble - Indicates that a field contains an IEEE double-precision floating point number.
	SearchFieldDataTypeDouble SearchFieldDataType = "Edm.Double"
	// SearchFieldDataTypeGeographyPoint - Indicates that a field contains a geo-location in terms of longitude and latitude.
	SearchFieldDataTypeGeographyPoint SearchFieldDataType = "Edm.GeographyPoint"
	// SearchFieldDataTypeHalf - Indicates that a field contains a half-precision floating point number. This is only valid when
// used with Collection(Edm.Half).
	SearchFieldDataTypeHalf SearchFieldDataType = "Edm.Half"
	// SearchFieldDataTypeInt16 - Indicates that a field contains a 16-bit signed integer. This is only valid when used with Collection(Edm.Int16).
	SearchFieldDataTypeInt16 SearchFieldDataType = "Edm.Int16"
	// SearchFieldDataTypeInt32 - Indicates that a field contains a 32-bit signed integer.
	SearchFieldDataTypeInt32 SearchFieldDataType = "Edm.Int32"
	// SearchFieldDataTypeInt64 - Indicates that a field contains a 64-bit signed integer.
	SearchFieldDataTypeInt64 SearchFieldDataType = "Edm.Int64"
	// SearchFieldDataTypeSByte - Indicates that a field contains a 8-bit signed integer. This is only valid when used with Collection(Edm.SByte).
	SearchFieldDataTypeSByte SearchFieldDataType = "Edm.SByte"
	// SearchFieldDataTypeSingle - Indicates that a field contains a single-precision floating point number. This is only valid
// when used with Collection(Edm.Single).
	SearchFieldDataTypeSingle SearchFieldDataType = "Edm.Single"
	// SearchFieldDataTypeString - Indicates that a field contains a string.
	SearchFieldDataTypeString SearchFieldDataType = "Edm.String"
)

// PossibleSearchFieldDataTypeValues returns the possible values for the SearchFieldDataType const type.
func PossibleSearchFieldDataTypeValues() []SearchFieldDataType {
	return []SearchFieldDataType{	
		SearchFieldDataTypeBoolean,
		SearchFieldDataTypeByte,
		SearchFieldDataTypeComplex,
		SearchFieldDataTypeDateTimeOffset,
		SearchFieldDataTypeDouble,
		SearchFieldDataTypeGeographyPoint,
		SearchFieldDataTypeHalf,
		SearchFieldDataTypeInt16,
		SearchFieldDataTypeInt32,
		SearchFieldDataTypeInt64,
		SearchFieldDataTypeSByte,
		SearchFieldDataTypeSingle,
		SearchFieldDataTypeString,
	}
}

// SearchIndexerDataSourceType - Defines the type of a datasource.
type SearchIndexerDataSourceType string

const (
	// SearchIndexerDataSourceTypeAdlsGen2 - Indicates an ADLS Gen2 datasource.
	SearchIndexerDataSourceTypeAdlsGen2 SearchIndexerDataSourceType = "adlsgen2"
	// SearchIndexerDataSourceTypeAzureBlob - Indicates an Azure Blob datasource.
	SearchIndexerDataSourceTypeAzureBlob SearchIndexerDataSourceType = "azureblob"
	// SearchIndexerDataSourceTypeAzureSQL - Indicates an Azure SQL datasource.
	SearchIndexerDataSourceTypeAzureSQL SearchIndexerDataSourceType = "azuresql"
	// SearchIndexerDataSourceTypeAzureTable - Indicates an Azure Table datasource.
	SearchIndexerDataSourceTypeAzureTable SearchIndexerDataSourceType = "azuretable"
	// SearchIndexerDataSourceTypeCosmosDb - Indicates a CosmosDB datasource.
	SearchIndexerDataSourceTypeCosmosDb SearchIndexerDataSourceType = "cosmosdb"
	// SearchIndexerDataSourceTypeMySQL - Indicates a MySql datasource.
	SearchIndexerDataSourceTypeMySQL SearchIndexerDataSourceType = "mysql"
)

// PossibleSearchIndexerDataSourceTypeValues returns the possible values for the SearchIndexerDataSourceType const type.
func PossibleSearchIndexerDataSourceTypeValues() []SearchIndexerDataSourceType {
	return []SearchIndexerDataSourceType{	
		SearchIndexerDataSourceTypeAdlsGen2,
		SearchIndexerDataSourceTypeAzureBlob,
		SearchIndexerDataSourceTypeAzureSQL,
		SearchIndexerDataSourceTypeAzureTable,
		SearchIndexerDataSourceTypeCosmosDb,
		SearchIndexerDataSourceTypeMySQL,
	}
}

// SentimentSkillLanguage - Deprecated. The language codes supported for input text by SentimentSkill.
type SentimentSkillLanguage string

const (
	// SentimentSkillLanguageDa - Danish
	SentimentSkillLanguageDa SentimentSkillLanguage = "da"
	// SentimentSkillLanguageDe - German
	SentimentSkillLanguageDe SentimentSkillLanguage = "de"
	// SentimentSkillLanguageEl - Greek
	SentimentSkillLanguageEl SentimentSkillLanguage = "el"
	// SentimentSkillLanguageEn - English
	SentimentSkillLanguageEn SentimentSkillLanguage = "en"
	// SentimentSkillLanguageEs - Spanish
	SentimentSkillLanguageEs SentimentSkillLanguage = "es"
	// SentimentSkillLanguageFi - Finnish
	SentimentSkillLanguageFi SentimentSkillLanguage = "fi"
	// SentimentSkillLanguageFr - French
	SentimentSkillLanguageFr SentimentSkillLanguage = "fr"
	// SentimentSkillLanguageIt - Italian
	SentimentSkillLanguageIt SentimentSkillLanguage = "it"
	// SentimentSkillLanguageNl - Dutch
	SentimentSkillLanguageNl SentimentSkillLanguage = "nl"
	// SentimentSkillLanguageNo - Norwegian (Bokmaal)
	SentimentSkillLanguageNo SentimentSkillLanguage = "no"
	// SentimentSkillLanguagePl - Polish
	SentimentSkillLanguagePl SentimentSkillLanguage = "pl"
	// SentimentSkillLanguagePtPT - Portuguese (Portugal)
	SentimentSkillLanguagePtPT SentimentSkillLanguage = "pt-PT"
	// SentimentSkillLanguageRu - Russian
	SentimentSkillLanguageRu SentimentSkillLanguage = "ru"
	// SentimentSkillLanguageSv - Swedish
	SentimentSkillLanguageSv SentimentSkillLanguage = "sv"
	// SentimentSkillLanguageTr - Turkish
	SentimentSkillLanguageTr SentimentSkillLanguage = "tr"
)

// PossibleSentimentSkillLanguageValues returns the possible values for the SentimentSkillLanguage const type.
func PossibleSentimentSkillLanguageValues() []SentimentSkillLanguage {
	return []SentimentSkillLanguage{	
		SentimentSkillLanguageDa,
		SentimentSkillLanguageDe,
		SentimentSkillLanguageEl,
		SentimentSkillLanguageEn,
		SentimentSkillLanguageEs,
		SentimentSkillLanguageFi,
		SentimentSkillLanguageFr,
		SentimentSkillLanguageIt,
		SentimentSkillLanguageNl,
		SentimentSkillLanguageNo,
		SentimentSkillLanguagePl,
		SentimentSkillLanguagePtPT,
		SentimentSkillLanguageRu,
		SentimentSkillLanguageSv,
		SentimentSkillLanguageTr,
	}
}

// SnowballTokenFilterLanguage - The language to use for a Snowball token filter.
type SnowballTokenFilterLanguage string

const (
	// SnowballTokenFilterLanguageArmenian - Selects the Lucene Snowball stemming tokenizer for Armenian.
	SnowballTokenFilterLanguageArmenian SnowballTokenFilterLanguage = "armenian"
	// SnowballTokenFilterLanguageBasque - Selects the Lucene Snowball stemming tokenizer for Basque.
	SnowballTokenFilterLanguageBasque SnowballTokenFilterLanguage = "basque"
	// SnowballTokenFilterLanguageCatalan - Selects the Lucene Snowball stemming tokenizer for Catalan.
	SnowballTokenFilterLanguageCatalan SnowballTokenFilterLanguage = "catalan"
	// SnowballTokenFilterLanguageDanish - Selects the Lucene Snowball stemming tokenizer for Danish.
	SnowballTokenFilterLanguageDanish SnowballTokenFilterLanguage = "danish"
	// SnowballTokenFilterLanguageDutch - Selects the Lucene Snowball stemming tokenizer for Dutch.
	SnowballTokenFilterLanguageDutch SnowballTokenFilterLanguage = "dutch"
	// SnowballTokenFilterLanguageEnglish - Selects the Lucene Snowball stemming tokenizer for English.
	SnowballTokenFilterLanguageEnglish SnowballTokenFilterLanguage = "english"
	// SnowballTokenFilterLanguageFinnish - Selects the Lucene Snowball stemming tokenizer for Finnish.
	SnowballTokenFilterLanguageFinnish SnowballTokenFilterLanguage = "finnish"
	// SnowballTokenFilterLanguageFrench - Selects the Lucene Snowball stemming tokenizer for French.
	SnowballTokenFilterLanguageFrench SnowballTokenFilterLanguage = "french"
	// SnowballTokenFilterLanguageGerman - Selects the Lucene Snowball stemming tokenizer for German.
	SnowballTokenFilterLanguageGerman SnowballTokenFilterLanguage = "german"
	// SnowballTokenFilterLanguageGerman2 - Selects the Lucene Snowball stemming tokenizer that uses the German variant algorithm.
	SnowballTokenFilterLanguageGerman2 SnowballTokenFilterLanguage = "german2"
	// SnowballTokenFilterLanguageHungarian - Selects the Lucene Snowball stemming tokenizer for Hungarian.
	SnowballTokenFilterLanguageHungarian SnowballTokenFilterLanguage = "hungarian"
	// SnowballTokenFilterLanguageItalian - Selects the Lucene Snowball stemming tokenizer for Italian.
	SnowballTokenFilterLanguageItalian SnowballTokenFilterLanguage = "italian"
	// SnowballTokenFilterLanguageKp - Selects the Lucene Snowball stemming tokenizer for Dutch that uses the Kraaij-Pohlmann
// stemming algorithm.
	SnowballTokenFilterLanguageKp SnowballTokenFilterLanguage = "kp"
	// SnowballTokenFilterLanguageLovins - Selects the Lucene Snowball stemming tokenizer for English that uses the Lovins stemming
// algorithm.
	SnowballTokenFilterLanguageLovins SnowballTokenFilterLanguage = "lovins"
	// SnowballTokenFilterLanguageNorwegian - Selects the Lucene Snowball stemming tokenizer for Norwegian.
	SnowballTokenFilterLanguageNorwegian SnowballTokenFilterLanguage = "norwegian"
	// SnowballTokenFilterLanguagePorter - Selects the Lucene Snowball stemming tokenizer for English that uses the Porter stemming
// algorithm.
	SnowballTokenFilterLanguagePorter SnowballTokenFilterLanguage = "porter"
	// SnowballTokenFilterLanguagePortuguese - Selects the Lucene Snowball stemming tokenizer for Portuguese.
	SnowballTokenFilterLanguagePortuguese SnowballTokenFilterLanguage = "portuguese"
	// SnowballTokenFilterLanguageRomanian - Selects the Lucene Snowball stemming tokenizer for Romanian.
	SnowballTokenFilterLanguageRomanian SnowballTokenFilterLanguage = "romanian"
	// SnowballTokenFilterLanguageRussian - Selects the Lucene Snowball stemming tokenizer for Russian.
	SnowballTokenFilterLanguageRussian SnowballTokenFilterLanguage = "russian"
	// SnowballTokenFilterLanguageSpanish - Selects the Lucene Snowball stemming tokenizer for Spanish.
	SnowballTokenFilterLanguageSpanish SnowballTokenFilterLanguage = "spanish"
	// SnowballTokenFilterLanguageSwedish - Selects the Lucene Snowball stemming tokenizer for Swedish.
	SnowballTokenFilterLanguageSwedish SnowballTokenFilterLanguage = "swedish"
	// SnowballTokenFilterLanguageTurkish - Selects the Lucene Snowball stemming tokenizer for Turkish.
	SnowballTokenFilterLanguageTurkish SnowballTokenFilterLanguage = "turkish"
)

// PossibleSnowballTokenFilterLanguageValues returns the possible values for the SnowballTokenFilterLanguage const type.
func PossibleSnowballTokenFilterLanguageValues() []SnowballTokenFilterLanguage {
	return []SnowballTokenFilterLanguage{	
		SnowballTokenFilterLanguageArmenian,
		SnowballTokenFilterLanguageBasque,
		SnowballTokenFilterLanguageCatalan,
		SnowballTokenFilterLanguageDanish,
		SnowballTokenFilterLanguageDutch,
		SnowballTokenFilterLanguageEnglish,
		SnowballTokenFilterLanguageFinnish,
		SnowballTokenFilterLanguageFrench,
		SnowballTokenFilterLanguageGerman,
		SnowballTokenFilterLanguageGerman2,
		SnowballTokenFilterLanguageHungarian,
		SnowballTokenFilterLanguageItalian,
		SnowballTokenFilterLanguageKp,
		SnowballTokenFilterLanguageLovins,
		SnowballTokenFilterLanguageNorwegian,
		SnowballTokenFilterLanguagePorter,
		SnowballTokenFilterLanguagePortuguese,
		SnowballTokenFilterLanguageRomanian,
		SnowballTokenFilterLanguageRussian,
		SnowballTokenFilterLanguageSpanish,
		SnowballTokenFilterLanguageSwedish,
		SnowballTokenFilterLanguageTurkish,
	}
}

// SplitSkillLanguage - The language codes supported for input text by SplitSkill.
type SplitSkillLanguage string

const (
	// SplitSkillLanguageAm - Amharic
	SplitSkillLanguageAm SplitSkillLanguage = "am"
	// SplitSkillLanguageBs - Bosnian
	SplitSkillLanguageBs SplitSkillLanguage = "bs"
	// SplitSkillLanguageCs - Czech
	SplitSkillLanguageCs SplitSkillLanguage = "cs"
	// SplitSkillLanguageDa - Danish
	SplitSkillLanguageDa SplitSkillLanguage = "da"
	// SplitSkillLanguageDe - German
	SplitSkillLanguageDe SplitSkillLanguage = "de"
	// SplitSkillLanguageEn - English
	SplitSkillLanguageEn SplitSkillLanguage = "en"
	// SplitSkillLanguageEs - Spanish
	SplitSkillLanguageEs SplitSkillLanguage = "es"
	// SplitSkillLanguageEt - Estonian
	SplitSkillLanguageEt SplitSkillLanguage = "et"
	// SplitSkillLanguageFi - Finnish
	SplitSkillLanguageFi SplitSkillLanguage = "fi"
	// SplitSkillLanguageFr - French
	SplitSkillLanguageFr SplitSkillLanguage = "fr"
	// SplitSkillLanguageHe - Hebrew
	SplitSkillLanguageHe SplitSkillLanguage = "he"
	// SplitSkillLanguageHi - Hindi
	SplitSkillLanguageHi SplitSkillLanguage = "hi"
	// SplitSkillLanguageHr - Croatian
	SplitSkillLanguageHr SplitSkillLanguage = "hr"
	// SplitSkillLanguageHu - Hungarian
	SplitSkillLanguageHu SplitSkillLanguage = "hu"
	// SplitSkillLanguageID - Indonesian
	SplitSkillLanguageID SplitSkillLanguage = "id"
	// SplitSkillLanguageIs - Icelandic
	SplitSkillLanguageIs SplitSkillLanguage = "is"
	// SplitSkillLanguageIt - Italian
	SplitSkillLanguageIt SplitSkillLanguage = "it"
	// SplitSkillLanguageJa - Japanese
	SplitSkillLanguageJa SplitSkillLanguage = "ja"
	// SplitSkillLanguageKo - Korean
	SplitSkillLanguageKo SplitSkillLanguage = "ko"
	// SplitSkillLanguageLv - Latvian
	SplitSkillLanguageLv SplitSkillLanguage = "lv"
	// SplitSkillLanguageNb - Norwegian
	SplitSkillLanguageNb SplitSkillLanguage = "nb"
	// SplitSkillLanguageNl - Dutch
	SplitSkillLanguageNl SplitSkillLanguage = "nl"
	// SplitSkillLanguagePl - Polish
	SplitSkillLanguagePl SplitSkillLanguage = "pl"
	// SplitSkillLanguagePt - Portuguese (Portugal)
	SplitSkillLanguagePt SplitSkillLanguage = "pt"
	// SplitSkillLanguagePtBr - Portuguese (Brazil)
	SplitSkillLanguagePtBr SplitSkillLanguage = "pt-br"
	// SplitSkillLanguageRu - Russian
	SplitSkillLanguageRu SplitSkillLanguage = "ru"
	// SplitSkillLanguageSk - Slovak
	SplitSkillLanguageSk SplitSkillLanguage = "sk"
	// SplitSkillLanguageSl - Slovenian
	SplitSkillLanguageSl SplitSkillLanguage = "sl"
	// SplitSkillLanguageSr - Serbian
	SplitSkillLanguageSr SplitSkillLanguage = "sr"
	// SplitSkillLanguageSv - Swedish
	SplitSkillLanguageSv SplitSkillLanguage = "sv"
	// SplitSkillLanguageTr - Turkish
	SplitSkillLanguageTr SplitSkillLanguage = "tr"
	// SplitSkillLanguageUr - Urdu
	SplitSkillLanguageUr SplitSkillLanguage = "ur"
	// SplitSkillLanguageZh - Chinese (Simplified)
	SplitSkillLanguageZh SplitSkillLanguage = "zh"
)

// PossibleSplitSkillLanguageValues returns the possible values for the SplitSkillLanguage const type.
func PossibleSplitSkillLanguageValues() []SplitSkillLanguage {
	return []SplitSkillLanguage{	
		SplitSkillLanguageAm,
		SplitSkillLanguageBs,
		SplitSkillLanguageCs,
		SplitSkillLanguageDa,
		SplitSkillLanguageDe,
		SplitSkillLanguageEn,
		SplitSkillLanguageEs,
		SplitSkillLanguageEt,
		SplitSkillLanguageFi,
		SplitSkillLanguageFr,
		SplitSkillLanguageHe,
		SplitSkillLanguageHi,
		SplitSkillLanguageHr,
		SplitSkillLanguageHu,
		SplitSkillLanguageID,
		SplitSkillLanguageIs,
		SplitSkillLanguageIt,
		SplitSkillLanguageJa,
		SplitSkillLanguageKo,
		SplitSkillLanguageLv,
		SplitSkillLanguageNb,
		SplitSkillLanguageNl,
		SplitSkillLanguagePl,
		SplitSkillLanguagePt,
		SplitSkillLanguagePtBr,
		SplitSkillLanguageRu,
		SplitSkillLanguageSk,
		SplitSkillLanguageSl,
		SplitSkillLanguageSr,
		SplitSkillLanguageSv,
		SplitSkillLanguageTr,
		SplitSkillLanguageUr,
		SplitSkillLanguageZh,
	}
}

// StemmerTokenFilterLanguage - The language to use for a stemmer token filter.
type StemmerTokenFilterLanguage string

const (
	// StemmerTokenFilterLanguageArabic - Selects the Lucene stemming tokenizer for Arabic.
	StemmerTokenFilterLanguageArabic StemmerTokenFilterLanguage = "arabic"
	// StemmerTokenFilterLanguageArmenian - Selects the Lucene stemming tokenizer for Armenian.
	StemmerTokenFilterLanguageArmenian StemmerTokenFilterLanguage = "armenian"
	// StemmerTokenFilterLanguageBasque - Selects the Lucene stemming tokenizer for Basque.
	StemmerTokenFilterLanguageBasque StemmerTokenFilterLanguage = "basque"
	// StemmerTokenFilterLanguageBrazilian - Selects the Lucene stemming tokenizer for Portuguese (Brazil).
	StemmerTokenFilterLanguageBrazilian StemmerTokenFilterLanguage = "brazilian"
	// StemmerTokenFilterLanguageBulgarian - Selects the Lucene stemming tokenizer for Bulgarian.
	StemmerTokenFilterLanguageBulgarian StemmerTokenFilterLanguage = "bulgarian"
	// StemmerTokenFilterLanguageCatalan - Selects the Lucene stemming tokenizer for Catalan.
	StemmerTokenFilterLanguageCatalan StemmerTokenFilterLanguage = "catalan"
	// StemmerTokenFilterLanguageCzech - Selects the Lucene stemming tokenizer for Czech.
	StemmerTokenFilterLanguageCzech StemmerTokenFilterLanguage = "czech"
	// StemmerTokenFilterLanguageDanish - Selects the Lucene stemming tokenizer for Danish.
	StemmerTokenFilterLanguageDanish StemmerTokenFilterLanguage = "danish"
	// StemmerTokenFilterLanguageDutch - Selects the Lucene stemming tokenizer for Dutch.
	StemmerTokenFilterLanguageDutch StemmerTokenFilterLanguage = "dutch"
	// StemmerTokenFilterLanguageDutchKp - Selects the Lucene stemming tokenizer for Dutch that uses the Kraaij-Pohlmann stemming
// algorithm.
	StemmerTokenFilterLanguageDutchKp StemmerTokenFilterLanguage = "dutchKp"
	// StemmerTokenFilterLanguageEnglish - Selects the Lucene stemming tokenizer for English.
	StemmerTokenFilterLanguageEnglish StemmerTokenFilterLanguage = "english"
	// StemmerTokenFilterLanguageFinnish - Selects the Lucene stemming tokenizer for Finnish.
	StemmerTokenFilterLanguageFinnish StemmerTokenFilterLanguage = "finnish"
	// StemmerTokenFilterLanguageFrench - Selects the Lucene stemming tokenizer for French.
	StemmerTokenFilterLanguageFrench StemmerTokenFilterLanguage = "french"
	// StemmerTokenFilterLanguageGalician - Selects the Lucene stemming tokenizer for Galician.
	StemmerTokenFilterLanguageGalician StemmerTokenFilterLanguage = "galician"
	// StemmerTokenFilterLanguageGerman - Selects the Lucene stemming tokenizer for German.
	StemmerTokenFilterLanguageGerman StemmerTokenFilterLanguage = "german"
	// StemmerTokenFilterLanguageGerman2 - Selects the Lucene stemming tokenizer that uses the German variant algorithm.
	StemmerTokenFilterLanguageGerman2 StemmerTokenFilterLanguage = "german2"
	// StemmerTokenFilterLanguageGreek - Selects the Lucene stemming tokenizer for Greek.
	StemmerTokenFilterLanguageGreek StemmerTokenFilterLanguage = "greek"
	// StemmerTokenFilterLanguageHindi - Selects the Lucene stemming tokenizer for Hindi.
	StemmerTokenFilterLanguageHindi StemmerTokenFilterLanguage = "hindi"
	// StemmerTokenFilterLanguageHungarian - Selects the Lucene stemming tokenizer for Hungarian.
	StemmerTokenFilterLanguageHungarian StemmerTokenFilterLanguage = "hungarian"
	// StemmerTokenFilterLanguageIndonesian - Selects the Lucene stemming tokenizer for Indonesian.
	StemmerTokenFilterLanguageIndonesian StemmerTokenFilterLanguage = "indonesian"
	// StemmerTokenFilterLanguageIrish - Selects the Lucene stemming tokenizer for Irish.
	StemmerTokenFilterLanguageIrish StemmerTokenFilterLanguage = "irish"
	// StemmerTokenFilterLanguageItalian - Selects the Lucene stemming tokenizer for Italian.
	StemmerTokenFilterLanguageItalian StemmerTokenFilterLanguage = "italian"
	// StemmerTokenFilterLanguageLatvian - Selects the Lucene stemming tokenizer for Latvian.
	StemmerTokenFilterLanguageLatvian StemmerTokenFilterLanguage = "latvian"
	// StemmerTokenFilterLanguageLightEnglish - Selects the Lucene stemming tokenizer for English that does light stemming.
	StemmerTokenFilterLanguageLightEnglish StemmerTokenFilterLanguage = "lightEnglish"
	// StemmerTokenFilterLanguageLightFinnish - Selects the Lucene stemming tokenizer for Finnish that does light stemming.
	StemmerTokenFilterLanguageLightFinnish StemmerTokenFilterLanguage = "lightFinnish"
	// StemmerTokenFilterLanguageLightFrench - Selects the Lucene stemming tokenizer for French that does light stemming.
	StemmerTokenFilterLanguageLightFrench StemmerTokenFilterLanguage = "lightFrench"
	// StemmerTokenFilterLanguageLightGerman - Selects the Lucene stemming tokenizer for German that does light stemming.
	StemmerTokenFilterLanguageLightGerman StemmerTokenFilterLanguage = "lightGerman"
	// StemmerTokenFilterLanguageLightHungarian - Selects the Lucene stemming tokenizer for Hungarian that does light stemming.
	StemmerTokenFilterLanguageLightHungarian StemmerTokenFilterLanguage = "lightHungarian"
	// StemmerTokenFilterLanguageLightItalian - Selects the Lucene stemming tokenizer for Italian that does light stemming.
	StemmerTokenFilterLanguageLightItalian StemmerTokenFilterLanguage = "lightItalian"
	// StemmerTokenFilterLanguageLightNorwegian - Selects the Lucene stemming tokenizer for Norwegian (Bokmål) that does light
// stemming.
	StemmerTokenFilterLanguageLightNorwegian StemmerTokenFilterLanguage = "lightNorwegian"
	// StemmerTokenFilterLanguageLightNynorsk - Selects the Lucene stemming tokenizer for Norwegian (Nynorsk) that does light
// stemming.
	StemmerTokenFilterLanguageLightNynorsk StemmerTokenFilterLanguage = "lightNynorsk"
	// StemmerTokenFilterLanguageLightPortuguese - Selects the Lucene stemming tokenizer for Portuguese that does light stemming.
	StemmerTokenFilterLanguageLightPortuguese StemmerTokenFilterLanguage = "lightPortuguese"
	// StemmerTokenFilterLanguageLightRussian - Selects the Lucene stemming tokenizer for Russian that does light stemming.
	StemmerTokenFilterLanguageLightRussian StemmerTokenFilterLanguage = "lightRussian"
	// StemmerTokenFilterLanguageLightSpanish - Selects the Lucene stemming tokenizer for Spanish that does light stemming.
	StemmerTokenFilterLanguageLightSpanish StemmerTokenFilterLanguage = "lightSpanish"
	// StemmerTokenFilterLanguageLightSwedish - Selects the Lucene stemming tokenizer for Swedish that does light stemming.
	StemmerTokenFilterLanguageLightSwedish StemmerTokenFilterLanguage = "lightSwedish"
	// StemmerTokenFilterLanguageLovins - Selects the Lucene stemming tokenizer for English that uses the Lovins stemming algorithm.
	StemmerTokenFilterLanguageLovins StemmerTokenFilterLanguage = "lovins"
	// StemmerTokenFilterLanguageMinimalEnglish - Selects the Lucene stemming tokenizer for English that does minimal stemming.
	StemmerTokenFilterLanguageMinimalEnglish StemmerTokenFilterLanguage = "minimalEnglish"
	// StemmerTokenFilterLanguageMinimalFrench - Selects the Lucene stemming tokenizer for French that does minimal stemming.
	StemmerTokenFilterLanguageMinimalFrench StemmerTokenFilterLanguage = "minimalFrench"
	// StemmerTokenFilterLanguageMinimalGalician - Selects the Lucene stemming tokenizer for Galician that does minimal stemming.
	StemmerTokenFilterLanguageMinimalGalician StemmerTokenFilterLanguage = "minimalGalician"
	// StemmerTokenFilterLanguageMinimalGerman - Selects the Lucene stemming tokenizer for German that does minimal stemming.
	StemmerTokenFilterLanguageMinimalGerman StemmerTokenFilterLanguage = "minimalGerman"
	// StemmerTokenFilterLanguageMinimalNorwegian - Selects the Lucene stemming tokenizer for Norwegian (Bokmål) that does minimal
// stemming.
	StemmerTokenFilterLanguageMinimalNorwegian StemmerTokenFilterLanguage = "minimalNorwegian"
	// StemmerTokenFilterLanguageMinimalNynorsk - Selects the Lucene stemming tokenizer for Norwegian (Nynorsk) that does minimal
// stemming.
	StemmerTokenFilterLanguageMinimalNynorsk StemmerTokenFilterLanguage = "minimalNynorsk"
	// StemmerTokenFilterLanguageMinimalPortuguese - Selects the Lucene stemming tokenizer for Portuguese that does minimal stemming.
	StemmerTokenFilterLanguageMinimalPortuguese StemmerTokenFilterLanguage = "minimalPortuguese"
	// StemmerTokenFilterLanguageNorwegian - Selects the Lucene stemming tokenizer for Norwegian (Bokmål).
	StemmerTokenFilterLanguageNorwegian StemmerTokenFilterLanguage = "norwegian"
	// StemmerTokenFilterLanguagePorter2 - Selects the Lucene stemming tokenizer for English that uses the Porter2 stemming algorithm.
	StemmerTokenFilterLanguagePorter2 StemmerTokenFilterLanguage = "porter2"
	// StemmerTokenFilterLanguagePortuguese - Selects the Lucene stemming tokenizer for Portuguese.
	StemmerTokenFilterLanguagePortuguese StemmerTokenFilterLanguage = "portuguese"
	// StemmerTokenFilterLanguagePortugueseRslp - Selects the Lucene stemming tokenizer for Portuguese that uses the RSLP stemming
// algorithm.
	StemmerTokenFilterLanguagePortugueseRslp StemmerTokenFilterLanguage = "portugueseRslp"
	// StemmerTokenFilterLanguagePossessiveEnglish - Selects the Lucene stemming tokenizer for English that removes trailing possessives
// from words.
	StemmerTokenFilterLanguagePossessiveEnglish StemmerTokenFilterLanguage = "possessiveEnglish"
	// StemmerTokenFilterLanguageRomanian - Selects the Lucene stemming tokenizer for Romanian.
	StemmerTokenFilterLanguageRomanian StemmerTokenFilterLanguage = "romanian"
	// StemmerTokenFilterLanguageRussian - Selects the Lucene stemming tokenizer for Russian.
	StemmerTokenFilterLanguageRussian StemmerTokenFilterLanguage = "russian"
	// StemmerTokenFilterLanguageSorani - Selects the Lucene stemming tokenizer for Sorani.
	StemmerTokenFilterLanguageSorani StemmerTokenFilterLanguage = "sorani"
	// StemmerTokenFilterLanguageSpanish - Selects the Lucene stemming tokenizer for Spanish.
	StemmerTokenFilterLanguageSpanish StemmerTokenFilterLanguage = "spanish"
	// StemmerTokenFilterLanguageSwedish - Selects the Lucene stemming tokenizer for Swedish.
	StemmerTokenFilterLanguageSwedish StemmerTokenFilterLanguage = "swedish"
	// StemmerTokenFilterLanguageTurkish - Selects the Lucene stemming tokenizer for Turkish.
	StemmerTokenFilterLanguageTurkish StemmerTokenFilterLanguage = "turkish"
)

// PossibleStemmerTokenFilterLanguageValues returns the possible values for the StemmerTokenFilterLanguage const type.
func PossibleStemmerTokenFilterLanguageValues() []StemmerTokenFilterLanguage {
	return []StemmerTokenFilterLanguage{	
		StemmerTokenFilterLanguageArabic,
		StemmerTokenFilterLanguageArmenian,
		StemmerTokenFilterLanguageBasque,
		StemmerTokenFilterLanguageBrazilian,
		StemmerTokenFilterLanguageBulgarian,
		StemmerTokenFilterLanguageCatalan,
		StemmerTokenFilterLanguageCzech,
		StemmerTokenFilterLanguageDanish,
		StemmerTokenFilterLanguageDutch,
		StemmerTokenFilterLanguageDutchKp,
		StemmerTokenFilterLanguageEnglish,
		StemmerTokenFilterLanguageFinnish,
		StemmerTokenFilterLanguageFrench,
		StemmerTokenFilterLanguageGalician,
		StemmerTokenFilterLanguageGerman,
		StemmerTokenFilterLanguageGerman2,
		StemmerTokenFilterLanguageGreek,
		StemmerTokenFilterLanguageHindi,
		StemmerTokenFilterLanguageHungarian,
		StemmerTokenFilterLanguageIndonesian,
		StemmerTokenFilterLanguageIrish,
		StemmerTokenFilterLanguageItalian,
		StemmerTokenFilterLanguageLatvian,
		StemmerTokenFilterLanguageLightEnglish,
		StemmerTokenFilterLanguageLightFinnish,
		StemmerTokenFilterLanguageLightFrench,
		StemmerTokenFilterLanguageLightGerman,
		StemmerTokenFilterLanguageLightHungarian,
		StemmerTokenFilterLanguageLightItalian,
		StemmerTokenFilterLanguageLightNorwegian,
		StemmerTokenFilterLanguageLightNynorsk,
		StemmerTokenFilterLanguageLightPortuguese,
		StemmerTokenFilterLanguageLightRussian,
		StemmerTokenFilterLanguageLightSpanish,
		StemmerTokenFilterLanguageLightSwedish,
		StemmerTokenFilterLanguageLovins,
		StemmerTokenFilterLanguageMinimalEnglish,
		StemmerTokenFilterLanguageMinimalFrench,
		StemmerTokenFilterLanguageMinimalGalician,
		StemmerTokenFilterLanguageMinimalGerman,
		StemmerTokenFilterLanguageMinimalNorwegian,
		StemmerTokenFilterLanguageMinimalNynorsk,
		StemmerTokenFilterLanguageMinimalPortuguese,
		StemmerTokenFilterLanguageNorwegian,
		StemmerTokenFilterLanguagePorter2,
		StemmerTokenFilterLanguagePortuguese,
		StemmerTokenFilterLanguagePortugueseRslp,
		StemmerTokenFilterLanguagePossessiveEnglish,
		StemmerTokenFilterLanguageRomanian,
		StemmerTokenFilterLanguageRussian,
		StemmerTokenFilterLanguageSorani,
		StemmerTokenFilterLanguageSpanish,
		StemmerTokenFilterLanguageSwedish,
		StemmerTokenFilterLanguageTurkish,
	}
}

// StopwordsList - Identifies a predefined list of language-specific stopwords.
type StopwordsList string

const (
	// StopwordsListArabic - Selects the stopword list for Arabic.
	StopwordsListArabic StopwordsList = "arabic"
	// StopwordsListArmenian - Selects the stopword list for Armenian.
	StopwordsListArmenian StopwordsList = "armenian"
	// StopwordsListBasque - Selects the stopword list for Basque.
	StopwordsListBasque StopwordsList = "basque"
	// StopwordsListBrazilian - Selects the stopword list for Portuguese (Brazil).
	StopwordsListBrazilian StopwordsList = "brazilian"
	// StopwordsListBulgarian - Selects the stopword list for Bulgarian.
	StopwordsListBulgarian StopwordsList = "bulgarian"
	// StopwordsListCatalan - Selects the stopword list for Catalan.
	StopwordsListCatalan StopwordsList = "catalan"
	// StopwordsListCzech - Selects the stopword list for Czech.
	StopwordsListCzech StopwordsList = "czech"
	// StopwordsListDanish - Selects the stopword list for Danish.
	StopwordsListDanish StopwordsList = "danish"
	// StopwordsListDutch - Selects the stopword list for Dutch.
	StopwordsListDutch StopwordsList = "dutch"
	// StopwordsListEnglish - Selects the stopword list for English.
	StopwordsListEnglish StopwordsList = "english"
	// StopwordsListFinnish - Selects the stopword list for Finnish.
	StopwordsListFinnish StopwordsList = "finnish"
	// StopwordsListFrench - Selects the stopword list for French.
	StopwordsListFrench StopwordsList = "french"
	// StopwordsListGalician - Selects the stopword list for Galician.
	StopwordsListGalician StopwordsList = "galician"
	// StopwordsListGerman - Selects the stopword list for German.
	StopwordsListGerman StopwordsList = "german"
	// StopwordsListGreek - Selects the stopword list for Greek.
	StopwordsListGreek StopwordsList = "greek"
	// StopwordsListHindi - Selects the stopword list for Hindi.
	StopwordsListHindi StopwordsList = "hindi"
	// StopwordsListHungarian - Selects the stopword list for Hungarian.
	StopwordsListHungarian StopwordsList = "hungarian"
	// StopwordsListIndonesian - Selects the stopword list for Indonesian.
	StopwordsListIndonesian StopwordsList = "indonesian"
	// StopwordsListIrish - Selects the stopword list for Irish.
	StopwordsListIrish StopwordsList = "irish"
	// StopwordsListItalian - Selects the stopword list for Italian.
	StopwordsListItalian StopwordsList = "italian"
	// StopwordsListLatvian - Selects the stopword list for Latvian.
	StopwordsListLatvian StopwordsList = "latvian"
	// StopwordsListNorwegian - Selects the stopword list for Norwegian.
	StopwordsListNorwegian StopwordsList = "norwegian"
	// StopwordsListPersian - Selects the stopword list for Persian.
	StopwordsListPersian StopwordsList = "persian"
	// StopwordsListPortuguese - Selects the stopword list for Portuguese.
	StopwordsListPortuguese StopwordsList = "portuguese"
	// StopwordsListRomanian - Selects the stopword list for Romanian.
	StopwordsListRomanian StopwordsList = "romanian"
	// StopwordsListRussian - Selects the stopword list for Russian.
	StopwordsListRussian StopwordsList = "russian"
	// StopwordsListSorani - Selects the stopword list for Sorani.
	StopwordsListSorani StopwordsList = "sorani"
	// StopwordsListSpanish - Selects the stopword list for Spanish.
	StopwordsListSpanish StopwordsList = "spanish"
	// StopwordsListSwedish - Selects the stopword list for Swedish.
	StopwordsListSwedish StopwordsList = "swedish"
	// StopwordsListThai - Selects the stopword list for Thai.
	StopwordsListThai StopwordsList = "thai"
	// StopwordsListTurkish - Selects the stopword list for Turkish.
	StopwordsListTurkish StopwordsList = "turkish"
)

// PossibleStopwordsListValues returns the possible values for the StopwordsList const type.
func PossibleStopwordsListValues() []StopwordsList {
	return []StopwordsList{	
		StopwordsListArabic,
		StopwordsListArmenian,
		StopwordsListBasque,
		StopwordsListBrazilian,
		StopwordsListBulgarian,
		StopwordsListCatalan,
		StopwordsListCzech,
		StopwordsListDanish,
		StopwordsListDutch,
		StopwordsListEnglish,
		StopwordsListFinnish,
		StopwordsListFrench,
		StopwordsListGalician,
		StopwordsListGerman,
		StopwordsListGreek,
		StopwordsListHindi,
		StopwordsListHungarian,
		StopwordsListIndonesian,
		StopwordsListIrish,
		StopwordsListItalian,
		StopwordsListLatvian,
		StopwordsListNorwegian,
		StopwordsListPersian,
		StopwordsListPortuguese,
		StopwordsListRomanian,
		StopwordsListRussian,
		StopwordsListSorani,
		StopwordsListSpanish,
		StopwordsListSwedish,
		StopwordsListThai,
		StopwordsListTurkish,
	}
}

// TextSplitMode - A value indicating which split mode to perform.
type TextSplitMode string

const (
	// TextSplitModePages - Split the text into individual pages.
	TextSplitModePages TextSplitMode = "pages"
	// TextSplitModeSentences - Split the text into individual sentences.
	TextSplitModeSentences TextSplitMode = "sentences"
)

// PossibleTextSplitModeValues returns the possible values for the TextSplitMode const type.
func PossibleTextSplitModeValues() []TextSplitMode {
	return []TextSplitMode{	
		TextSplitModePages,
		TextSplitModeSentences,
	}
}

// TextTranslationSkillLanguage - The language codes supported for input text by TextTranslationSkill.
type TextTranslationSkillLanguage string

const (
	// TextTranslationSkillLanguageAf - Afrikaans
	TextTranslationSkillLanguageAf TextTranslationSkillLanguage = "af"
	// TextTranslationSkillLanguageAr - Arabic
	TextTranslationSkillLanguageAr TextTranslationSkillLanguage = "ar"
	// TextTranslationSkillLanguageBg - Bulgarian
	TextTranslationSkillLanguageBg TextTranslationSkillLanguage = "bg"
	// TextTranslationSkillLanguageBn - Bangla
	TextTranslationSkillLanguageBn TextTranslationSkillLanguage = "bn"
	// TextTranslationSkillLanguageBs - Bosnian (Latin)
	TextTranslationSkillLanguageBs TextTranslationSkillLanguage = "bs"
	// TextTranslationSkillLanguageCa - Catalan
	TextTranslationSkillLanguageCa TextTranslationSkillLanguage = "ca"
	// TextTranslationSkillLanguageCs - Czech
	TextTranslationSkillLanguageCs TextTranslationSkillLanguage = "cs"
	// TextTranslationSkillLanguageCy - Welsh
	TextTranslationSkillLanguageCy TextTranslationSkillLanguage = "cy"
	// TextTranslationSkillLanguageDa - Danish
	TextTranslationSkillLanguageDa TextTranslationSkillLanguage = "da"
	// TextTranslationSkillLanguageDe - German
	TextTranslationSkillLanguageDe TextTranslationSkillLanguage = "de"
	// TextTranslationSkillLanguageEl - Greek
	TextTranslationSkillLanguageEl TextTranslationSkillLanguage = "el"
	// TextTranslationSkillLanguageEn - English
	TextTranslationSkillLanguageEn TextTranslationSkillLanguage = "en"
	// TextTranslationSkillLanguageEs - Spanish
	TextTranslationSkillLanguageEs TextTranslationSkillLanguage = "es"
	// TextTranslationSkillLanguageEt - Estonian
	TextTranslationSkillLanguageEt TextTranslationSkillLanguage = "et"
	// TextTranslationSkillLanguageFa - Persian
	TextTranslationSkillLanguageFa TextTranslationSkillLanguage = "fa"
	// TextTranslationSkillLanguageFi - Finnish
	TextTranslationSkillLanguageFi TextTranslationSkillLanguage = "fi"
	// TextTranslationSkillLanguageFil - Filipino
	TextTranslationSkillLanguageFil TextTranslationSkillLanguage = "fil"
	// TextTranslationSkillLanguageFj - Fijian
	TextTranslationSkillLanguageFj TextTranslationSkillLanguage = "fj"
	// TextTranslationSkillLanguageFr - French
	TextTranslationSkillLanguageFr TextTranslationSkillLanguage = "fr"
	// TextTranslationSkillLanguageGa - Irish
	TextTranslationSkillLanguageGa TextTranslationSkillLanguage = "ga"
	// TextTranslationSkillLanguageHe - Hebrew
	TextTranslationSkillLanguageHe TextTranslationSkillLanguage = "he"
	// TextTranslationSkillLanguageHi - Hindi
	TextTranslationSkillLanguageHi TextTranslationSkillLanguage = "hi"
	// TextTranslationSkillLanguageHr - Croatian
	TextTranslationSkillLanguageHr TextTranslationSkillLanguage = "hr"
	// TextTranslationSkillLanguageHt - Haitian Creole
	TextTranslationSkillLanguageHt TextTranslationSkillLanguage = "ht"
	// TextTranslationSkillLanguageHu - Hungarian
	TextTranslationSkillLanguageHu TextTranslationSkillLanguage = "hu"
	// TextTranslationSkillLanguageID - Indonesian
	TextTranslationSkillLanguageID TextTranslationSkillLanguage = "id"
	// TextTranslationSkillLanguageIs - Icelandic
	TextTranslationSkillLanguageIs TextTranslationSkillLanguage = "is"
	// TextTranslationSkillLanguageIt - Italian
	TextTranslationSkillLanguageIt TextTranslationSkillLanguage = "it"
	// TextTranslationSkillLanguageJa - Japanese
	TextTranslationSkillLanguageJa TextTranslationSkillLanguage = "ja"
	// TextTranslationSkillLanguageKn - Kannada
	TextTranslationSkillLanguageKn TextTranslationSkillLanguage = "kn"
	// TextTranslationSkillLanguageKo - Korean
	TextTranslationSkillLanguageKo TextTranslationSkillLanguage = "ko"
	// TextTranslationSkillLanguageLt - Lithuanian
	TextTranslationSkillLanguageLt TextTranslationSkillLanguage = "lt"
	// TextTranslationSkillLanguageLv - Latvian
	TextTranslationSkillLanguageLv TextTranslationSkillLanguage = "lv"
	// TextTranslationSkillLanguageMg - Malagasy
	TextTranslationSkillLanguageMg TextTranslationSkillLanguage = "mg"
	// TextTranslationSkillLanguageMi - Maori
	TextTranslationSkillLanguageMi TextTranslationSkillLanguage = "mi"
	// TextTranslationSkillLanguageMl - Malayalam
	TextTranslationSkillLanguageMl TextTranslationSkillLanguage = "ml"
	// TextTranslationSkillLanguageMs - Malay
	TextTranslationSkillLanguageMs TextTranslationSkillLanguage = "ms"
	// TextTranslationSkillLanguageMt - Maltese
	TextTranslationSkillLanguageMt TextTranslationSkillLanguage = "mt"
	// TextTranslationSkillLanguageMww - Hmong Daw
	TextTranslationSkillLanguageMww TextTranslationSkillLanguage = "mww"
	// TextTranslationSkillLanguageNb - Norwegian
	TextTranslationSkillLanguageNb TextTranslationSkillLanguage = "nb"
	// TextTranslationSkillLanguageNl - Dutch
	TextTranslationSkillLanguageNl TextTranslationSkillLanguage = "nl"
	// TextTranslationSkillLanguageOtq - Queretaro Otomi
	TextTranslationSkillLanguageOtq TextTranslationSkillLanguage = "otq"
	// TextTranslationSkillLanguagePa - Punjabi
	TextTranslationSkillLanguagePa TextTranslationSkillLanguage = "pa"
	// TextTranslationSkillLanguagePl - Polish
	TextTranslationSkillLanguagePl TextTranslationSkillLanguage = "pl"
	// TextTranslationSkillLanguagePt - Portuguese
	TextTranslationSkillLanguagePt TextTranslationSkillLanguage = "pt"
	// TextTranslationSkillLanguagePtBr - Portuguese (Brazil)
	TextTranslationSkillLanguagePtBr TextTranslationSkillLanguage = "pt-br"
	// TextTranslationSkillLanguagePtPT - Portuguese (Portugal)
	TextTranslationSkillLanguagePtPT TextTranslationSkillLanguage = "pt-PT"
	// TextTranslationSkillLanguageRo - Romanian
	TextTranslationSkillLanguageRo TextTranslationSkillLanguage = "ro"
	// TextTranslationSkillLanguageRu - Russian
	TextTranslationSkillLanguageRu TextTranslationSkillLanguage = "ru"
	// TextTranslationSkillLanguageSk - Slovak
	TextTranslationSkillLanguageSk TextTranslationSkillLanguage = "sk"
	// TextTranslationSkillLanguageSl - Slovenian
	TextTranslationSkillLanguageSl TextTranslationSkillLanguage = "sl"
	// TextTranslationSkillLanguageSm - Samoan
	TextTranslationSkillLanguageSm TextTranslationSkillLanguage = "sm"
	// TextTranslationSkillLanguageSrCyrl - Serbian (Cyrillic)
	TextTranslationSkillLanguageSrCyrl TextTranslationSkillLanguage = "sr-Cyrl"
	// TextTranslationSkillLanguageSrLatn - Serbian (Latin)
	TextTranslationSkillLanguageSrLatn TextTranslationSkillLanguage = "sr-Latn"
	// TextTranslationSkillLanguageSv - Swedish
	TextTranslationSkillLanguageSv TextTranslationSkillLanguage = "sv"
	// TextTranslationSkillLanguageSw - Kiswahili
	TextTranslationSkillLanguageSw TextTranslationSkillLanguage = "sw"
	// TextTranslationSkillLanguageTa - Tamil
	TextTranslationSkillLanguageTa TextTranslationSkillLanguage = "ta"
	// TextTranslationSkillLanguageTe - Telugu
	TextTranslationSkillLanguageTe TextTranslationSkillLanguage = "te"
	// TextTranslationSkillLanguageTh - Thai
	TextTranslationSkillLanguageTh TextTranslationSkillLanguage = "th"
	// TextTranslationSkillLanguageTlh - Klingon
	TextTranslationSkillLanguageTlh TextTranslationSkillLanguage = "tlh"
	// TextTranslationSkillLanguageTlhLatn - Klingon (Latin script)
	TextTranslationSkillLanguageTlhLatn TextTranslationSkillLanguage = "tlh-Latn"
	// TextTranslationSkillLanguageTlhPiqd - Klingon (Klingon script)
	TextTranslationSkillLanguageTlhPiqd TextTranslationSkillLanguage = "tlh-Piqd"
	// TextTranslationSkillLanguageTo - Tongan
	TextTranslationSkillLanguageTo TextTranslationSkillLanguage = "to"
	// TextTranslationSkillLanguageTr - Turkish
	TextTranslationSkillLanguageTr TextTranslationSkillLanguage = "tr"
	// TextTranslationSkillLanguageTy - Tahitian
	TextTranslationSkillLanguageTy TextTranslationSkillLanguage = "ty"
	// TextTranslationSkillLanguageUk - Ukrainian
	TextTranslationSkillLanguageUk TextTranslationSkillLanguage = "uk"
	// TextTranslationSkillLanguageUr - Urdu
	TextTranslationSkillLanguageUr TextTranslationSkillLanguage = "ur"
	// TextTranslationSkillLanguageVi - Vietnamese
	TextTranslationSkillLanguageVi TextTranslationSkillLanguage = "vi"
	// TextTranslationSkillLanguageYua - Yucatec Maya
	TextTranslationSkillLanguageYua TextTranslationSkillLanguage = "yua"
	// TextTranslationSkillLanguageYue - Cantonese (Traditional)
	TextTranslationSkillLanguageYue TextTranslationSkillLanguage = "yue"
	// TextTranslationSkillLanguageZhHans - Chinese Simplified
	TextTranslationSkillLanguageZhHans TextTranslationSkillLanguage = "zh-Hans"
	// TextTranslationSkillLanguageZhHant - Chinese Traditional
	TextTranslationSkillLanguageZhHant TextTranslationSkillLanguage = "zh-Hant"
)

// PossibleTextTranslationSkillLanguageValues returns the possible values for the TextTranslationSkillLanguage const type.
func PossibleTextTranslationSkillLanguageValues() []TextTranslationSkillLanguage {
	return []TextTranslationSkillLanguage{	
		TextTranslationSkillLanguageAf,
		TextTranslationSkillLanguageAr,
		TextTranslationSkillLanguageBg,
		TextTranslationSkillLanguageBn,
		TextTranslationSkillLanguageBs,
		TextTranslationSkillLanguageCa,
		TextTranslationSkillLanguageCs,
		TextTranslationSkillLanguageCy,
		TextTranslationSkillLanguageDa,
		TextTranslationSkillLanguageDe,
		TextTranslationSkillLanguageEl,
		TextTranslationSkillLanguageEn,
		TextTranslationSkillLanguageEs,
		TextTranslationSkillLanguageEt,
		TextTranslationSkillLanguageFa,
		TextTranslationSkillLanguageFi,
		TextTranslationSkillLanguageFil,
		TextTranslationSkillLanguageFj,
		TextTranslationSkillLanguageFr,
		TextTranslationSkillLanguageGa,
		TextTranslationSkillLanguageHe,
		TextTranslationSkillLanguageHi,
		TextTranslationSkillLanguageHr,
		TextTranslationSkillLanguageHt,
		TextTranslationSkillLanguageHu,
		TextTranslationSkillLanguageID,
		TextTranslationSkillLanguageIs,
		TextTranslationSkillLanguageIt,
		TextTranslationSkillLanguageJa,
		TextTranslationSkillLanguageKn,
		TextTranslationSkillLanguageKo,
		TextTranslationSkillLanguageLt,
		TextTranslationSkillLanguageLv,
		TextTranslationSkillLanguageMg,
		TextTranslationSkillLanguageMi,
		TextTranslationSkillLanguageMl,
		TextTranslationSkillLanguageMs,
		TextTranslationSkillLanguageMt,
		TextTranslationSkillLanguageMww,
		TextTranslationSkillLanguageNb,
		TextTranslationSkillLanguageNl,
		TextTranslationSkillLanguageOtq,
		TextTranslationSkillLanguagePa,
		TextTranslationSkillLanguagePl,
		TextTranslationSkillLanguagePt,
		TextTranslationSkillLanguagePtBr,
		TextTranslationSkillLanguagePtPT,
		TextTranslationSkillLanguageRo,
		TextTranslationSkillLanguageRu,
		TextTranslationSkillLanguageSk,
		TextTranslationSkillLanguageSl,
		TextTranslationSkillLanguageSm,
		TextTranslationSkillLanguageSrCyrl,
		TextTranslationSkillLanguageSrLatn,
		TextTranslationSkillLanguageSv,
		TextTranslationSkillLanguageSw,
		TextTranslationSkillLanguageTa,
		TextTranslationSkillLanguageTe,
		TextTranslationSkillLanguageTh,
		TextTranslationSkillLanguageTlh,
		TextTranslationSkillLanguageTlhLatn,
		TextTranslationSkillLanguageTlhPiqd,
		TextTranslationSkillLanguageTo,
		TextTranslationSkillLanguageTr,
		TextTranslationSkillLanguageTy,
		TextTranslationSkillLanguageUk,
		TextTranslationSkillLanguageUr,
		TextTranslationSkillLanguageVi,
		TextTranslationSkillLanguageYua,
		TextTranslationSkillLanguageYue,
		TextTranslationSkillLanguageZhHans,
		TextTranslationSkillLanguageZhHant,
	}
}

// TokenCharacterKind - Represents classes of characters on which a token filter can operate.
type TokenCharacterKind string

const (
	// TokenCharacterKindDigit - Keeps digits in tokens.
	TokenCharacterKindDigit TokenCharacterKind = "digit"
	// TokenCharacterKindLetter - Keeps letters in tokens.
	TokenCharacterKindLetter TokenCharacterKind = "letter"
	// TokenCharacterKindPunctuation - Keeps punctuation in tokens.
	TokenCharacterKindPunctuation TokenCharacterKind = "punctuation"
	// TokenCharacterKindSymbol - Keeps symbols in tokens.
	TokenCharacterKindSymbol TokenCharacterKind = "symbol"
	// TokenCharacterKindWhitespace - Keeps whitespace in tokens.
	TokenCharacterKindWhitespace TokenCharacterKind = "whitespace"
)

// PossibleTokenCharacterKindValues returns the possible values for the TokenCharacterKind const type.
func PossibleTokenCharacterKindValues() []TokenCharacterKind {
	return []TokenCharacterKind{	
		TokenCharacterKindDigit,
		TokenCharacterKindLetter,
		TokenCharacterKindPunctuation,
		TokenCharacterKindSymbol,
		TokenCharacterKindWhitespace,
	}
}

// TokenFilterName - Defines the names of all token filters supported by the search engine.
type TokenFilterName string

const (
	// TokenFilterNameASCIIFolding - Converts alphabetic, numeric, and symbolic Unicode characters which are not in the first
// 127 ASCII characters (the "Basic Latin" Unicode block) into their ASCII equivalents, if such equivalents exist. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.html
	TokenFilterNameASCIIFolding TokenFilterName = "asciifolding"
	// TokenFilterNameApostrophe - Strips all characters after an apostrophe (including the apostrophe itself). See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/tr/ApostropheFilter.html
	TokenFilterNameApostrophe TokenFilterName = "apostrophe"
	// TokenFilterNameArabicNormalization - A token filter that applies the Arabic normalizer to normalize the orthography. See
// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ar/ArabicNormalizationFilter.html
	TokenFilterNameArabicNormalization TokenFilterName = "arabic_normalization"
	// TokenFilterNameCjkBigram - Forms bigrams of CJK terms that are generated from the standard tokenizer. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/cjk/CJKBigramFilter.html
	TokenFilterNameCjkBigram TokenFilterName = "cjk_bigram"
	// TokenFilterNameCjkWidth - Normalizes CJK width differences. Folds fullwidth ASCII variants into the equivalent basic Latin,
// and half-width Katakana variants into the equivalent Kana. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/cjk/CJKWidthFilter.html
	TokenFilterNameCjkWidth TokenFilterName = "cjk_width"
	// TokenFilterNameClassic - Removes English possessives, and dots from acronyms. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/standard/ClassicFilter.html
	TokenFilterNameClassic TokenFilterName = "classic"
	// TokenFilterNameCommonGram - Construct bigrams for frequently occurring terms while indexing. Single terms are still indexed
// too, with bigrams overlaid. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/commongrams/CommonGramsFilter.html
	TokenFilterNameCommonGram TokenFilterName = "common_grams"
	// TokenFilterNameEdgeNGram - Generates n-grams of the given size(s) starting from the front or the back of an input token.
// See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.html
	TokenFilterNameEdgeNGram TokenFilterName = "edgeNGram_v2"
	// TokenFilterNameElision - Removes elisions. For example, "l'avion" (the plane) will be converted to "avion" (plane). See
// http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/util/ElisionFilter.html
	TokenFilterNameElision TokenFilterName = "elision"
	// TokenFilterNameGermanNormalization - Normalizes German characters according to the heuristics of the German2 snowball algorithm.
// See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/de/GermanNormalizationFilter.html
	TokenFilterNameGermanNormalization TokenFilterName = "german_normalization"
	// TokenFilterNameHindiNormalization - Normalizes text in Hindi to remove some differences in spelling variations. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/hi/HindiNormalizationFilter.html
	TokenFilterNameHindiNormalization TokenFilterName = "hindi_normalization"
	// TokenFilterNameIndicNormalization - Normalizes the Unicode representation of text in Indian languages. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/in/IndicNormalizationFilter.html
	TokenFilterNameIndicNormalization TokenFilterName = "indic_normalization"
	// TokenFilterNameKStem - A high-performance kstem filter for English. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/en/KStemFilter.html
	TokenFilterNameKStem TokenFilterName = "kstem"
	// TokenFilterNameKeywordRepeat - Emits each incoming token twice, once as keyword and once as non-keyword. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter.html
	TokenFilterNameKeywordRepeat TokenFilterName = "keyword_repeat"
	// TokenFilterNameLength - Removes words that are too long or too short. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/LengthFilter.html
	TokenFilterNameLength TokenFilterName = "length"
	// TokenFilterNameLimit - Limits the number of tokens while indexing. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter.html
	TokenFilterNameLimit TokenFilterName = "limit"
	// TokenFilterNameLowercase - Normalizes token text to lower case. See https://lucene.apache.org/core/6_6_1/analyzers-common/org/apache/lucene/analysis/core/LowerCaseFilter.html
	TokenFilterNameLowercase TokenFilterName = "lowercase"
	// TokenFilterNameNGram - Generates n-grams of the given size(s). See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ngram/NGramTokenFilter.html
	TokenFilterNameNGram TokenFilterName = "nGram_v2"
	// TokenFilterNamePersianNormalization - Applies normalization for Persian. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/fa/PersianNormalizationFilter.html
	TokenFilterNamePersianNormalization TokenFilterName = "persian_normalization"
	// TokenFilterNamePhonetic - Create tokens for phonetic matches. See https://lucene.apache.org/core/4_10_3/analyzers-phonetic/org/apache/lucene/analysis/phonetic/package-tree.html
	TokenFilterNamePhonetic TokenFilterName = "phonetic"
	// TokenFilterNamePorterStem - Uses the Porter stemming algorithm to transform the token stream. See http://tartarus.org/~martin/PorterStemmer
	TokenFilterNamePorterStem TokenFilterName = "porter_stem"
	// TokenFilterNameReverse - Reverses the token string. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/reverse/ReverseStringFilter.html
	TokenFilterNameReverse TokenFilterName = "reverse"
	// TokenFilterNameScandinavianFoldingNormalization - Folds Scandinavian characters åÅäæÄÆ-&gt;a and öÖøØ-&gt;o. It also discriminates
// against use of double vowels aa, ae, ao, oe and oo, leaving just the first one. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.html
	TokenFilterNameScandinavianFoldingNormalization TokenFilterName = "scandinavian_folding"
	// TokenFilterNameScandinavianNormalization - Normalizes use of the interchangeable Scandinavian characters. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.html
	TokenFilterNameScandinavianNormalization TokenFilterName = "scandinavian_normalization"
	// TokenFilterNameShingle - Creates combinations of tokens as a single token. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/shingle/ShingleFilter.html
	TokenFilterNameShingle TokenFilterName = "shingle"
	// TokenFilterNameSnowball - A filter that stems words using a Snowball-generated stemmer. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/snowball/SnowballFilter.html
	TokenFilterNameSnowball TokenFilterName = "snowball"
	// TokenFilterNameSoraniNormalization - Normalizes the Unicode representation of Sorani text. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.html
	TokenFilterNameSoraniNormalization TokenFilterName = "sorani_normalization"
	// TokenFilterNameStemmer - Language specific stemming filter. See https://learn.microsoft.com/rest/api/searchservice/Custom-analyzers-in-Azure-Search#TokenFilters
	TokenFilterNameStemmer TokenFilterName = "stemmer"
	// TokenFilterNameStopwords - Removes stop words from a token stream. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/core/StopFilter.html
	TokenFilterNameStopwords TokenFilterName = "stopwords"
	// TokenFilterNameTrim - Trims leading and trailing whitespace from tokens. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/TrimFilter.html
	TokenFilterNameTrim TokenFilterName = "trim"
	// TokenFilterNameTruncate - Truncates the terms to a specific length. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter.html
	TokenFilterNameTruncate TokenFilterName = "truncate"
	// TokenFilterNameUnique - Filters out tokens with same text as the previous token. See http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/miscellaneous/RemoveDuplicatesTokenFilter.html
	TokenFilterNameUnique TokenFilterName = "unique"
	// TokenFilterNameUppercase - Normalizes token text to upper case. See https://lucene.apache.org/core/6_6_1/analyzers-common/org/apache/lucene/analysis/core/UpperCaseFilter.html
	TokenFilterNameUppercase TokenFilterName = "uppercase"
	// TokenFilterNameWordDelimiter - Splits words into subwords and performs optional transformations on subword groups.
	TokenFilterNameWordDelimiter TokenFilterName = "word_delimiter"
)

// PossibleTokenFilterNameValues returns the possible values for the TokenFilterName const type.
func PossibleTokenFilterNameValues() []TokenFilterName {
	return []TokenFilterName{	
		TokenFilterNameASCIIFolding,
		TokenFilterNameApostrophe,
		TokenFilterNameArabicNormalization,
		TokenFilterNameCjkBigram,
		TokenFilterNameCjkWidth,
		TokenFilterNameClassic,
		TokenFilterNameCommonGram,
		TokenFilterNameEdgeNGram,
		TokenFilterNameElision,
		TokenFilterNameGermanNormalization,
		TokenFilterNameHindiNormalization,
		TokenFilterNameIndicNormalization,
		TokenFilterNameKStem,
		TokenFilterNameKeywordRepeat,
		TokenFilterNameLength,
		TokenFilterNameLimit,
		TokenFilterNameLowercase,
		TokenFilterNameNGram,
		TokenFilterNamePersianNormalization,
		TokenFilterNamePhonetic,
		TokenFilterNamePorterStem,
		TokenFilterNameReverse,
		TokenFilterNameScandinavianFoldingNormalization,
		TokenFilterNameScandinavianNormalization,
		TokenFilterNameShingle,
		TokenFilterNameSnowball,
		TokenFilterNameSoraniNormalization,
		TokenFilterNameStemmer,
		TokenFilterNameStopwords,
		TokenFilterNameTrim,
		TokenFilterNameTruncate,
		TokenFilterNameUnique,
		TokenFilterNameUppercase,
		TokenFilterNameWordDelimiter,
	}
}

// VectorEncodingFormat - The encoding format for interpreting vector field contents.
type VectorEncodingFormat string

const (
	// VectorEncodingFormatPackedBit - Encoding format representing bits packed into a wider data type.
	VectorEncodingFormatPackedBit VectorEncodingFormat = "packedBit"
)

// PossibleVectorEncodingFormatValues returns the possible values for the VectorEncodingFormat const type.
func PossibleVectorEncodingFormatValues() []VectorEncodingFormat {
	return []VectorEncodingFormat{	
		VectorEncodingFormatPackedBit,
	}
}

// VectorSearchAlgorithmKind - The algorithm used for indexing and querying.
type VectorSearchAlgorithmKind string

const (
	// VectorSearchAlgorithmKindExhaustiveKnn - Exhaustive KNN algorithm which will perform brute-force search.
	VectorSearchAlgorithmKindExhaustiveKnn VectorSearchAlgorithmKind = "exhaustiveKnn"
	// VectorSearchAlgorithmKindHnsw - HNSW (Hierarchical Navigable Small World), a type of approximate nearest neighbors algorithm.
	VectorSearchAlgorithmKindHnsw VectorSearchAlgorithmKind = "hnsw"
)

// PossibleVectorSearchAlgorithmKindValues returns the possible values for the VectorSearchAlgorithmKind const type.
func PossibleVectorSearchAlgorithmKindValues() []VectorSearchAlgorithmKind {
	return []VectorSearchAlgorithmKind{	
		VectorSearchAlgorithmKindExhaustiveKnn,
		VectorSearchAlgorithmKindHnsw,
	}
}

// VectorSearchAlgorithmMetric - The similarity metric to use for vector comparisons. It is recommended to choose the same
// similarity metric as the embedding model was trained on.
type VectorSearchAlgorithmMetric string

const (
	// VectorSearchAlgorithmMetricCosine - Measures the angle between vectors to quantify their similarity, disregarding magnitude.
// The smaller the angle, the closer the similarity.
	VectorSearchAlgorithmMetricCosine VectorSearchAlgorithmMetric = "cosine"
	// VectorSearchAlgorithmMetricDotProduct - Calculates the sum of element-wise products to gauge alignment and magnitude similarity.
// The larger and more positive, the closer the similarity.
	VectorSearchAlgorithmMetricDotProduct VectorSearchAlgorithmMetric = "dotProduct"
	// VectorSearchAlgorithmMetricEuclidean - Computes the straight-line distance between vectors in a multi-dimensional space.
// The smaller the distance, the closer the similarity.
	VectorSearchAlgorithmMetricEuclidean VectorSearchAlgorithmMetric = "euclidean"
	// VectorSearchAlgorithmMetricHamming - Only applicable to bit-packed binary data types. Determines dissimilarity by counting
// differing positions in binary vectors. The fewer differences, the closer the similarity.
	VectorSearchAlgorithmMetricHamming VectorSearchAlgorithmMetric = "hamming"
)

// PossibleVectorSearchAlgorithmMetricValues returns the possible values for the VectorSearchAlgorithmMetric const type.
func PossibleVectorSearchAlgorithmMetricValues() []VectorSearchAlgorithmMetric {
	return []VectorSearchAlgorithmMetric{	
		VectorSearchAlgorithmMetricCosine,
		VectorSearchAlgorithmMetricDotProduct,
		VectorSearchAlgorithmMetricEuclidean,
		VectorSearchAlgorithmMetricHamming,
	}
}

// VectorSearchCompressionKind - The compression method used for indexing and querying.
type VectorSearchCompressionKind string

const (
	// VectorSearchCompressionKindBinaryQuantization - Binary Quantization, a type of compression method. In binary quantization,
// the original vectors values are compressed to the narrower binary type by discretizing and representing each component
// of a vector using binary values, thereby reducing the overall data size.
	VectorSearchCompressionKindBinaryQuantization VectorSearchCompressionKind = "binaryQuantization"
	// VectorSearchCompressionKindScalarQuantization - Scalar Quantization, a type of compression method. In scalar quantization,
// the original vectors values are compressed to a narrower type by discretizing and representing each component of a vector
// using a reduced set of quantized values, thereby reducing the overall data size.
	VectorSearchCompressionKindScalarQuantization VectorSearchCompressionKind = "scalarQuantization"
)

// PossibleVectorSearchCompressionKindValues returns the possible values for the VectorSearchCompressionKind const type.
func PossibleVectorSearchCompressionKindValues() []VectorSearchCompressionKind {
	return []VectorSearchCompressionKind{	
		VectorSearchCompressionKindBinaryQuantization,
		VectorSearchCompressionKindScalarQuantization,
	}
}

// VectorSearchCompressionTargetDataType - The quantized data type of compressed vector values.
type VectorSearchCompressionTargetDataType string

const (
	VectorSearchCompressionTargetDataTypeInt8 VectorSearchCompressionTargetDataType = "int8"
)

// PossibleVectorSearchCompressionTargetDataTypeValues returns the possible values for the VectorSearchCompressionTargetDataType const type.
func PossibleVectorSearchCompressionTargetDataTypeValues() []VectorSearchCompressionTargetDataType {
	return []VectorSearchCompressionTargetDataType{	
		VectorSearchCompressionTargetDataTypeInt8,
	}
}

// VectorSearchVectorizerKind - The vectorization method to be used during query time.
type VectorSearchVectorizerKind string

const (
	// VectorSearchVectorizerKindAzureOpenAI - Generate embeddings using an Azure OpenAI resource at query time.
	VectorSearchVectorizerKindAzureOpenAI VectorSearchVectorizerKind = "azureOpenAI"
	// VectorSearchVectorizerKindCustomWebAPI - Generate embeddings using a custom web endpoint at query time.
	VectorSearchVectorizerKindCustomWebAPI VectorSearchVectorizerKind = "customWebApi"
)

// PossibleVectorSearchVectorizerKindValues returns the possible values for the VectorSearchVectorizerKind const type.
func PossibleVectorSearchVectorizerKindValues() []VectorSearchVectorizerKind {
	return []VectorSearchVectorizerKind{	
		VectorSearchVectorizerKindAzureOpenAI,
		VectorSearchVectorizerKindCustomWebAPI,
	}
}

// VisualFeature - The strings indicating what visual feature types to return.
type VisualFeature string

const (
	// VisualFeatureAdult - Visual features recognized as adult persons.
	VisualFeatureAdult VisualFeature = "adult"
	// VisualFeatureBrands - Visual features recognized as commercial brands.
	VisualFeatureBrands VisualFeature = "brands"
	// VisualFeatureCategories - Categories.
	VisualFeatureCategories VisualFeature = "categories"
	// VisualFeatureDescription - Description.
	VisualFeatureDescription VisualFeature = "description"
	// VisualFeatureFaces - Visual features recognized as people faces.
	VisualFeatureFaces VisualFeature = "faces"
	// VisualFeatureObjects - Visual features recognized as objects.
	VisualFeatureObjects VisualFeature = "objects"
	// VisualFeatureTags - Tags.
	VisualFeatureTags VisualFeature = "tags"
)

// PossibleVisualFeatureValues returns the possible values for the VisualFeature const type.
func PossibleVisualFeatureValues() []VisualFeature {
	return []VisualFeature{	
		VisualFeatureAdult,
		VisualFeatureBrands,
		VisualFeatureCategories,
		VisualFeatureDescription,
		VisualFeatureFaces,
		VisualFeatureObjects,
		VisualFeatureTags,
	}
}

