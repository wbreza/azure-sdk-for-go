// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azsearch

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// IndexersClient contains the methods for the Indexers group.
// Don't use this type directly, use a constructor function instead.
type IndexersClient struct {
	internal *azcore.Client
	endpoint string
}

// Create - Creates a new indexer.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - indexer - The definition of the indexer to create.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - IndexersClientCreateOptions contains the optional parameters for the IndexersClient.Create method.
func (client *IndexersClient) Create(ctx context.Context, indexer Indexer, requestOptions *RequestOptions, options *IndexersClientCreateOptions) (IndexersClientCreateResponse, error) {
	var err error
	req, err := client.createCreateRequest(ctx, indexer, requestOptions, options)
	if err != nil {
		return IndexersClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexersClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return IndexersClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *IndexersClient) createCreateRequest(ctx context.Context, indexer Indexer, requestOptions *RequestOptions, _ *IndexersClientCreateOptions) (*policy.Request, error) {
	urlPath := "/indexers"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	if err := runtime.MarshalAsJSON(req, indexer); err != nil {
	return nil, err
}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *IndexersClient) createHandleResponse(resp *http.Response) (IndexersClientCreateResponse, error) {
	result := IndexersClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Indexer); err != nil {
		return IndexersClientCreateResponse{}, err
	}
	return result, nil
}

// CreateOrUpdate - Creates a new indexer or updates an indexer if it already exists.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - indexerName - The name of the indexer to create or update.
//   - prefer - For HTTP PUT requests, instructs the service to return the created/updated resource on success.
//   - indexer - The definition of the indexer to create or update.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - IndexersClientCreateOrUpdateOptions contains the optional parameters for the IndexersClient.CreateOrUpdate method.
func (client *IndexersClient) CreateOrUpdate(ctx context.Context, indexerName string, prefer Enum0, indexer Indexer, requestOptions *RequestOptions, options *IndexersClientCreateOrUpdateOptions) (IndexersClientCreateOrUpdateResponse, error) {
	var err error
	req, err := client.createOrUpdateCreateRequest(ctx, indexerName, prefer, indexer, requestOptions, options)
	if err != nil {
		return IndexersClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexersClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return IndexersClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *IndexersClient) createOrUpdateCreateRequest(ctx context.Context, indexerName string, prefer Enum0, indexer Indexer, requestOptions *RequestOptions, options *IndexersClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/indexers('{indexerName}')"
	if indexerName == "" {
		return nil, errors.New("parameter indexerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexerName}", url.PathEscape(indexerName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	if options != nil && options.IfNoneMatch != nil {
		req.Raw().Header["If-None-Match"] = []string{*options.IfNoneMatch}
	}
	req.Raw().Header["Prefer"] = []string{string(prefer)}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	if err := runtime.MarshalAsJSON(req, indexer); err != nil {
	return nil, err
}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *IndexersClient) createOrUpdateHandleResponse(resp *http.Response) (IndexersClientCreateOrUpdateResponse, error) {
	result := IndexersClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Indexer); err != nil {
		return IndexersClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes an indexer.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - indexerName - The name of the indexer to delete.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - IndexersClientDeleteOptions contains the optional parameters for the IndexersClient.Delete method.
func (client *IndexersClient) Delete(ctx context.Context, indexerName string, requestOptions *RequestOptions, options *IndexersClientDeleteOptions) (IndexersClientDeleteResponse, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, indexerName, requestOptions, options)
	if err != nil {
		return IndexersClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexersClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent, http.StatusNotFound) {
		err = runtime.NewResponseError(httpResp)
		return IndexersClientDeleteResponse{}, err
	}
	return IndexersClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *IndexersClient) deleteCreateRequest(ctx context.Context, indexerName string, requestOptions *RequestOptions, options *IndexersClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/indexers('{indexerName}')"
	if indexerName == "" {
		return nil, errors.New("parameter indexerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexerName}", url.PathEscape(indexerName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	if options != nil && options.IfNoneMatch != nil {
		req.Raw().Header["If-None-Match"] = []string{*options.IfNoneMatch}
	}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// Get - Retrieves an indexer definition.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - indexerName - The name of the indexer to retrieve.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - IndexersClientGetOptions contains the optional parameters for the IndexersClient.Get method.
func (client *IndexersClient) Get(ctx context.Context, indexerName string, requestOptions *RequestOptions, options *IndexersClientGetOptions) (IndexersClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, indexerName, requestOptions, options)
	if err != nil {
		return IndexersClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexersClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IndexersClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *IndexersClient) getCreateRequest(ctx context.Context, indexerName string, requestOptions *RequestOptions, _ *IndexersClientGetOptions) (*policy.Request, error) {
	urlPath := "/indexers('{indexerName}')"
	if indexerName == "" {
		return nil, errors.New("parameter indexerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexerName}", url.PathEscape(indexerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *IndexersClient) getHandleResponse(resp *http.Response) (IndexersClientGetResponse, error) {
	result := IndexersClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Indexer); err != nil {
		return IndexersClientGetResponse{}, err
	}
	return result, nil
}

// GetStatus - Returns the current status and execution history of an indexer.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - indexerName - The name of the indexer for which to retrieve status.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - IndexersClientGetStatusOptions contains the optional parameters for the IndexersClient.GetStatus method.
func (client *IndexersClient) GetStatus(ctx context.Context, indexerName string, requestOptions *RequestOptions, options *IndexersClientGetStatusOptions) (IndexersClientGetStatusResponse, error) {
	var err error
	req, err := client.getStatusCreateRequest(ctx, indexerName, requestOptions, options)
	if err != nil {
		return IndexersClientGetStatusResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexersClientGetStatusResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IndexersClientGetStatusResponse{}, err
	}
	resp, err := client.getStatusHandleResponse(httpResp)
	return resp, err
}

// getStatusCreateRequest creates the GetStatus request.
func (client *IndexersClient) getStatusCreateRequest(ctx context.Context, indexerName string, requestOptions *RequestOptions, _ *IndexersClientGetStatusOptions) (*policy.Request, error) {
	urlPath := "/indexers('{indexerName}')/search.status"
	if indexerName == "" {
		return nil, errors.New("parameter indexerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexerName}", url.PathEscape(indexerName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// getStatusHandleResponse handles the GetStatus response.
func (client *IndexersClient) getStatusHandleResponse(resp *http.Response) (IndexersClientGetStatusResponse, error) {
	result := IndexersClientGetStatusResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.IndexerStatus2); err != nil {
		return IndexersClientGetStatusResponse{}, err
	}
	return result, nil
}

// List - Lists all indexers available for a search service.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - options - IndexersClientListOptions contains the optional parameters for the IndexersClient.List method.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
func (client *IndexersClient) List(ctx context.Context, options *IndexersClientListOptions, requestOptions *RequestOptions) (IndexersClientListResponse, error) {
	var err error
	req, err := client.listCreateRequest(ctx, options, requestOptions)
	if err != nil {
		return IndexersClientListResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexersClientListResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IndexersClientListResponse{}, err
	}
	resp, err := client.listHandleResponse(httpResp)
	return resp, err
}

// listCreateRequest creates the List request.
func (client *IndexersClient) listCreateRequest(ctx context.Context, options *IndexersClientListOptions, requestOptions *RequestOptions) (*policy.Request, error) {
	urlPath := "/indexers"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Select != nil {
		reqQP.Set("$select", *options.Select)
	}
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *IndexersClient) listHandleResponse(resp *http.Response) (IndexersClientListResponse, error) {
	result := IndexersClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ListIndexersResult); err != nil {
		return IndexersClientListResponse{}, err
	}
	return result, nil
}

// Reset - Resets the change tracking state associated with an indexer.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - indexerName - The name of the indexer to reset.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - IndexersClientResetOptions contains the optional parameters for the IndexersClient.Reset method.
func (client *IndexersClient) Reset(ctx context.Context, indexerName string, requestOptions *RequestOptions, options *IndexersClientResetOptions) (IndexersClientResetResponse, error) {
	var err error
	req, err := client.resetCreateRequest(ctx, indexerName, requestOptions, options)
	if err != nil {
		return IndexersClientResetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexersClientResetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return IndexersClientResetResponse{}, err
	}
	return IndexersClientResetResponse{}, nil
}

// resetCreateRequest creates the Reset request.
func (client *IndexersClient) resetCreateRequest(ctx context.Context, indexerName string, requestOptions *RequestOptions, _ *IndexersClientResetOptions) (*policy.Request, error) {
	urlPath := "/indexers('{indexerName}')/search.reset"
	if indexerName == "" {
		return nil, errors.New("parameter indexerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexerName}", url.PathEscape(indexerName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// Run - Runs an indexer on-demand.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - indexerName - The name of the indexer to run.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - IndexersClientRunOptions contains the optional parameters for the IndexersClient.Run method.
func (client *IndexersClient) Run(ctx context.Context, indexerName string, requestOptions *RequestOptions, options *IndexersClientRunOptions) (IndexersClientRunResponse, error) {
	var err error
	req, err := client.runCreateRequest(ctx, indexerName, requestOptions, options)
	if err != nil {
		return IndexersClientRunResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexersClientRunResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {
		err = runtime.NewResponseError(httpResp)
		return IndexersClientRunResponse{}, err
	}
	return IndexersClientRunResponse{}, nil
}

// runCreateRequest creates the Run request.
func (client *IndexersClient) runCreateRequest(ctx context.Context, indexerName string, requestOptions *RequestOptions, _ *IndexersClientRunOptions) (*policy.Request, error) {
	urlPath := "/indexers('{indexerName}')/search.run"
	if indexerName == "" {
		return nil, errors.New("parameter indexerName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{indexerName}", url.PathEscape(indexerName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

