// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azsearch

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// DataSourcesClient contains the methods for the DataSources group.
// Don't use this type directly, use a constructor function instead.
type DataSourcesClient struct {
	internal *azcore.Client
	endpoint string
}

// Create - Creates a new datasource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - dataSource - The definition of the datasource to create.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - DataSourcesClientCreateOptions contains the optional parameters for the DataSourcesClient.Create method.
func (client *DataSourcesClient) Create(ctx context.Context, dataSource IndexerDataSource, requestOptions *RequestOptions, options *DataSourcesClientCreateOptions) (DataSourcesClientCreateResponse, error) {
	var err error
	req, err := client.createCreateRequest(ctx, dataSource, requestOptions, options)
	if err != nil {
		return DataSourcesClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataSourcesClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return DataSourcesClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *DataSourcesClient) createCreateRequest(ctx context.Context, dataSource IndexerDataSource, requestOptions *RequestOptions, _ *DataSourcesClientCreateOptions) (*policy.Request, error) {
	urlPath := "/datasources"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	if err := runtime.MarshalAsJSON(req, dataSource); err != nil {
	return nil, err
}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *DataSourcesClient) createHandleResponse(resp *http.Response) (DataSourcesClientCreateResponse, error) {
	result := DataSourcesClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.IndexerDataSource); err != nil {
		return DataSourcesClientCreateResponse{}, err
	}
	return result, nil
}

// CreateOrUpdate - Creates a new datasource or updates a datasource if it already exists.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - dataSourceName - The name of the datasource to create or update.
//   - prefer - For HTTP PUT requests, instructs the service to return the created/updated resource on success.
//   - dataSource - The definition of the datasource to create or update.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - DataSourcesClientCreateOrUpdateOptions contains the optional parameters for the DataSourcesClient.CreateOrUpdate
//     method.
func (client *DataSourcesClient) CreateOrUpdate(ctx context.Context, dataSourceName string, prefer Enum0, dataSource IndexerDataSource, requestOptions *RequestOptions, options *DataSourcesClientCreateOrUpdateOptions) (DataSourcesClientCreateOrUpdateResponse, error) {
	var err error
	req, err := client.createOrUpdateCreateRequest(ctx, dataSourceName, prefer, dataSource, requestOptions, options)
	if err != nil {
		return DataSourcesClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataSourcesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return DataSourcesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *DataSourcesClient) createOrUpdateCreateRequest(ctx context.Context, dataSourceName string, prefer Enum0, dataSource IndexerDataSource, requestOptions *RequestOptions, options *DataSourcesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/datasources('{dataSourceName}')"
	if dataSourceName == "" {
		return nil, errors.New("parameter dataSourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataSourceName}", url.PathEscape(dataSourceName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	if options != nil && options.IfNoneMatch != nil {
		req.Raw().Header["If-None-Match"] = []string{*options.IfNoneMatch}
	}
	req.Raw().Header["Prefer"] = []string{string(prefer)}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	if err := runtime.MarshalAsJSON(req, dataSource); err != nil {
	return nil, err
}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *DataSourcesClient) createOrUpdateHandleResponse(resp *http.Response) (DataSourcesClientCreateOrUpdateResponse, error) {
	result := DataSourcesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.IndexerDataSource); err != nil {
		return DataSourcesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes a datasource.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - dataSourceName - The name of the datasource to delete.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - DataSourcesClientDeleteOptions contains the optional parameters for the DataSourcesClient.Delete method.
func (client *DataSourcesClient) Delete(ctx context.Context, dataSourceName string, requestOptions *RequestOptions, options *DataSourcesClientDeleteOptions) (DataSourcesClientDeleteResponse, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, dataSourceName, requestOptions, options)
	if err != nil {
		return DataSourcesClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataSourcesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent, http.StatusNotFound) {
		err = runtime.NewResponseError(httpResp)
		return DataSourcesClientDeleteResponse{}, err
	}
	return DataSourcesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *DataSourcesClient) deleteCreateRequest(ctx context.Context, dataSourceName string, requestOptions *RequestOptions, options *DataSourcesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/datasources('{dataSourceName}')"
	if dataSourceName == "" {
		return nil, errors.New("parameter dataSourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataSourceName}", url.PathEscape(dataSourceName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	if options != nil && options.IfNoneMatch != nil {
		req.Raw().Header["If-None-Match"] = []string{*options.IfNoneMatch}
	}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// Get - Retrieves a datasource definition.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - dataSourceName - The name of the datasource to retrieve.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - DataSourcesClientGetOptions contains the optional parameters for the DataSourcesClient.Get method.
func (client *DataSourcesClient) Get(ctx context.Context, dataSourceName string, requestOptions *RequestOptions, options *DataSourcesClientGetOptions) (DataSourcesClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, dataSourceName, requestOptions, options)
	if err != nil {
		return DataSourcesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataSourcesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DataSourcesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *DataSourcesClient) getCreateRequest(ctx context.Context, dataSourceName string, requestOptions *RequestOptions, _ *DataSourcesClientGetOptions) (*policy.Request, error) {
	urlPath := "/datasources('{dataSourceName}')"
	if dataSourceName == "" {
		return nil, errors.New("parameter dataSourceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{dataSourceName}", url.PathEscape(dataSourceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *DataSourcesClient) getHandleResponse(resp *http.Response) (DataSourcesClientGetResponse, error) {
	result := DataSourcesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.IndexerDataSource); err != nil {
		return DataSourcesClientGetResponse{}, err
	}
	return result, nil
}

// List - Lists all datasources available for a search service.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - options - DataSourcesClientListOptions contains the optional parameters for the DataSourcesClient.List method.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
func (client *DataSourcesClient) List(ctx context.Context, options *DataSourcesClientListOptions, requestOptions *RequestOptions) (DataSourcesClientListResponse, error) {
	var err error
	req, err := client.listCreateRequest(ctx, options, requestOptions)
	if err != nil {
		return DataSourcesClientListResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return DataSourcesClientListResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return DataSourcesClientListResponse{}, err
	}
	resp, err := client.listHandleResponse(httpResp)
	return resp, err
}

// listCreateRequest creates the List request.
func (client *DataSourcesClient) listCreateRequest(ctx context.Context, options *DataSourcesClientListOptions, requestOptions *RequestOptions) (*policy.Request, error) {
	urlPath := "/datasources"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Select != nil {
		reqQP.Set("$select", *options.Select)
	}
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *DataSourcesClient) listHandleResponse(resp *http.Response) (DataSourcesClientListResponse, error) {
	result := DataSourcesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ListDataSourcesResult); err != nil {
		return DataSourcesClientListResponse{}, err
	}
	return result, nil
}

