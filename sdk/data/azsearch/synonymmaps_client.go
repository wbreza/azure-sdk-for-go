// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azsearch

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SynonymMapsClient contains the methods for the SynonymMaps group.
// Don't use this type directly, use a constructor function instead.
type SynonymMapsClient struct {
	internal *azcore.Client
	endpoint string
}

// Create - Creates a new synonym map.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - synonymMap - The definition of the synonym map to create.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - SynonymMapsClientCreateOptions contains the optional parameters for the SynonymMapsClient.Create method.
func (client *SynonymMapsClient) Create(ctx context.Context, synonymMap SynonymMap, requestOptions *RequestOptions, options *SynonymMapsClientCreateOptions) (SynonymMapsClientCreateResponse, error) {
	var err error
	req, err := client.createCreateRequest(ctx, synonymMap, requestOptions, options)
	if err != nil {
		return SynonymMapsClientCreateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SynonymMapsClientCreateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return SynonymMapsClientCreateResponse{}, err
	}
	resp, err := client.createHandleResponse(httpResp)
	return resp, err
}

// createCreateRequest creates the Create request.
func (client *SynonymMapsClient) createCreateRequest(ctx context.Context, synonymMap SynonymMap, requestOptions *RequestOptions, _ *SynonymMapsClientCreateOptions) (*policy.Request, error) {
	urlPath := "/synonymmaps"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	if err := runtime.MarshalAsJSON(req, synonymMap); err != nil {
	return nil, err
}
	return req, nil
}

// createHandleResponse handles the Create response.
func (client *SynonymMapsClient) createHandleResponse(resp *http.Response) (SynonymMapsClientCreateResponse, error) {
	result := SynonymMapsClientCreateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SynonymMap); err != nil {
		return SynonymMapsClientCreateResponse{}, err
	}
	return result, nil
}

// CreateOrUpdate - Creates a new synonym map or updates a synonym map if it already exists.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - synonymMapName - The name of the synonym map to create or update.
//   - prefer - For HTTP PUT requests, instructs the service to return the created/updated resource on success.
//   - synonymMap - The definition of the synonym map to create or update.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - SynonymMapsClientCreateOrUpdateOptions contains the optional parameters for the SynonymMapsClient.CreateOrUpdate
//     method.
func (client *SynonymMapsClient) CreateOrUpdate(ctx context.Context, synonymMapName string, prefer Enum0, synonymMap SynonymMap, requestOptions *RequestOptions, options *SynonymMapsClientCreateOrUpdateOptions) (SynonymMapsClientCreateOrUpdateResponse, error) {
	var err error
	req, err := client.createOrUpdateCreateRequest(ctx, synonymMapName, prefer, synonymMap, requestOptions, options)
	if err != nil {
		return SynonymMapsClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SynonymMapsClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return SynonymMapsClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *SynonymMapsClient) createOrUpdateCreateRequest(ctx context.Context, synonymMapName string, prefer Enum0, synonymMap SynonymMap, requestOptions *RequestOptions, options *SynonymMapsClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/synonymmaps('{synonymMapName}')"
	if synonymMapName == "" {
		return nil, errors.New("parameter synonymMapName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{synonymMapName}", url.PathEscape(synonymMapName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	if options != nil && options.IfNoneMatch != nil {
		req.Raw().Header["If-None-Match"] = []string{*options.IfNoneMatch}
	}
	req.Raw().Header["Prefer"] = []string{string(prefer)}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	if err := runtime.MarshalAsJSON(req, synonymMap); err != nil {
	return nil, err
}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *SynonymMapsClient) createOrUpdateHandleResponse(resp *http.Response) (SynonymMapsClientCreateOrUpdateResponse, error) {
	result := SynonymMapsClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SynonymMap); err != nil {
		return SynonymMapsClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes a synonym map.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - synonymMapName - The name of the synonym map to delete.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - SynonymMapsClientDeleteOptions contains the optional parameters for the SynonymMapsClient.Delete method.
func (client *SynonymMapsClient) Delete(ctx context.Context, synonymMapName string, requestOptions *RequestOptions, options *SynonymMapsClientDeleteOptions) (SynonymMapsClientDeleteResponse, error) {
	var err error
	req, err := client.deleteCreateRequest(ctx, synonymMapName, requestOptions, options)
	if err != nil {
		return SynonymMapsClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SynonymMapsClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusNoContent, http.StatusNotFound) {
		err = runtime.NewResponseError(httpResp)
		return SynonymMapsClientDeleteResponse{}, err
	}
	return SynonymMapsClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SynonymMapsClient) deleteCreateRequest(ctx context.Context, synonymMapName string, requestOptions *RequestOptions, options *SynonymMapsClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/synonymmaps('{synonymMapName}')"
	if synonymMapName == "" {
		return nil, errors.New("parameter synonymMapName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{synonymMapName}", url.PathEscape(synonymMapName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.IfMatch != nil {
		req.Raw().Header["If-Match"] = []string{*options.IfMatch}
	}
	if options != nil && options.IfNoneMatch != nil {
		req.Raw().Header["If-None-Match"] = []string{*options.IfNoneMatch}
	}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// Get - Retrieves a synonym map definition.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - synonymMapName - The name of the synonym map to retrieve.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
//   - options - SynonymMapsClientGetOptions contains the optional parameters for the SynonymMapsClient.Get method.
func (client *SynonymMapsClient) Get(ctx context.Context, synonymMapName string, requestOptions *RequestOptions, options *SynonymMapsClientGetOptions) (SynonymMapsClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, synonymMapName, requestOptions, options)
	if err != nil {
		return SynonymMapsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SynonymMapsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SynonymMapsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SynonymMapsClient) getCreateRequest(ctx context.Context, synonymMapName string, requestOptions *RequestOptions, _ *SynonymMapsClientGetOptions) (*policy.Request, error) {
	urlPath := "/synonymmaps('{synonymMapName}')"
	if synonymMapName == "" {
		return nil, errors.New("parameter synonymMapName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{synonymMapName}", url.PathEscape(synonymMapName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SynonymMapsClient) getHandleResponse(resp *http.Response) (SynonymMapsClientGetResponse, error) {
	result := SynonymMapsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SynonymMap); err != nil {
		return SynonymMapsClientGetResponse{}, err
	}
	return result, nil
}

// List - Lists all synonym maps available for a search service.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - options - SynonymMapsClientListOptions contains the optional parameters for the SynonymMapsClient.List method.
//   - RequestOptions - RequestOptions contains a group of parameters for the DataSourcesClient.CreateOrUpdate method.
func (client *SynonymMapsClient) List(ctx context.Context, options *SynonymMapsClientListOptions, requestOptions *RequestOptions) (SynonymMapsClientListResponse, error) {
	var err error
	req, err := client.listCreateRequest(ctx, options, requestOptions)
	if err != nil {
		return SynonymMapsClientListResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SynonymMapsClientListResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SynonymMapsClientListResponse{}, err
	}
	resp, err := client.listHandleResponse(httpResp)
	return resp, err
}

// listCreateRequest creates the List request.
func (client *SynonymMapsClient) listCreateRequest(ctx context.Context, options *SynonymMapsClientListOptions, requestOptions *RequestOptions) (*policy.Request, error) {
	urlPath := "/synonymmaps"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.endpoint, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.Select != nil {
		reqQP.Set("$select", *options.Select)
	}
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if requestOptions != nil && requestOptions.XMSClientRequestID != nil {
		req.Raw().Header["x-ms-client-request-id"] = []string{*requestOptions.XMSClientRequestID}
	}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SynonymMapsClient) listHandleResponse(resp *http.Response) (SynonymMapsClientListResponse, error) {
	result := SynonymMapsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ListSynonymMapsResult); err != nil {
		return SynonymMapsClientListResponse{}, err
	}
	return result, nil
}

