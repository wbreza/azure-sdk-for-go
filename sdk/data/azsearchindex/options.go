// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azsearchindex

// AutocompleteOptions contains a group of parameters for the DocumentsClient.AutocompleteGet method.
type AutocompleteOptions struct {
	// Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext'
// to use the current context while producing auto-completed terms.
	AutocompleteMode *AutocompleteMode

	// An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
	Filter *string

	// A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.
	HighlightPostTag *string

	// A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.
	HighlightPreTag *string

	// A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order
// for the query to be reported as a success. This parameter can be useful for
// ensuring search availability even for services with only one replica. The default is 80.
	MinimumCoverage *float64

	// The list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified
// suggester.
	SearchFields []string

	// The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
	Top *int32

	// A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query
// will find terms even if there's a substituted or missing character in the
// search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete
// queries are slower and consume more resources.
	UseFuzzyMatching *bool
}

// DocumentsClientAutocompleteGetOptions contains the optional parameters for the DocumentsClient.AutocompleteGet method.
type DocumentsClientAutocompleteGetOptions struct {
	// placeholder for future optional parameters
}

// DocumentsClientAutocompletePostOptions contains the optional parameters for the DocumentsClient.AutocompletePost method.
type DocumentsClientAutocompletePostOptions struct {
	// placeholder for future optional parameters
}

// DocumentsClientCountOptions contains the optional parameters for the DocumentsClient.Count method.
type DocumentsClientCountOptions struct {
	// placeholder for future optional parameters
}

// DocumentsClientGetOptions contains the optional parameters for the DocumentsClient.Get method.
type DocumentsClientGetOptions struct {
	// List of field names to retrieve for the document; Any field not retrieved will be missing from the returned document.
	SelectedFields []string
}

// DocumentsClientIndexOptions contains the optional parameters for the DocumentsClient.Index method.
type DocumentsClientIndexOptions struct {
	// placeholder for future optional parameters
}

// DocumentsClientSearchGetOptions contains the optional parameters for the DocumentsClient.SearchGet method.
type DocumentsClientSearchGetOptions struct {
	// A full-text search query expression; Use "*" or omit this parameter to match all documents.
	SearchText *string
}

// DocumentsClientSearchPostOptions contains the optional parameters for the DocumentsClient.SearchPost method.
type DocumentsClientSearchPostOptions struct {
	// placeholder for future optional parameters
}

// DocumentsClientSuggestGetOptions contains the optional parameters for the DocumentsClient.SuggestGet method.
type DocumentsClientSuggestGetOptions struct {
	// placeholder for future optional parameters
}

// DocumentsClientSuggestPostOptions contains the optional parameters for the DocumentsClient.SuggestPost method.
type DocumentsClientSuggestPostOptions struct {
	// placeholder for future optional parameters
}

// RequestOptions contains a group of parameters for the DocumentsClient.Count method.
type RequestOptions struct {
	// The tracking ID sent with the request to help with debugging.
	XMSClientRequestID *string
}

// SearchOptions contains a group of parameters for the DocumentsClient.SearchGet method.
type SearchOptions struct {
	// This parameter is only valid if the query type is semantic. If set, the query returns answers extracted from key passages
// in the highest ranked documents. The number of answers returned can be
// configured by appending the pipe character | followed by the count-<number of answers> option after the answers parameter
// value, such as extractive|count-3. Default count is 1. The confidence
// threshold can be configured by appending the pipe character | followed by the threshold-<confidence threshold> option after
// the answers parameter value, such as extractive|threshold-0.9. Default
// threshold is 0.7.
	Answers *QueryAnswerType

	// This parameter is only valid if the query type is semantic. If set, the query returns captions extracted from key passages
// in the highest ranked documents. When Captions is set to extractive,
// highlighting is enabled by default, and can be configured by appending the pipe character | followed by the highlight-<true/false>
// option, such as extractive|highlight-true. Defaults to None.
	Captions *QueryCaptionType

	// The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed
// by a comma-separated list of name:value pairs.
	Facets []string

	// The OData $filter expression to apply to the search query.
	Filter *string

	// The list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
	HighlightFields []string

	// A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is </em>.
	HighlightPostTag *string

	// A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is <em>.
	HighlightPreTag *string

	// A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have
// a performance impact. Note that the count returned is an approximation.
	IncludeTotalResultCount *bool

	// A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the
// query to be reported as a success. This parameter can be useful for ensuring
// search availability even for services with only one replica. The default is 100.
	MinimumCoverage *float64

	// The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call
// to either the geo.distance() or the search.score() functions. Each expression
// can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will
// be broken by the match scores of documents. If no OrderBy is specified, the
// default sort order is descending by document match score. There can be at most 32 $orderby clauses.
	OrderBy []string

	// A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene
// query syntax.
	QueryType *QueryType

	// The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values.
// For example, if the scoring profile defines a function with a
// parameter called 'mylocation' the parameter string would be "mylocation--122.2,44.8" (without the quotes).
	ScoringParameters []string

	// The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
	ScoringProfile *string

	// A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent
// scoring, or locally, for lower latency.
	ScoringStatistics *ScoringStatistics

	// The list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression)
// in a full Lucene query, the field names of each fielded search expression take
// precedence over any field names listed in this parameter.
	SearchFields []string

	// A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
	SearchMode *SearchMode

	// The list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.
	Select []string

	// The name of the semantic configuration that lists which fields should be used for semantic ranking, captions, highlights,
// and answers
	SemanticConfiguration *string

	// Allows the user to choose whether a semantic call should fail completely, or to return partial results (default).
	SemanticErrorHandling *SemanticErrorMode

	// Allows the user to set an upper bound on the amount of time it takes for semantic enrichment to finish processing before
// the request fails.
	SemanticMaxWaitInMilliseconds *int32

	// Allows setting a separate search query that will be solely used for semantic reranking, semantic captions and semantic
// answers. Is useful for scenarios where there is a need to use different queries
// between the base retrieval and ranking phase, and the L2 semantic phase.
	SemanticQuery *string

	// A value to be used to create a sticky session, which can help to get more consistent results. As long as the same sessionId
// is used, a best-effort attempt will be made to target the same replica set.
// Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across
// replicas and adversely affect the performance of the search service. The value
// used as sessionId cannot start with a '_' character.
	SessionID *string

	// The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence,
// but cannot use $skip due to this limitation, consider using $orderby on a
// totally-ordered key and $filter with a range query instead.
	Skip *int32

	// The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of
// search results. If results are truncated due to server-side paging, the response
// will include a continuation token that can be used to issue another Search request for the next page of results.
	Top *int32
}

// SuggestOptions contains a group of parameters for the DocumentsClient.SuggestGet method.
type SuggestOptions struct {
	// An OData expression that filters the documents considered for suggestions.
	Filter *string

	// A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions
// is disabled.
	HighlightPostTag *string

	// A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions
// is disabled.
	HighlightPreTag *string

	// A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestions query in order
// for the query to be reported as a success. This parameter can be useful for
// ensuring search availability even for services with only one replica. The default is 80.
	MinimumCoverage *float64

	// The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call
// to either the geo.distance() or the search.score() functions. Each expression
// can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will
// be broken by the match scores of documents. If no $orderby is specified, the
// default sort order is descending by document match score. There can be at most 32 $orderby clauses.
	OrderBy []string

	// The list of field names to search for the specified search text. Target fields must be included in the specified suggester.
	SearchFields []string

	// The list of fields to retrieve. If unspecified, only the key field will be included in the results.
	Select []string

	// The number of suggestions to retrieve. The value must be a number between 1 and 100. The default is 5.
	Top *int32

	// A value indicating whether to use fuzzy matching for the suggestions query. Default is false. When set to true, the query
// will find terms even if there's a substituted or missing character in the
// search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestions
// queries are slower and consume more resources.
	UseFuzzyMatching *bool
}

