// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azsearchindex

// AutocompleteItem - The result of Autocomplete requests.
type AutocompleteItem struct {
	// READ-ONLY; The query along with the completed term.
	QueryPlusText *string

	// READ-ONLY; The completed term.
	Text *string
}

// AutocompleteRequest - Parameters for fuzzy matching, and other autocomplete query behaviors.
type AutocompleteRequest struct {
	// REQUIRED; The search text on which to base autocomplete results.
	SearchText *string

	// REQUIRED; The name of the suggester as specified in the suggesters collection that's part of the index definition.
	SuggesterName *string

	// Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext'
// to use the current context while producing auto-completed terms.
	AutocompleteMode *AutocompleteMode

	// An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
	Filter *string

	// A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.
	HighlightPostTag *string

	// A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.
	HighlightPreTag *string

	// A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order
// for the query to be reported as a success. This parameter can be useful for
// ensuring search availability even for services with only one replica. The default is 80.
	MinimumCoverage *float64

	// The comma-separated list of field names to consider when querying for auto-completed terms. Target fields must be included
// in the specified suggester.
	SearchFields *string

	// The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
	Top *int32

	// A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query
// will autocomplete terms even if there's a substituted or missing character in
// the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete
// queries are slower and consume more resources.
	UseFuzzyMatching *bool
}

// AutocompleteResult - The result of Autocomplete query.
type AutocompleteResult struct {
	// READ-ONLY; The list of returned Autocompleted items.
	Results []*AutocompleteItem

	// READ-ONLY; A value indicating the percentage of the index that was considered by the autocomplete request, or null if minimumCoverage
// was not specified in the request.
	Coverage *float64
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info any

	// READ-ONLY; The additional info type.
	Type *string
}

// ErrorDetail - The error detail.
type ErrorDetail struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo

	// READ-ONLY; The error code.
	Code *string

	// READ-ONLY; The error details.
	Details []*ErrorDetail

	// READ-ONLY; The error message.
	Message *string

	// READ-ONLY; The error target.
	Target *string
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations.
// (This also follows the OData error response format.).
type ErrorResponse struct {
	// The error object.
	Error *ErrorDetail
}

// FacetResult - A single bucket of a facet query result. Reports the number of documents with a field value falling within
// a particular range or having a particular value or interval.
type FacetResult struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// READ-ONLY; The approximate count of documents falling within the bucket described by this facet.
	Count *int64
}

// IndexAction - Represents an index action that operates on a document.
type IndexAction struct {
	// The operation to perform on a document in an indexing batch.
	ActionType *IndexActionType

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
}

// IndexBatch - Contains a batch of document write actions to send to the index.
type IndexBatch struct {
	// REQUIRED; The actions in the batch.
	Actions []*IndexAction
}

// IndexDocumentsResult - Response containing the status of operations for all documents in the indexing request.
type IndexDocumentsResult struct {
	// READ-ONLY; The list of status information for each document in the indexing request.
	Results []*IndexingResult
}

// IndexingResult - Status of an indexing operation for a single document.
type IndexingResult struct {
	// READ-ONLY; The key of a document that was in the indexing request.
	Key *string

	// READ-ONLY; The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201
// for successful document creation, 400 for a malformed input document, 404 for document
// not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too
// busy.
	StatusCode *int32

	// READ-ONLY; A value indicating whether the indexing operation succeeded for the document identified by the key.
	Succeeded *bool

	// READ-ONLY; The error message explaining why the indexing operation failed for the document identified by the key; null
// if indexing succeeded.
	ErrorMessage *string
}

// QueryAnswerResult - An answer is a text passage extracted from the contents of the most relevant documents that matched
// the query. Answers are extracted from the top search results. Answer candidates are scored and the
// top answers are selected.
type QueryAnswerResult struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// READ-ONLY; Same text passage as in the Text property with highlighted text phrases most relevant to the query.
	Highlights *string

	// READ-ONLY; The key of the document the answer was extracted from.
	Key *string

	// READ-ONLY; The score value represents how relevant the answer is to the query relative to other answers returned for the
// query.
	Score *float64

	// READ-ONLY; The text passage extracted from the document contents as the answer.
	Text *string
}

// QueryCaptionResult - Captions are the most representative passages from the document relatively to the search query. They
// are often used as document summary. Captions are only returned for queries of type semantic.
type QueryCaptionResult struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// READ-ONLY; Same text passage as in the Text property with highlighted phrases most relevant to the query.
	Highlights *string

	// READ-ONLY; A representative text passage extracted from the document most relevant to the search query.
	Text *string
}

// SearchDocumentsResult - Response containing search results from an index.
type SearchDocumentsResult struct {
	// READ-ONLY; The sequence of results returned by the query.
	Results []*SearchResult

	// READ-ONLY; The answers query results for the search operation; null if the answers query parameter was not specified or
// set to 'none'.
	Answers []*QueryAnswerResult

	// READ-ONLY; The total count of results found by the search operation, or null if the count was not requested. If present,
// the count may be greater than the number of results in this response. This can happen if
// you use the $top or $skip parameters, or if the query can't return all the requested documents in a single response.
	Count *int64

	// READ-ONLY; A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was
// not specified in the request.
	Coverage *float64

	// READ-ONLY; The facet query results for the search operation, organized as a collection of buckets for each faceted field;
// null if the query did not include any facet expressions.
	Facets map[string][]*FacetResult

	// READ-ONLY; Continuation URL returned when the query can't return all the requested results in a single response. You can
// use this URL to formulate another GET or POST Search request to get the next part of the
// search response. Make sure to use the same verb (GET or POST) as the request that produced this response.
	NextLink *string

	// READ-ONLY; Continuation JSON payload returned when the query can't return all the requested results in a single response.
// You can use this JSON along with @odata.nextLink to formulate another POST Search request
// to get the next part of the search response.
	NextPageParameters *SearchRequest

	// READ-ONLY; Reason that a partial response was returned for a semantic ranking request.
	SemanticPartialResponseReason *SemanticErrorReason

	// READ-ONLY; Type of partial response that was returned for a semantic ranking request.
	SemanticPartialResponseType *SemanticSearchResultsType
}

// SearchRequest - Parameters for filtering, sorting, faceting, paging, and other search query behaviors.
type SearchRequest struct {
	// A value that specifies whether answers should be returned as part of the search response.
	Answers *QueryAnswerType

	// A value that specifies whether captions should be returned as part of the search response.
	Captions *QueryCaptionType

	// The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed
// by a comma-separated list of name:value pairs.
	Facets []*string

	// The OData $filter expression to apply to the search query.
	Filter *string

	// The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
	HighlightFields *string

	// A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is </em>.
	HighlightPostTag *string

	// A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is <em>.
	HighlightPreTag *string

	// A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have
// a performance impact. Note that the count returned is an approximation.
	IncludeTotalResultCount *bool

	// A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the
// query to be reported as a success. This parameter can be useful for ensuring
// search availability even for services with only one replica. The default is 100.
	MinimumCoverage *float64

	// The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field
// name or a call to either the geo.distance() or the search.score() functions.
// Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending
// order. Ties will be broken by the match scores of documents. If no $orderby is
// specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
	OrderBy *string

	// A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene
// query syntax.
	QueryType *QueryType

	// The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values.
// For example, if the scoring profile defines a function with a
// parameter called 'mylocation' the parameter string would be "mylocation--122.2,44.8" (without the quotes).
	ScoringParameters []*string

	// The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
	ScoringProfile *string

	// A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent
// scoring, or locally, for lower latency. The default is 'local'. Use
// 'global' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency
// of search queries.
	ScoringStatistics *ScoringStatistics

	// The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression)
// in a full Lucene query, the field names of each fielded search
// expression take precedence over any field names listed in this parameter.
	SearchFields *string

	// A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
	SearchMode *SearchMode

	// A full-text search query expression; Use "*" or omit this parameter to match all documents.
	SearchText *string

	// The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.
	Select *string

	// The name of a semantic configuration that will be used when processing documents for queries of type semantic.
	SemanticConfiguration *string

	// Allows the user to choose whether a semantic call should fail completely (default / current behavior), or to return partial
// results.
	SemanticErrorHandling *SemanticErrorMode

	// Allows the user to set an upper bound on the amount of time it takes for semantic enrichment to finish processing before
// the request fails.
	SemanticMaxWaitInMilliseconds *int32

	// Allows setting a separate search query that will be solely used for semantic reranking, semantic captions and semantic
// answers. Is useful for scenarios where there is a need to use different queries
// between the base retrieval and ranking phase, and the L2 semantic phase.
	SemanticQuery *string

	// A value to be used to create a sticky session, which can help getting more consistent results. As long as the same sessionId
// is used, a best-effort attempt will be made to target the same replica set.
// Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across
// replicas and adversely affect the performance of the search service. The value
// used as sessionId cannot start with a '_' character.
	SessionID *string

	// The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence,
// but cannot use skip due to this limitation, consider using orderby on a
// totally-ordered key and filter with a range query instead.
	Skip *int32

	// The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of
// search results. If results are truncated due to server-side paging, the response
// will include a continuation token that can be used to issue another Search request for the next page of results.
	Top *int32

	// Determines whether or not filters are applied before or after the vector search is performed. Default is 'preFilter' for
// new indexes.
	VectorFilterMode *VectorFilterMode

	// The query parameters for vector and hybrid search queries.
	VectorQueries []VectorQueryClassification
}

// SearchResult - Contains a document found by a search query, plus associated metadata.
type SearchResult struct {
	// READ-ONLY; The relevance score of the document compared to other documents returned by the query.
	Score *float64

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// READ-ONLY; Captions are the most representative passages from the document relatively to the search query. They are often
// used as document summary. Captions are only returned for queries of type 'semantic'.
	Captions []*QueryCaptionResult

	// READ-ONLY; Text fragments from the document that indicate the matching search terms, organized by each applicable field;
// null if hit highlighting was not enabled for the query.
	Highlights map[string][]*string

	// READ-ONLY; The relevance score computed by the semantic ranker for the top search results. Search results are sorted by
// the RerankerScore first and then by the Score. RerankerScore is only returned for queries
// of type 'semantic'.
	RerankerScore *float64
}

// SuggestDocumentsResult - Response containing suggestion query results from an index.
type SuggestDocumentsResult struct {
	// READ-ONLY; The sequence of results returned by the query.
	Results []*SuggestResult

	// READ-ONLY; A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was
// not set in the request.
	Coverage *float64
}

// SuggestRequest - Parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors.
type SuggestRequest struct {
	// REQUIRED; The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.
	SearchText *string

	// REQUIRED; The name of the suggester as specified in the suggesters collection that's part of the index definition.
	SuggesterName *string

	// An OData expression that filters the documents considered for suggestions.
	Filter *string

	// A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions
// is disabled.
	HighlightPostTag *string

	// A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions
// is disabled.
	HighlightPreTag *string

	// A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for
// the query to be reported as a success. This parameter can be useful for
// ensuring search availability even for services with only one replica. The default is 80.
	MinimumCoverage *float64

	// The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field
// name or a call to either the geo.distance() or the search.score() functions.
// Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending
// order. Ties will be broken by the match scores of documents. If no $orderby is
// specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
	OrderBy *string

	// The comma-separated list of field names to search for the specified search text. Target fields must be included in the
// specified suggester.
	SearchFields *string

	// The comma-separated list of fields to retrieve. If unspecified, only the key field will be included in the results.
	Select *string

	// The number of suggestions to retrieve. This must be a value between 1 and 100. The default is 5.
	Top *int32

	// A value indicating whether to use fuzzy matching for the suggestion query. Default is false. When set to true, the query
// will find suggestions even if there's a substituted or missing character in the
// search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestion
// searches are slower and consume more resources.
	UseFuzzyMatching *bool
}

// SuggestResult - A result containing a document found by a suggestion query, plus associated metadata.
type SuggestResult struct {
	// READ-ONLY; The text of the suggestion result.
	Text *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
}

// VectorQuery - The query parameters for vector and hybrid search queries.
type VectorQuery struct {
	// REQUIRED; The kind of vector query being performed.
	Kind *VectorQueryKind

	// When true, triggers an exhaustive k-nearest neighbor search across all vectors within the vector index. Useful for scenarios
// where exact matches are critical, such as determining ground truth values.
	Exhaustive *bool

	// Vector Fields of type Collection(Edm.Single) to be included in the vector searched.
	Fields *string

	// Number of nearest neighbors to return as top hits.
	K *int32

	// Oversampling factor. Minimum value is 1. It overrides the 'defaultOversampling' parameter configured in the index definition.
// It can be set only when 'rerankWithOriginalVectors' is true. This
// parameter is only permitted when a compression method is used on the underlying vector field.
	Oversampling *float64

	// Relative weight of the vector query when compared to other vector query and/or the text query within the same search request.
// This value is used when combining the results of multiple ranking lists
// produced by the different vector queries and/or the results retrieved through the text query. The higher the weight, the
// higher the documents that matched that query will be in the final ranking.
// Default is 1.0 and the value needs to be a positive number larger than zero.
	Weight *float32
}

// GetVectorQuery implements the VectorQueryClassification interface for type VectorQuery.
func (v *VectorQuery) GetVectorQuery() *VectorQuery { return v }

// VectorizableTextQuery - The query parameters to use for vector search when a text value that needs to be vectorized is
// provided.
type VectorizableTextQuery struct {
	// REQUIRED; The kind of vector query being performed.
	Kind *VectorQueryKind

	// REQUIRED; The text to be vectorized to perform a vector search query.
	Text *string

	// When true, triggers an exhaustive k-nearest neighbor search across all vectors within the vector index. Useful for scenarios
// where exact matches are critical, such as determining ground truth values.
	Exhaustive *bool

	// Vector Fields of type Collection(Edm.Single) to be included in the vector searched.
	Fields *string

	// Number of nearest neighbors to return as top hits.
	K *int32

	// Oversampling factor. Minimum value is 1. It overrides the 'defaultOversampling' parameter configured in the index definition.
// It can be set only when 'rerankWithOriginalVectors' is true. This
// parameter is only permitted when a compression method is used on the underlying vector field.
	Oversampling *float64

	// Relative weight of the vector query when compared to other vector query and/or the text query within the same search request.
// This value is used when combining the results of multiple ranking lists
// produced by the different vector queries and/or the results retrieved through the text query. The higher the weight, the
// higher the documents that matched that query will be in the final ranking.
// Default is 1.0 and the value needs to be a positive number larger than zero.
	Weight *float32
}

// GetVectorQuery implements the VectorQueryClassification interface for type VectorizableTextQuery.
func (v *VectorizableTextQuery) GetVectorQuery() *VectorQuery {
	return &VectorQuery{
		Exhaustive: v.Exhaustive,
		Fields: v.Fields,
		K: v.K,
		Kind: v.Kind,
		Oversampling: v.Oversampling,
		Weight: v.Weight,
	}
}

// VectorizedQuery - The query parameters to use for vector search when a raw vector value is provided.
type VectorizedQuery struct {
	// REQUIRED; The kind of vector query being performed.
	Kind *VectorQueryKind

	// REQUIRED; The vector representation of a search query.
	Vector []*float32

	// When true, triggers an exhaustive k-nearest neighbor search across all vectors within the vector index. Useful for scenarios
// where exact matches are critical, such as determining ground truth values.
	Exhaustive *bool

	// Vector Fields of type Collection(Edm.Single) to be included in the vector searched.
	Fields *string

	// Number of nearest neighbors to return as top hits.
	K *int32

	// Oversampling factor. Minimum value is 1. It overrides the 'defaultOversampling' parameter configured in the index definition.
// It can be set only when 'rerankWithOriginalVectors' is true. This
// parameter is only permitted when a compression method is used on the underlying vector field.
	Oversampling *float64

	// Relative weight of the vector query when compared to other vector query and/or the text query within the same search request.
// This value is used when combining the results of multiple ranking lists
// produced by the different vector queries and/or the results retrieved through the text query. The higher the weight, the
// higher the documents that matched that query will be in the final ranking.
// Default is 1.0 and the value needs to be a positive number larger than zero.
	Weight *float32
}

// GetVectorQuery implements the VectorQueryClassification interface for type VectorizedQuery.
func (v *VectorizedQuery) GetVectorQuery() *VectorQuery {
	return &VectorQuery{
		Exhaustive: v.Exhaustive,
		Fields: v.Fields,
		K: v.K,
		Kind: v.Kind,
		Oversampling: v.Oversampling,
		Weight: v.Weight,
	}
}

