// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azsearchindex

// AutocompleteMode - Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext'
// to use the current context in producing autocomplete terms.
type AutocompleteMode string

const (
	// AutocompleteModeOneTerm - Only one term is suggested. If the query has two terms, only the last term is completed. For
// example, if the input is 'washington medic', the suggested terms could include 'medicaid', 'medicare', and 'medicine'.
	AutocompleteModeOneTerm AutocompleteMode = "oneTerm"
	// AutocompleteModeOneTermWithContext - Completes the last term in a query with two or more terms, where the last two terms
// are a phrase that exists in the index. For example, if the input is 'washington medic', the suggested terms could include
// 'washington medicaid' and 'washington medical'.
	AutocompleteModeOneTermWithContext AutocompleteMode = "oneTermWithContext"
	// AutocompleteModeTwoTerms - Matching two-term phrases in the index will be suggested. For example, if the input is 'medic',
// the suggested terms could include 'medicare coverage' and 'medical assistant'.
	AutocompleteModeTwoTerms AutocompleteMode = "twoTerms"
)

// PossibleAutocompleteModeValues returns the possible values for the AutocompleteMode const type.
func PossibleAutocompleteModeValues() []AutocompleteMode {
	return []AutocompleteMode{	
		AutocompleteModeOneTerm,
		AutocompleteModeOneTermWithContext,
		AutocompleteModeTwoTerms,
	}
}

// IndexActionType - The operation to perform on a document in an indexing batch.
type IndexActionType string

const (
	// IndexActionTypeDelete - Removes the specified document from the index. Any field you specify in a delete operation other
// than the key field will be ignored. If you want to remove an individual field from a document, use merge instead and set
// the field explicitly to null.
	IndexActionTypeDelete IndexActionType = "delete"
	// IndexActionTypeMerge - Merges the specified field values with an existing document. If the document does not exist, the
// merge will fail. Any field you specify in a merge will replace the existing field in the document. This also applies to
// collections of primitive and complex types.
	IndexActionTypeMerge IndexActionType = "merge"
	// IndexActionTypeMergeOrUpload - Behaves like merge if a document with the given key already exists in the index. If the
// document does not exist, it behaves like upload with a new document.
	IndexActionTypeMergeOrUpload IndexActionType = "mergeOrUpload"
	// IndexActionTypeUpload - Inserts the document into the index if it is new and updates it if it exists. All fields are replaced
// in the update case.
	IndexActionTypeUpload IndexActionType = "upload"
)

// PossibleIndexActionTypeValues returns the possible values for the IndexActionType const type.
func PossibleIndexActionTypeValues() []IndexActionType {
	return []IndexActionType{	
		IndexActionTypeDelete,
		IndexActionTypeMerge,
		IndexActionTypeMergeOrUpload,
		IndexActionTypeUpload,
	}
}

// QueryAnswerType - This parameter is only valid if the query type is semantic. If set, the query returns answers extracted
// from key passages in the highest ranked documents. The number of answers returned can be
// configured by appending the pipe character | followed by the count-<number of answers> option after the answers parameter
// value, such as extractive|count-3. Default count is 1. The confidence
// threshold can be configured by appending the pipe character | followed by the threshold-<confidence threshold> option after
// the answers parameter value, such as extractive|threshold-0.9. Default
// threshold is 0.7.
type QueryAnswerType string

const (
	// QueryAnswerTypeExtractive - Extracts answer candidates from the contents of the documents returned in response to a query
// expressed as a question in natural language.
	QueryAnswerTypeExtractive QueryAnswerType = "extractive"
	// QueryAnswerTypeNone - Do not return answers for the query.
	QueryAnswerTypeNone QueryAnswerType = "none"
)

// PossibleQueryAnswerTypeValues returns the possible values for the QueryAnswerType const type.
func PossibleQueryAnswerTypeValues() []QueryAnswerType {
	return []QueryAnswerType{	
		QueryAnswerTypeExtractive,
		QueryAnswerTypeNone,
	}
}

// QueryCaptionType - This parameter is only valid if the query type is semantic. If set, the query returns captions extracted
// from key passages in the highest ranked documents. When Captions is set to extractive,
// highlighting is enabled by default, and can be configured by appending the pipe character | followed by the highlight-<true/false>
// option, such as extractive|highlight-true. Defaults to None.
type QueryCaptionType string

const (
	// QueryCaptionTypeExtractive - Extracts captions from the matching documents that contain passages relevant to the search
// query.
	QueryCaptionTypeExtractive QueryCaptionType = "extractive"
	// QueryCaptionTypeNone - Do not return captions for the query.
	QueryCaptionTypeNone QueryCaptionType = "none"
)

// PossibleQueryCaptionTypeValues returns the possible values for the QueryCaptionType const type.
func PossibleQueryCaptionTypeValues() []QueryCaptionType {
	return []QueryCaptionType{	
		QueryCaptionTypeExtractive,
		QueryCaptionTypeNone,
	}
}

// QueryType - Specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene
// query syntax.
type QueryType string

const (
	// QueryTypeFull - Uses the full Lucene query syntax for searches. Search text is interpreted using the Lucene query language
// which allows field-specific and weighted searches, as well as other advanced features.
	QueryTypeFull QueryType = "full"
	// QueryTypeSemantic - Best suited for queries expressed in natural language as opposed to keywords. Improves precision of
// search results by re-ranking the top search results using a ranking model trained on the Web corpus.
	QueryTypeSemantic QueryType = "semantic"
	// QueryTypeSimple - Uses the simple query syntax for searches. Search text is interpreted using a simple query language that
// allows for symbols such as +, * and "". Queries are evaluated across all searchable fields by default, unless the searchFields
// parameter is specified.
	QueryTypeSimple QueryType = "simple"
)

// PossibleQueryTypeValues returns the possible values for the QueryType const type.
func PossibleQueryTypeValues() []QueryType {
	return []QueryType{	
		QueryTypeFull,
		QueryTypeSemantic,
		QueryTypeSimple,
	}
}

// ScoringStatistics - A value that specifies whether we want to calculate scoring statistics (such as document frequency)
// globally for more consistent scoring, or locally, for lower latency. The default is 'local'. Use
// 'global' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency
// of search queries.
type ScoringStatistics string

const (
	// ScoringStatisticsGlobal - The scoring statistics will be calculated globally for more consistent scoring.
	ScoringStatisticsGlobal ScoringStatistics = "global"
	// ScoringStatisticsLocal - The scoring statistics will be calculated locally for lower latency.
	ScoringStatisticsLocal ScoringStatistics = "local"
)

// PossibleScoringStatisticsValues returns the possible values for the ScoringStatistics const type.
func PossibleScoringStatisticsValues() []ScoringStatistics {
	return []ScoringStatistics{	
		ScoringStatisticsGlobal,
		ScoringStatisticsLocal,
	}
}

// SearchMode - Specifies whether any or all of the search terms must be matched in order to count the document as a match.
type SearchMode string

const (
	// SearchModeAll - All of the search terms must be matched in order to count the document as a match.
	SearchModeAll SearchMode = "all"
	// SearchModeAny - Any of the search terms must be matched in order to count the document as a match.
	SearchModeAny SearchMode = "any"
)

// PossibleSearchModeValues returns the possible values for the SearchMode const type.
func PossibleSearchModeValues() []SearchMode {
	return []SearchMode{	
		SearchModeAll,
		SearchModeAny,
	}
}

// SemanticErrorMode - Allows the user to choose whether a semantic call should fail completely, or to return partial results.
type SemanticErrorMode string

const (
	// SemanticErrorModeFail - If there is an exception during the semantic processing step, the query will fail and return the
// appropriate HTTP code depending on the error.
	SemanticErrorModeFail SemanticErrorMode = "fail"
	// SemanticErrorModePartial - If the semantic processing fails, partial results still return. The definition of partial results
// depends on what semantic step failed and what was the reason for failure.
	SemanticErrorModePartial SemanticErrorMode = "partial"
)

// PossibleSemanticErrorModeValues returns the possible values for the SemanticErrorMode const type.
func PossibleSemanticErrorModeValues() []SemanticErrorMode {
	return []SemanticErrorMode{	
		SemanticErrorModeFail,
		SemanticErrorModePartial,
	}
}

// SemanticErrorReason - Reason that a partial response was returned for a semantic ranking request.
type SemanticErrorReason string

const (
	// SemanticErrorReasonCapacityOverloaded - The request was throttled. Only the base results were returned.
	SemanticErrorReasonCapacityOverloaded SemanticErrorReason = "capacityOverloaded"
	// SemanticErrorReasonMaxWaitExceeded - If `semanticMaxWaitInMilliseconds` was set and the semantic processing duration exceeded
// that value. Only the base results were returned.
	SemanticErrorReasonMaxWaitExceeded SemanticErrorReason = "maxWaitExceeded"
	// SemanticErrorReasonTransient - At least one step of the semantic process failed.
	SemanticErrorReasonTransient SemanticErrorReason = "transient"
)

// PossibleSemanticErrorReasonValues returns the possible values for the SemanticErrorReason const type.
func PossibleSemanticErrorReasonValues() []SemanticErrorReason {
	return []SemanticErrorReason{	
		SemanticErrorReasonCapacityOverloaded,
		SemanticErrorReasonMaxWaitExceeded,
		SemanticErrorReasonTransient,
	}
}

// SemanticSearchResultsType - Type of partial response that was returned for a semantic ranking request.
type SemanticSearchResultsType string

const (
	// SemanticSearchResultsTypeBaseResults - Results without any semantic enrichment or reranking.
	SemanticSearchResultsTypeBaseResults SemanticSearchResultsType = "baseResults"
	// SemanticSearchResultsTypeRerankedResults - Results have been reranked with the reranker model and will include semantic
// captions. They will not include any answers, answers highlights or caption highlights.
	SemanticSearchResultsTypeRerankedResults SemanticSearchResultsType = "rerankedResults"
)

// PossibleSemanticSearchResultsTypeValues returns the possible values for the SemanticSearchResultsType const type.
func PossibleSemanticSearchResultsTypeValues() []SemanticSearchResultsType {
	return []SemanticSearchResultsType{	
		SemanticSearchResultsTypeBaseResults,
		SemanticSearchResultsTypeRerankedResults,
	}
}

// VectorFilterMode - Determines whether or not filters are applied before or after the vector search is performed.
type VectorFilterMode string

const (
	// VectorFilterModePostFilter - The filter will be applied after the candidate set of vector results is returned. Depending
// on the filter selectivity, this can result in fewer results than requested by the parameter 'k'.
	VectorFilterModePostFilter VectorFilterMode = "postFilter"
	// VectorFilterModePreFilter - The filter will be applied before the search query.
	VectorFilterModePreFilter VectorFilterMode = "preFilter"
)

// PossibleVectorFilterModeValues returns the possible values for the VectorFilterMode const type.
func PossibleVectorFilterModeValues() []VectorFilterMode {
	return []VectorFilterMode{	
		VectorFilterModePostFilter,
		VectorFilterModePreFilter,
	}
}

// VectorQueryKind - The kind of vector query being performed.
type VectorQueryKind string

const (
	// VectorQueryKindText - Vector query where a text value that needs to be vectorized is provided.
	VectorQueryKindText VectorQueryKind = "text"
	// VectorQueryKindVector - Vector query where a raw vector value is provided.
	VectorQueryKindVector VectorQueryKind = "vector"
)

// PossibleVectorQueryKindValues returns the possible values for the VectorQueryKind const type.
func PossibleVectorQueryKindValues() []VectorQueryKind {
	return []VectorQueryKind{	
		VectorQueryKindText,
		VectorQueryKindVector,
	}
}

